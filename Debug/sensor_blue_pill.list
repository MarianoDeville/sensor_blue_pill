
sensor_blue_pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003454  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003560  08003560  00004560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035ec  080035ec  00005024  2**0
                  CONTENTS
  4 .ARM          00000000  080035ec  080035ec  00005024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035ec  080035ec  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035ec  080035ec  000045ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035f0  080035f0  000045f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080035f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000028  08003618  00005028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003618  0000513c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f1e  00000000  00000000  0000504d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b4  00000000  00000000  0000cf6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0000f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000697  00000000  00000000  0000fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187c7  00000000  00000000  000102bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c942  00000000  00000000  00028a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008395d  00000000  00000000  000353c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8d25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002154  00000000  00000000  000b8d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000baebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08003548 	.word	0x08003548

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08003548 	.word	0x08003548

0800014c <ModoSetup>:
 * 			10 segundos el botón de reset el módulo arranca en modo configuración
 * @param	None.
 * @retval	Estado de la operación (NO_SETUP, SETUP_FAIL y SETUP_SUCIFULL).
 * @note	Arranco con la configuración de fábrica para el módulo MRF24J40
 */
sys_state_t ModoSetup(void) {
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b0b2      	sub	sp, #200	@ 0xc8
 8000150:	af00      	add	r7, sp, #0

	int32_t tiempo = HAL_GetTick();
 8000152:	f000 fef3 	bl	8000f3c <HAL_GetTick>
 8000156:	4603      	mov	r3, r0
 8000158:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	bool_t config_enable = false;
 800015c:	2300      	movs	r3, #0
 800015e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	while(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 8000162:	e024      	b.n	80001ae <ModoSetup+0x62>

		if((HAL_GetTick() - tiempo) >= SETUP_TIME_MS) {
 8000164:	f000 feea 	bl	8000f3c <HAL_GetTick>
 8000168:	4602      	mov	r2, r0
 800016a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800016e:	1ad3      	subs	r3, r2, r3
 8000170:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000174:	4293      	cmp	r3, r2
 8000176:	d91a      	bls.n	80001ae <ModoSetup+0x62>

			for(uint8_t i = 0; i < 6; i++) {
 8000178:	2300      	movs	r3, #0
 800017a:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
 800017e:	e00e      	b.n	800019e <ModoSetup+0x52>

				ToggleLed(ROJO);
 8000180:	2002      	movs	r0, #2
 8000182:	f000 fbad 	bl	80008e0 <ToggleLed>
				ToggleLed(VERDE);
 8000186:	2000      	movs	r0, #0
 8000188:	f000 fbaa 	bl	80008e0 <ToggleLed>
				delay_t(500);
 800018c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000190:	f000 fede 	bl	8000f50 <HAL_Delay>
			for(uint8_t i = 0; i < 6; i++) {
 8000194:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8000198:	3301      	adds	r3, #1
 800019a:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
 800019e:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80001a2:	2b05      	cmp	r3, #5
 80001a4:	d9ec      	bls.n	8000180 <ModoSetup+0x34>
			}
			config_enable = true;
 80001a6:	2301      	movs	r3, #1
 80001a8:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
			break;
 80001ac:	e007      	b.n	80001be <ModoSetup+0x72>
	while(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 80001ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001b2:	4878      	ldr	r0, [pc, #480]	@ (8000394 <ModoSetup+0x248>)
 80001b4:	f001 fb58 	bl	8001868 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d1d2      	bne.n	8000164 <ModoSetup+0x18>
		}
	}

	if(!config_enable)
 80001be:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80001c2:	f083 0301 	eor.w	r3, r3, #1
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <ModoSetup+0x84>
		return NO_SETUP;
 80001cc:	2300      	movs	r3, #0
 80001ce:	e0dd      	b.n	800038c <ModoSetup+0x240>

	if(INITIALIZATION_OK != MRF24J40Init())			// inicializo el mrf con configuración por defecto
 80001d0:	f002 feaa 	bl	8002f28 <MRF24J40Init>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d001      	beq.n	80001de <ModoSetup+0x92>
		return SETUP_FAIL;
 80001da:	2303      	movs	r3, #3
 80001dc:	e0d6      	b.n	800038c <ModoSetup+0x240>
	uint8_t ciclos = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
	delayNoBloqueanteData_t delay_time;
	DelayInit(&delay_time, CICLE_TIME_MS);
 80001e4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80001e8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f9cf 	bl	8000590 <DelayInit>
	mrf24_data_in_t * mrf24_data_in;				// puntero para recibir el mensage de entrada
	mrf24_data_config_t data_config_recibida = {0}; // variable de configuración recibida para el mrf
 80001f2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80001f6:	2220      	movs	r2, #32
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f003 f96a 	bl	80034d4 <memset>
	system_config_t  system_data_recibida = {0};	// variable de configuración recibida para el systema
 8000200:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000204:	223c      	movs	r2, #60	@ 0x3c
 8000206:	2100      	movs	r1, #0
 8000208:	4618      	mov	r0, r3
 800020a:	f003 f963 	bl	80034d4 <memset>
	bool_t actualizar_mrf24 = false;
 800020e:	2300      	movs	r3, #0
 8000210:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
	bool_t actualizar_system_info = false;
 8000214:	2300      	movs	r3, #0
 8000216:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb

	while(config_enable) {
 800021a:	e067      	b.n	80002ec <ModoSetup+0x1a0>

		if(DelayRead(&delay_time)) {
 800021c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f9cc 	bl	80005be <DelayRead>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d007      	beq.n	800023c <ModoSetup+0xf0>

			ToggleLed(ROJO);
 800022c:	2002      	movs	r0, #2
 800022e:	f000 fb57 	bl	80008e0 <ToggleLed>
			ciclos ++;
 8000232:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8000236:	3301      	adds	r3, #1
 8000238:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
		}

		if(ciclos > CICLE_TIME_OUT)
			return SETUP_FAIL;

		if(MSG_PRESENT == MRF24IsNewMsg()) {
 800023c:	f003 f822 	bl	8003284 <MRF24IsNewMsg>
 8000240:	4603      	mov	r3, r0
 8000242:	2b04      	cmp	r3, #4
 8000244:	d152      	bne.n	80002ec <ModoSetup+0x1a0>

			if(MSG_READ == MRF24ReciboPaquete()) {
 8000246:	f003 f835 	bl	80032b4 <MRF24ReciboPaquete>
 800024a:	4603      	mov	r3, r0
 800024c:	2b05      	cmp	r3, #5
 800024e:	d14d      	bne.n	80002ec <ModoSetup+0x1a0>

				mrf24_data_in = MRF24GetDataIn();
 8000250:	f003 f88a 	bl	8003368 <MRF24GetDataIn>
 8000254:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4

				if(!memcmp(mrf24_data_in->buffer, "MRFCNF:", SIZE_COMMAND)) {
 8000258:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800025c:	3305      	adds	r3, #5
 800025e:	2207      	movs	r2, #7
 8000260:	494d      	ldr	r1, [pc, #308]	@ (8000398 <ModoSetup+0x24c>)
 8000262:	4618      	mov	r0, r3
 8000264:	f003 f926 	bl	80034b4 <memcmp>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d112      	bne.n	8000294 <ModoSetup+0x148>

					memcpy(&data_config_recibida,
							mrf24_data_in->buffer + SIZE_COMMAND,
 800026e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000272:	3305      	adds	r3, #5
					memcpy(&data_config_recibida,
 8000274:	1dd9      	adds	r1, r3, #7
							mrf24_data_in->buffer_size - SIZE_COMMAND);
 8000276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800027a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800027e:	3b07      	subs	r3, #7
					memcpy(&data_config_recibida,
 8000280:	461a      	mov	r2, r3
 8000282:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000286:	4618      	mov	r0, r3
 8000288:	f003 f950 	bl	800352c <memcpy>
					actualizar_mrf24 = true;
 800028c:	2301      	movs	r3, #1
 800028e:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
 8000292:	e02b      	b.n	80002ec <ModoSetup+0x1a0>
				} else if(!memcmp(mrf24_data_in->buffer, "SYSCNF:", SIZE_COMMAND)) {
 8000294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000298:	3305      	adds	r3, #5
 800029a:	2207      	movs	r2, #7
 800029c:	493f      	ldr	r1, [pc, #252]	@ (800039c <ModoSetup+0x250>)
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 f908 	bl	80034b4 <memcmp>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d112      	bne.n	80002d0 <ModoSetup+0x184>

					memcpy(&system_data_recibida,
							mrf24_data_in->buffer + SIZE_COMMAND,
 80002aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80002ae:	3305      	adds	r3, #5
					memcpy(&system_data_recibida,
 80002b0:	1dd9      	adds	r1, r3, #7
							mrf24_data_in->buffer_size - SIZE_COMMAND);
 80002b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80002b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80002ba:	3b07      	subs	r3, #7
					memcpy(&system_data_recibida,
 80002bc:	461a      	mov	r2, r3
 80002be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 f932 	bl	800352c <memcpy>
					actualizar_system_info = true;
 80002c8:	2301      	movs	r3, #1
 80002ca:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
 80002ce:	e00d      	b.n	80002ec <ModoSetup+0x1a0>
				} else if(!memcmp(mrf24_data_in->buffer, "ENDCNF:", SIZE_COMMAND)) {
 80002d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80002d4:	3305      	adds	r3, #5
 80002d6:	2207      	movs	r2, #7
 80002d8:	4931      	ldr	r1, [pc, #196]	@ (80003a0 <ModoSetup+0x254>)
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 f8ea 	bl	80034b4 <memcmp>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d102      	bne.n	80002ec <ModoSetup+0x1a0>

					config_enable = false;
 80002e6:	2300      	movs	r3, #0
 80002e8:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
	while(config_enable) {
 80002ec:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d193      	bne.n	800021c <ModoSetup+0xd0>
				}
			}
		}
	}

	if(actualizar_mrf24) {
 80002f4:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d015      	beq.n	8000328 <ModoSetup+0x1dc>

		if(CARGA_OK != SetMRF24Config(&data_config_recibida))
 80002fc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f889 	bl	8000418 <SetMRF24Config>
 8000306:	4603      	mov	r3, r0
 8000308:	2b01      	cmp	r3, #1
 800030a:	d001      	beq.n	8000310 <ModoSetup+0x1c4>
			return SETUP_FAIL;
 800030c:	2303      	movs	r3, #3
 800030e:	e03d      	b.n	800038c <ModoSetup+0x240>

		if(SAVE_OK != EEPROMSaveStruct(EEPROM_MRF24_ADDR, &data_config_recibida, sizeof(mrf24_data_config_t)))
 8000310:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000314:	2220      	movs	r2, #32
 8000316:	4619      	mov	r1, r3
 8000318:	4822      	ldr	r0, [pc, #136]	@ (80003a4 <ModoSetup+0x258>)
 800031a:	f000 f99f 	bl	800065c <EEPROMSaveStruct>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <ModoSetup+0x1dc>
			return SETUP_FAIL;
 8000324:	2303      	movs	r3, #3
 8000326:	e031      	b.n	800038c <ModoSetup+0x240>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// chequeo que los datos estén bien y guardo en la rom
	}
	// si todo va bien envío un mensaje avisando que se configuró correctamente el dispositivo.
    mrf24_data_out_t data_out_s;
	data_out_s.dest_address = BROADCAST;
 8000328:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800032c:	80fb      	strh	r3, [r7, #6]
	data_out_s.dest_panid = 0x9999;
 800032e:	f649 1399 	movw	r3, #39321	@ 0x9999
 8000332:	80bb      	strh	r3, [r7, #4]
	data_out_s.origin_address = 0x1111;
 8000334:	f241 1311 	movw	r3, #4369	@ 0x1111
 8000338:	813b      	strh	r3, [r7, #8]
    data_out_s.buffer_size = strlen("Configuración guardada");
 800033a:	2317      	movs	r3, #23
 800033c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	strcpy(data_out_s.buffer, "Configuración guardada");
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	3306      	adds	r3, #6
 8000344:	4a18      	ldr	r2, [pc, #96]	@ (80003a8 <ModoSetup+0x25c>)
 8000346:	461d      	mov	r5, r3
 8000348:	4614      	mov	r4, r2
 800034a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800034c:	6028      	str	r0, [r5, #0]
 800034e:	6069      	str	r1, [r5, #4]
 8000350:	60aa      	str	r2, [r5, #8]
 8000352:	60eb      	str	r3, [r5, #12]
 8000354:	cc03      	ldmia	r4!, {r0, r1}
 8000356:	6128      	str	r0, [r5, #16]
 8000358:	6169      	str	r1, [r5, #20]
	MRF24TransmitirDato(&data_out_s);
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f002 feb9 	bl	80030d4 <MRF24TransmitirDato>

	for(uint8_t i = 0; i < 6; i++) {
 8000362:	2300      	movs	r3, #0
 8000364:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8000368:	e00b      	b.n	8000382 <ModoSetup+0x236>

		ToggleLed(VERDE);
 800036a:	2000      	movs	r0, #0
 800036c:	f000 fab8 	bl	80008e0 <ToggleLed>
		delay_t(500);
 8000370:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000374:	f000 fdec 	bl	8000f50 <HAL_Delay>
	for(uint8_t i = 0; i < 6; i++) {
 8000378:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800037c:	3301      	adds	r3, #1
 800037e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8000382:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8000386:	2b05      	cmp	r3, #5
 8000388:	d9ef      	bls.n	800036a <ModoSetup+0x21e>
	}
	return SETUP_SUCIFULL;
 800038a:	2304      	movs	r3, #4
}
 800038c:	4618      	mov	r0, r3
 800038e:	37c8      	adds	r7, #200	@ 0xc8
 8000390:	46bd      	mov	sp, r7
 8000392:	bdb0      	pop	{r4, r5, r7, pc}
 8000394:	40010c00 	.word	0x40010c00
 8000398:	08003560 	.word	0x08003560
 800039c:	08003568 	.word	0x08003568
 80003a0:	08003570 	.word	0x08003570
 80003a4:	0800fc00 	.word	0x0800fc00
 80003a8:	08003578 	.word	0x08003578

080003ac <CargarConfig>:
 * 			sistema si estan almacenadas en ROM.
 * @param	None.
 * @retval	Estado de la carga (CARGA_OK, CARGA_ERR).
 * @note
 */
sys_state_t CargarConfig(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0

	mrf24_data_config_t * mrf24_config_s;
	if(LOAD_OK == EEPROMLoadStruct(EEPROM_MRF24_ADDR, &mrf24_config_s, sizeof(mrf24_data_config_t))) {
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2220      	movs	r2, #32
 80003b6:	4619      	mov	r1, r3
 80003b8:	4815      	ldr	r0, [pc, #84]	@ (8000410 <CargarConfig+0x64>)
 80003ba:	f000 fa41 	bl	8000840 <EEPROMLoadStruct>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d10e      	bne.n	80003e2 <CargarConfig+0x36>

		if(0xFF == mrf24_config_s->channel)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2bff      	cmp	r3, #255	@ 0xff
 80003ca:	d101      	bne.n	80003d0 <CargarConfig+0x24>
			return CARGA_ERR;
 80003cc:	2302      	movs	r3, #2
 80003ce:	e01b      	b.n	8000408 <CargarConfig+0x5c>

		if(CARGA_ERR == SetMRF24Config(mrf24_config_s))
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 f820 	bl	8000418 <SetMRF24Config>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d101      	bne.n	80003e2 <CargarConfig+0x36>
			return CARGA_ERR;
 80003de:	2302      	movs	r3, #2
 80003e0:	e012      	b.n	8000408 <CargarConfig+0x5c>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	system_config_t * system_config_s;

	if(LOAD_OK != EEPROMLoadStruct(EEPROM_CONFIG_ADDR, &system_config_s, sizeof(system_config_t)))
 80003e2:	463b      	mov	r3, r7
 80003e4:	223c      	movs	r2, #60	@ 0x3c
 80003e6:	4619      	mov	r1, r3
 80003e8:	480a      	ldr	r0, [pc, #40]	@ (8000414 <CargarConfig+0x68>)
 80003ea:	f000 fa29 	bl	8000840 <EEPROMLoadStruct>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b02      	cmp	r3, #2
 80003f2:	d001      	beq.n	80003f8 <CargarConfig+0x4c>
			return CARGA_ERR;
 80003f4:	2302      	movs	r3, #2
 80003f6:	e007      	b.n	8000408 <CargarConfig+0x5c>





	if(INITIALIZATION_OK != MRF24J40Init())
 80003f8:	f002 fd96 	bl	8002f28 <MRF24J40Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d001      	beq.n	8000406 <CargarConfig+0x5a>
		return CARGA_ERR;
 8000402:	2302      	movs	r3, #2
 8000404:	e000      	b.n	8000408 <CargarConfig+0x5c>
	return CARGA_OK;
 8000406:	2301      	movs	r3, #1
}
 8000408:	4618      	mov	r0, r3
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	0800fc00 	.word	0x0800fc00
 8000414:	0800fc40 	.word	0x0800fc40

08000418 <SetMRF24Config>:
 * @param	Puntero a la estructura con la información
 * @retval	Estado de la operación (CARGA_OK, CARGA_ERR).
 * @note	Si alguno de los parámetros no son correctos se informa el error
 * 			para no continuar con el arranque.
 */
sys_state_t SetMRF24Config(mrf24_data_config_t * mrf_info_s) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]

	if(OPERATION_OK != MRF24SetChannel(mrf_info_s->channel))
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	4618      	mov	r0, r3
 8000426:	f002 fd9b 	bl	8002f60 <MRF24SetChannel>
 800042a:	4603      	mov	r3, r0
 800042c:	2b0a      	cmp	r3, #10
 800042e:	d001      	beq.n	8000434 <SetMRF24Config+0x1c>
		return CARGA_ERR;
 8000430:	2302      	movs	r3, #2
 8000432:	e032      	b.n	800049a <SetMRF24Config+0x82>

	if(OPERATION_OK != MRF24SetPanId(mrf_info_s->panid))
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4618      	mov	r0, r3
 800043a:	f002 fda9 	bl	8002f90 <MRF24SetPanId>
 800043e:	4603      	mov	r3, r0
 8000440:	2b0a      	cmp	r3, #10
 8000442:	d001      	beq.n	8000448 <SetMRF24Config+0x30>
		return CARGA_ERR;
 8000444:	2302      	movs	r3, #2
 8000446:	e028      	b.n	800049a <SetMRF24Config+0x82>

	if(OPERATION_OK != MRF24SetAdd(mrf_info_s->address))
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	889b      	ldrh	r3, [r3, #4]
 800044c:	4618      	mov	r0, r3
 800044e:	f002 fdb7 	bl	8002fc0 <MRF24SetAdd>
 8000452:	4603      	mov	r3, r0
 8000454:	2b0a      	cmp	r3, #10
 8000456:	d001      	beq.n	800045c <SetMRF24Config+0x44>
		return CARGA_ERR;
 8000458:	2302      	movs	r3, #2
 800045a:	e01e      	b.n	800049a <SetMRF24Config+0x82>

	if(OPERATION_OK != MRF24SetInter(mrf_info_s->intervalo))
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	88db      	ldrh	r3, [r3, #6]
 8000460:	4618      	mov	r0, r3
 8000462:	f002 fdc5 	bl	8002ff0 <MRF24SetInter>
 8000466:	4603      	mov	r3, r0
 8000468:	2b0a      	cmp	r3, #10
 800046a:	d001      	beq.n	8000470 <SetMRF24Config+0x58>
		return CARGA_ERR;
 800046c:	2302      	movs	r3, #2
 800046e:	e014      	b.n	800049a <SetMRF24Config+0x82>

	if(OPERATION_OK != MRF24SetMAC(mrf_info_s->mac))
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3308      	adds	r3, #8
 8000474:	4618      	mov	r0, r3
 8000476:	f002 fdcd 	bl	8003014 <MRF24SetMAC>
 800047a:	4603      	mov	r3, r0
 800047c:	2b0a      	cmp	r3, #10
 800047e:	d001      	beq.n	8000484 <SetMRF24Config+0x6c>
		return CARGA_ERR;
 8000480:	2302      	movs	r3, #2
 8000482:	e00a      	b.n	800049a <SetMRF24Config+0x82>

	if(OPERATION_OK != MRF24SetSecurityKey(mrf_info_s->security_key))
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3310      	adds	r3, #16
 8000488:	4618      	mov	r0, r3
 800048a:	f002 fdf1 	bl	8003070 <MRF24SetSecurityKey>
 800048e:	4603      	mov	r3, r0
 8000490:	2b0a      	cmp	r3, #10
 8000492:	d001      	beq.n	8000498 <SetMRF24Config+0x80>
		return CARGA_ERR;
 8000494:	2302      	movs	r3, #2
 8000496:	e000      	b.n	800049a <SetMRF24Config+0x82>
	return CARGA_OK;
 8000498:	2301      	movs	r3, #1
}
 800049a:	4618      	mov	r0, r3
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <DebounceFSMInit>:
/**
  * @brief  Inicializa las variables de la máuina de estado para la función anti rebote.
  * @param  Puntero a la estructura que contiene las variabes.
  * @retval None
  */
void DebounceFSMInit(debounce_data_t * antirrebote_boton_n) {
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b082      	sub	sp, #8
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]

	assert_param(antirrebote_boton_n);
	antirrebote_boton_n->estadoActual = BOTON_SIN_CAMBIOS;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2203      	movs	r2, #3
 80004ae:	701a      	strb	r2, [r3, #0]
	DelayInit(&antirrebote_boton_n->delay_anti_rebote, TIEMPO_ANTI_REBOTE);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3304      	adds	r3, #4
 80004b4:	2128      	movs	r1, #40	@ 0x28
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f86a 	bl	8000590 <DelayInit>
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <DebounceFSMUpdate>:
  * @param  Estado actual - booleano.
  * @retval Devuelvo la información si el botón fue presionado, soltado, sin cambios o si hubo un error.
  * @note	En el enunciado la función no posee parámetros, pero de esta forma independizo totalmente
  * 		el driver del hardware en donde lo implemento.
  */
estado_pulsador_t DebounceFSMUpdate(debounce_data_t * antirrebote_boton_n, bool_t estado_pin) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]

	assert_param(antirrebote_boton_n);

	switch(antirrebote_boton_n->estadoActual) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d849      	bhi.n	800056c <DebounceFSMUpdate+0xa8>
 80004d8:	a201      	add	r2, pc, #4	@ (adr r2, 80004e0 <DebounceFSMUpdate+0x1c>)
 80004da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004de:	bf00      	nop
 80004e0:	080004f1 	.word	0x080004f1
 80004e4:	08000505 	.word	0x08000505
 80004e8:	0800055f 	.word	0x0800055f
 80004ec:	08000535 	.word	0x08000535

		case BUTTON_UP:

			if(!estado_pin)
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	f083 0301 	eor.w	r3, r3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d03c      	beq.n	8000576 <DebounceFSMUpdate+0xb2>
				antirrebote_boton_n->estadoActual = BUTTON_FALLING;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
			break;
 8000502:	e038      	b.n	8000576 <DebounceFSMUpdate+0xb2>

		case BUTTON_FALLING:

			if(DelayRead(&antirrebote_boton_n->delay_anti_rebote)) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	3304      	adds	r3, #4
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f858 	bl	80005be <DelayRead>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d032      	beq.n	800057a <DebounceFSMUpdate+0xb6>

				if(!estado_pin) {
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	f083 0301 	eor.w	r3, r3, #1
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2b00      	cmp	r3, #0
 800051e:	d004      	beq.n	800052a <DebounceFSMUpdate+0x66>

					antirrebote_boton_n->estadoActual = BUTTON_DOWN;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2202      	movs	r2, #2
 8000524:	701a      	strb	r2, [r3, #0]
					return PRESIONO_BOTON;
 8000526:	2301      	movs	r3, #1
 8000528:	e02d      	b.n	8000586 <DebounceFSMUpdate+0xc2>
				} else {

					antirrebote_boton_n->estadoActual = BUTTON_UP;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
					return RUIDO;
 8000530:	2304      	movs	r3, #4
 8000532:	e028      	b.n	8000586 <DebounceFSMUpdate+0xc2>
			}
			break;

		case BUTTON_RAISING:

			if(DelayRead(&antirrebote_boton_n->delay_anti_rebote)) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3304      	adds	r3, #4
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f840 	bl	80005be <DelayRead>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d01c      	beq.n	800057e <DebounceFSMUpdate+0xba>

				if(estado_pin) {
 8000544:	78fb      	ldrb	r3, [r7, #3]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d004      	beq.n	8000554 <DebounceFSMUpdate+0x90>

					antirrebote_boton_n->estadoActual = BUTTON_UP;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
					return SUELTO_BOTON;
 8000550:	2302      	movs	r3, #2
 8000552:	e018      	b.n	8000586 <DebounceFSMUpdate+0xc2>
				} else {

					antirrebote_boton_n->estadoActual = BUTTON_DOWN;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2202      	movs	r2, #2
 8000558:	701a      	strb	r2, [r3, #0]
					return RUIDO;
 800055a:	2304      	movs	r3, #4
 800055c:	e013      	b.n	8000586 <DebounceFSMUpdate+0xc2>
			}
			break;

		case BUTTON_DOWN:

			if(estado_pin)
 800055e:	78fb      	ldrb	r3, [r7, #3]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00e      	beq.n	8000582 <DebounceFSMUpdate+0xbe>
				antirrebote_boton_n->estadoActual = BUTTON_RAISING;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2203      	movs	r2, #3
 8000568:	701a      	strb	r2, [r3, #0]
			break;
 800056a:	e00a      	b.n	8000582 <DebounceFSMUpdate+0xbe>

		default:

			DebounceFSMInit(antirrebote_boton_n);
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff ff98 	bl	80004a2 <DebounceFSMInit>
			return ERROR_ANTI_REBOTE;
 8000572:	2300      	movs	r3, #0
 8000574:	e007      	b.n	8000586 <DebounceFSMUpdate+0xc2>
			break;
 8000576:	bf00      	nop
 8000578:	e004      	b.n	8000584 <DebounceFSMUpdate+0xc0>
			break;
 800057a:	bf00      	nop
 800057c:	e002      	b.n	8000584 <DebounceFSMUpdate+0xc0>
			break;
 800057e:	bf00      	nop
 8000580:	e000      	b.n	8000584 <DebounceFSMUpdate+0xc0>
			break;
 8000582:	bf00      	nop
	}
	return BOTON_SIN_CAMBIOS;
 8000584:	2303      	movs	r3, #3
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop

08000590 <DelayInit>:
  * @brief  Inicializa el delay no bloqueante.
  * @param  Puntero a la estructura con las variables.
  * @param  Duración del delay.
  * @retval None
  */
void DelayInit(delayNoBloqueanteData_t * delay, tick_t duration) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]

	if(delay == NULL || duration == 0)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d002      	beq.n	80005a6 <DelayInit+0x16>
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d101      	bne.n	80005aa <DelayInit+0x1a>
		Error_Handler();
 80005a6:	f000 fb7b 	bl	8000ca0 <Error_Handler>
	delay->duration = duration;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	721a      	strb	r2, [r3, #8]
	return;
 80005b6:	bf00      	nop
}
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <DelayRead>:
/**
  * @brief  Obtengo el estado del delay.
  * @param  Puntero a la estructura con las variables.
  * @retval Estado del delay (contando / tiempo cumplido).
  */
bool_t DelayRead(delayNoBloqueanteData_t * delay) {
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]

	if(delay == NULL)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d101      	bne.n	80005d0 <DelayRead+0x12>
		Error_Handler();
 80005cc:	f000 fb68 	bl	8000ca0 <Error_Handler>

	if(DelayIsRunning(delay) == false) {
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f833 	bl	800063c <DelayIsRunning>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f083 0301 	eor.w	r3, r3, #1
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d008      	beq.n	80005f4 <DelayRead+0x36>

		delay->startTime = HAL_GetTick();
 80005e2:	f000 fcab 	bl	8000f3c <HAL_GetTick>
 80005e6:	4602      	mov	r2, r0
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2201      	movs	r2, #1
 80005f0:	721a      	strb	r2, [r3, #8]
 80005f2:	e00e      	b.n	8000612 <DelayRead+0x54>
	} else {

		if((HAL_GetTick() - delay->startTime) >= delay->duration) {
 80005f4:	f000 fca2 	bl	8000f3c <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	1ad2      	subs	r2, r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	d304      	bcc.n	8000612 <DelayRead+0x54>

			delay->running = false;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	721a      	strb	r2, [r3, #8]
			return true;
 800060e:	2301      	movs	r3, #1
 8000610:	e000      	b.n	8000614 <DelayRead+0x56>
		}
	}
	return false;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <DelayReset>:
/**
  * @brief  Reseteo la cuenta del tiempo.
  * @param  Puntero a la estructura con las variables.
  * @retval None
  */
void DelayReset( delayNoBloqueanteData_t * delay) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

	delay->startTime = HAL_GetTick();
 8000624:	f000 fc8a 	bl	8000f3c <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	601a      	str	r2, [r3, #0]
	delay->running = true;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2201      	movs	r2, #1
 8000632:	721a      	strb	r2, [r3, #8]
	return;
 8000634:	bf00      	nop
}
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <DelayIsRunning>:
  * @retval Estado del delay (contando / tiempo cumplido).
  * @note	En el trabajo práctico la define como función pública, pero para mejorar
  * 		el encapsulamiento la defino como privada ya que solo se utiliza en el
  * 		ámbito de este archivo.
  */
static bool_t DelayIsRunning(delayNoBloqueanteData_t * delay) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

	if(delay == NULL)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <DelayIsRunning+0x12>
		Error_Handler();
 800064a:	f000 fb29 	bl	8000ca0 <Error_Handler>
	return delay->running;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7a1b      	ldrb	r3, [r3, #8]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <EEPROMSaveStruct>:
 * 			la estructura que no quiero reemplazar ya que para guardar
 * 			primero debo borrar la página completa.
 */
eeprom_state_t EEPROMSaveStruct(eeprom_mem_t mem_addr,
								void *p_info_s,
								size_t info_size) {
 800065c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000660:	b0bd      	sub	sp, #244	@ 0xf4
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]

	if(FLASH_PAGE_SIZE < sizeof(eeprom_data_t))
		return SAVE_ERR;

	if(NULL == p_info_s)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <EEPROMSaveStruct+0x18>
		return SAVE_ERR;
 8000670:	2301      	movs	r3, #1
 8000672:	e0dc      	b.n	800082e <EEPROMSaveStruct+0x1d2>
	eeprom_data_t bloque_actual = {0};
 8000674:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000678:	225c      	movs	r2, #92	@ 0x5c
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f002 ff29 	bl	80034d4 <memset>

	switch(mem_addr) {
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4a6c      	ldr	r2, [pc, #432]	@ (8000838 <EEPROMSaveStruct+0x1dc>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d004      	beq.n	8000694 <EEPROMSaveStruct+0x38>
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4a6b      	ldr	r2, [pc, #428]	@ (800083c <EEPROMSaveStruct+0x1e0>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d01a      	beq.n	80006c8 <EEPROMSaveStruct+0x6c>
 8000692:	e042      	b.n	800071a <EEPROMSaveStruct+0xbe>

		case EEPROM_MRF24_ADDR:

            if(info_size != sizeof(mrf24_data_config_t))
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b20      	cmp	r3, #32
 8000698:	d001      	beq.n	800069e <EEPROMSaveStruct+0x42>
            	return SAVE_ERR;
 800069a:	2301      	movs	r3, #1
 800069c:	e0c7      	b.n	800082e <EEPROMSaveStruct+0x1d2>

            if(LOAD_OK != EEPROMLoadStruct(EEPROM_CONFIG_ADDR, &bloque_actual.system, sizeof(system_config_t)))
 800069e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006a2:	3320      	adds	r3, #32
 80006a4:	223c      	movs	r2, #60	@ 0x3c
 80006a6:	4619      	mov	r1, r3
 80006a8:	4864      	ldr	r0, [pc, #400]	@ (800083c <EEPROMSaveStruct+0x1e0>)
 80006aa:	f000 f8c9 	bl	8000840 <EEPROMLoadStruct>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d001      	beq.n	80006b8 <EEPROMSaveStruct+0x5c>
            	return SAVE_ERR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	e0ba      	b.n	800082e <EEPROMSaveStruct+0x1d2>
            memcpy(&bloque_actual.mrf24, p_info_s, sizeof(mrf24_data_config_t));
 80006b8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006bc:	2220      	movs	r2, #32
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 ff33 	bl	800352c <memcpy>
            break;
 80006c6:	e02a      	b.n	800071e <EEPROMSaveStruct+0xc2>
		case EEPROM_CONFIG_ADDR:

            if(info_size != sizeof(system_config_t))
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b3c      	cmp	r3, #60	@ 0x3c
 80006cc:	d001      	beq.n	80006d2 <EEPROMSaveStruct+0x76>
            	return SAVE_ERR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e0ad      	b.n	800082e <EEPROMSaveStruct+0x1d2>

            if(LOAD_OK != EEPROMLoadStruct(EEPROM_MRF24_ADDR, &bloque_actual.mrf24, sizeof(mrf24_data_config_t)))
 80006d2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006d6:	2220      	movs	r2, #32
 80006d8:	4619      	mov	r1, r3
 80006da:	4857      	ldr	r0, [pc, #348]	@ (8000838 <EEPROMSaveStruct+0x1dc>)
 80006dc:	f000 f8b0 	bl	8000840 <EEPROMLoadStruct>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d001      	beq.n	80006ea <EEPROMSaveStruct+0x8e>
            	return SAVE_ERR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e0a1      	b.n	800082e <EEPROMSaveStruct+0x1d2>
            memcpy(&bloque_actual.system, p_info_s, sizeof(system_config_t));
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	461c      	mov	r4, r3
 80006ee:	f107 06a0 	add.w	r6, r7, #160	@ 0xa0
 80006f2:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80006f6:	4635      	mov	r5, r6
 80006f8:	4623      	mov	r3, r4
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	6859      	ldr	r1, [r3, #4]
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000704:	3410      	adds	r4, #16
 8000706:	3610      	adds	r6, #16
 8000708:	4564      	cmp	r4, ip
 800070a:	d1f4      	bne.n	80006f6 <EEPROMSaveStruct+0x9a>
 800070c:	4633      	mov	r3, r6
 800070e:	4622      	mov	r2, r4
 8000710:	6810      	ldr	r0, [r2, #0]
 8000712:	6851      	ldr	r1, [r2, #4]
 8000714:	6892      	ldr	r2, [r2, #8]
 8000716:	c307      	stmia	r3!, {r0, r1, r2}
            break;
 8000718:	e001      	b.n	800071e <EEPROMSaveStruct+0xc2>
		default:
			return SAVE_ERR;
 800071a:	2301      	movs	r3, #1
 800071c:	e087      	b.n	800082e <EEPROMSaveStruct+0x1d2>
	}
	HAL_StatusTypeDef status = HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

    uint32_t page_start = mem_addr & ~(FLASH_PAGE_SIZE - 1);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800072a:	f023 0303 	bic.w	r3, r3, #3
 800072e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000732:	b672      	cpsid	i
}
 8000734:	bf00      	nop
    __disable_irq();
    HAL_FLASH_Unlock();
 8000736:	f000 fd83 	bl	8001240 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef erase = {0};
 800073a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
    uint32_t pageError = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800074c:	2300      	movs	r3, #0
 800074e:	673b      	str	r3, [r7, #112]	@ 0x70
    erase.PageAddress = page_start;
 8000750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000754:	67bb      	str	r3, [r7, #120]	@ 0x78
    erase.NbPages = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	67fb      	str	r3, [r7, #124]	@ 0x7c

    if(HAL_OK != HAL_FLASHEx_Erase(&erase, &pageError)) {
 800075a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800075e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fe53 	bl	8001410 <HAL_FLASHEx_Erase>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d005      	beq.n	800077c <EEPROMSaveStruct+0x120>

        HAL_FLASH_Lock();
 8000770:	f000 fd8c 	bl	800128c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000774:	b662      	cpsie	i
}
 8000776:	bf00      	nop
        __enable_irq();
        return SAVE_ERR;
 8000778:	2301      	movs	r3, #1
 800077a:	e058      	b.n	800082e <EEPROMSaveStruct+0x1d2>
    }
    const uint32_t *p_data32 = (const uint32_t*)&bloque_actual;
 800077c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000780:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    uint32_t address = page_start;
 8000784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000788:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

    for(uint32_t i = 0; i < (sizeof(eeprom_data_t) + 3u) / 4u; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000792:	e021      	b.n	80007d8 <EEPROMSaveStruct+0x17c>

        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, p_data32[i]);
 8000794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800079e:	4413      	add	r3, r2
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2200      	movs	r2, #0
 80007a4:	4698      	mov	r8, r3
 80007a6:	4691      	mov	r9, r2
 80007a8:	4642      	mov	r2, r8
 80007aa:	464b      	mov	r3, r9
 80007ac:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80007b0:	2002      	movs	r0, #2
 80007b2:	f000 fcd5 	bl	8001160 <HAL_FLASH_Program>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

        if(HAL_OK != status)
 80007bc:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d10e      	bne.n	80007e2 <EEPROMSaveStruct+0x186>
        	break;
        address += 4;
 80007c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80007c8:	3304      	adds	r3, #4
 80007ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    for(uint32_t i = 0; i < (sizeof(eeprom_data_t) + 3u) / 4u; i++) {
 80007ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80007d2:	3301      	adds	r3, #1
 80007d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80007d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80007dc:	2b16      	cmp	r3, #22
 80007de:	d9d9      	bls.n	8000794 <EEPROMSaveStruct+0x138>
 80007e0:	e000      	b.n	80007e4 <EEPROMSaveStruct+0x188>
        	break;
 80007e2:	bf00      	nop
    }
    HAL_FLASH_Lock();
 80007e4:	f000 fd52 	bl	800128c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80007e8:	b662      	cpsie	i
}
 80007ea:	bf00      	nop
    __enable_irq();
	eeprom_data_t verify = {0};
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	225c      	movs	r2, #92	@ 0x5c
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fe6d 	bl	80034d4 <memset>
	memcpy(&verify, (const void*)page_start, sizeof(verify));
 80007fa:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	225c      	movs	r2, #92	@ 0x5c
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fe91 	bl	800352c <memcpy>
	if(HAL_OK != status || !memcmp(&verify, &bloque_actual, sizeof(verify)))
 800080a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800080e:	2b00      	cmp	r3, #0
 8000810:	d10a      	bne.n	8000828 <EEPROMSaveStruct+0x1cc>
 8000812:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	225c      	movs	r2, #92	@ 0x5c
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fe49 	bl	80034b4 <memcmp>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d101      	bne.n	800082c <EEPROMSaveStruct+0x1d0>
		return SAVE_ERR;
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <EEPROMSaveStruct+0x1d2>
    return SAVE_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	37f4      	adds	r7, #244	@ 0xf4
 8000832:	46bd      	mov	sp, r7
 8000834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000838:	0800fc00 	.word	0x0800fc00
 800083c:	0800fc40 	.word	0x0800fc40

08000840 <EEPROMLoadStruct>:
 * @retval Estado de la operación (LOAD_OK, LOAD_ERR).
 * @note
 */
eeprom_state_t EEPROMLoadStruct(eeprom_mem_t mem_addr,
						  	  	void * p_info_s,
								size_t info_size) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]

	if(NULL == p_info_s || VACIO == info_size)
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <EEPROMLoadStruct+0x18>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <EEPROMLoadStruct+0x1c>
		return LOAD_ERR;
 8000858:	2303      	movs	r3, #3
 800085a:	e01c      	b.n	8000896 <EEPROMLoadStruct+0x56>

	switch(mem_addr) {
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4a10      	ldr	r2, [pc, #64]	@ (80008a0 <EEPROMLoadStruct+0x60>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d004      	beq.n	800086e <EEPROMLoadStruct+0x2e>
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <EEPROMLoadStruct+0x64>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d007      	beq.n	800087c <EEPROMLoadStruct+0x3c>
 800086c:	e010      	b.n	8000890 <EEPROMLoadStruct+0x50>

		case EEPROM_MRF24_ADDR:
			memcpy(p_info_s, (const void*)mem_addr, info_size);
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	4619      	mov	r1, r3
 8000874:	68b8      	ldr	r0, [r7, #8]
 8000876:	f002 fe59 	bl	800352c <memcpy>
            break;
 800087a:	e00b      	b.n	8000894 <EEPROMLoadStruct+0x54>
		case EEPROM_CONFIG_ADDR:
			size_t mem_offset = mem_addr + sizeof(mrf24_data_config_t);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	3320      	adds	r3, #32
 8000880:	617b      	str	r3, [r7, #20]
			memcpy(p_info_s, (const void*) mem_offset, info_size);
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4619      	mov	r1, r3
 8000888:	68b8      	ldr	r0, [r7, #8]
 800088a:	f002 fe4f 	bl	800352c <memcpy>
            break;
 800088e:	e001      	b.n	8000894 <EEPROMLoadStruct+0x54>
		default:
			return LOAD_ERR;
 8000890:	2303      	movs	r3, #3
 8000892:	e000      	b.n	8000896 <EEPROMLoadStruct+0x56>
	}
	return LOAD_OK;
 8000894:	2302      	movs	r3, #2
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	0800fc00 	.word	0x0800fc00
 80008a4:	0800fc40 	.word	0x0800fc40

080008a8 <SetLed>:
 * @brief   Wrapper para escribir en el GPIO.
 * @param   Led al que voy a escribir.
 * @param   Valor a escribir.
 * @retval  None.
 */
void SetLed(color_leds color, estado_leds_t estado) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	460a      	mov	r2, r1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	4613      	mov	r3, r2
 80008b6:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(led[color].puerto, led[color].pin, estado);
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <SetLed+0x34>)
 80008bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4a06      	ldr	r2, [pc, #24]	@ (80008dc <SetLed+0x34>)
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	4413      	add	r3, r2
 80008c8:	889b      	ldrh	r3, [r3, #4]
 80008ca:	79ba      	ldrb	r2, [r7, #6]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f000 ffe2 	bl	8001896 <HAL_GPIO_WritePin>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000000 	.word	0x20000000

080008e0 <ToggleLed>:
/**
 * @brief   Wrapper para hacer un toggle en el GPIO.
 * @param   Led al que voy a escribir.
 * @retval  None.
 */
void ToggleLed(color_leds color) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_TogglePin(led[color].puerto, led[color].pin);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4a07      	ldr	r2, [pc, #28]	@ (800090c <ToggleLed+0x2c>)
 80008ee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4905      	ldr	r1, [pc, #20]	@ (800090c <ToggleLed+0x2c>)
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	440b      	add	r3, r1
 80008fa:	889b      	ldrh	r3, [r3, #4]
 80008fc:	4619      	mov	r1, r3
 80008fe:	4610      	mov	r0, r2
 8000900:	f000 ffe1 	bl	80018c6 <HAL_GPIO_TogglePin>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000000 	.word	0x20000000

08000910 <bucle>:
static debounce_data_t boton1;

/* Prototipo de funciones privadas -------------------------------------------*/
static void CheckBoton(void);

void bucle(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

	SetLed(VERDE, LED_APAGADO);
 8000916:	2101      	movs	r1, #1
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff ffc5 	bl	80008a8 <SetLed>
	SetLed(AMARILLO, LED_APAGADO);
 800091e:	2101      	movs	r1, #1
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff ffc1 	bl	80008a8 <SetLed>
	SetLed(ROJO, LED_APAGADO);
 8000926:	2101      	movs	r1, #1
 8000928:	2002      	movs	r0, #2
 800092a:	f7ff ffbd 	bl	80008a8 <SetLed>
HAL_Delay(250);

EEPROMLoadStruct(EEPROM_CONFIG_ADDR, &recupero_config, sizeof(system_config_t));
HAL_Delay(250);
*/
	if(SETUP_FAIL == ModoSetup())
 800092e:	f7ff fc0d 	bl	800014c <ModoSetup>
 8000932:	4603      	mov	r3, r0
 8000934:	2b03      	cmp	r3, #3
 8000936:	d101      	bne.n	800093c <bucle+0x2c>
		Error_Handler();
 8000938:	f000 f9b2 	bl	8000ca0 <Error_Handler>

	if(CARGA_ERR == CargarConfig())
 800093c:	f7ff fd36 	bl	80003ac <CargarConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b02      	cmp	r3, #2
 8000944:	d101      	bne.n	800094a <bucle+0x3a>
		Error_Handler();
 8000946:	f000 f9ab 	bl	8000ca0 <Error_Handler>

	DebounceFSMInit(&boton1);
 800094a:	4819      	ldr	r0, [pc, #100]	@ (80009b0 <bucle+0xa0>)
 800094c:	f7ff fda9 	bl	80004a2 <DebounceFSMInit>
	mrf24_data_in_t * mrf24_data_in;

	while(1) {

		CheckBoton();
 8000950:	f000 f834 	bl	80009bc <CheckBoton>

		if(MRF24IsNewMsg() == MSG_PRESENT) {
 8000954:	f002 fc96 	bl	8003284 <MRF24IsNewMsg>
 8000958:	4603      	mov	r3, r0
 800095a:	2b04      	cmp	r3, #4
 800095c:	d1f8      	bne.n	8000950 <bucle+0x40>

			if(MRF24ReciboPaquete() == MSG_READ) {
 800095e:	f002 fca9 	bl	80032b4 <MRF24ReciboPaquete>
 8000962:	4603      	mov	r3, r0
 8000964:	2b05      	cmp	r3, #5
 8000966:	d11f      	bne.n	80009a8 <bucle+0x98>

				mrf24_data_in = MRF24GetDataIn();
 8000968:	f002 fcfe 	bl	8003368 <MRF24GetDataIn>
 800096c:	6078      	str	r0, [r7, #4]

				if(!memcmp(mrf24_data_in->buffer, "CMD:PLV", 7))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3305      	adds	r3, #5
 8000972:	2207      	movs	r2, #7
 8000974:	490f      	ldr	r1, [pc, #60]	@ (80009b4 <bucle+0xa4>)
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fd9c 	bl	80034b4 <memcmp>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d103      	bne.n	800098a <bucle+0x7a>
					SetLed(VERDE, LED_PRENDIDO);
 8000982:	2100      	movs	r1, #0
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff ff8f 	bl	80008a8 <SetLed>
				if(!memcmp(mrf24_data_in->buffer, "CMD:ALV", 7))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3305      	adds	r3, #5
 800098e:	2207      	movs	r2, #7
 8000990:	4909      	ldr	r1, [pc, #36]	@ (80009b8 <bucle+0xa8>)
 8000992:	4618      	mov	r0, r3
 8000994:	f002 fd8e 	bl	80034b4 <memcmp>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1d8      	bne.n	8000950 <bucle+0x40>
					SetLed(VERDE, LED_APAGADO);
 800099e:	2101      	movs	r1, #1
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff81 	bl	80008a8 <SetLed>
 80009a6:	e7d3      	b.n	8000950 <bucle+0x40>
			} else {

				ToggleLed(AMARILLO);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff ff99 	bl	80008e0 <ToggleLed>
		CheckBoton();
 80009ae:	e7cf      	b.n	8000950 <bucle+0x40>
 80009b0:	20000044 	.word	0x20000044
 80009b4:	08003590 	.word	0x08003590
 80009b8:	08003598 	.word	0x08003598

080009bc <CheckBoton>:

/**
  * @brief  Manejo de las pulsaciones del botón
  * @retval
  */
static void CheckBoton(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b092      	sub	sp, #72	@ 0x48
 80009c0:	af00      	add	r7, sp, #0

	mrf24_data_out_t data_out_s;
	data_out_s.dest_address = LOW_END_ADDR;
 80009c2:	f241 1312 	movw	r3, #4370	@ 0x1112
 80009c6:	807b      	strh	r3, [r7, #2]
	data_out_s.dest_panid = 0x1234;
 80009c8:	f241 2334 	movw	r3, #4660	@ 0x1234
 80009cc:	803b      	strh	r3, [r7, #0]
	data_out_s.origin_address = 0x1111;
 80009ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80009d2:	80bb      	strh	r3, [r7, #4]

	switch(DebounceFSMUpdate(&boton1, HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin))) {
 80009d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009d8:	481e      	ldr	r0, [pc, #120]	@ (8000a54 <CheckBoton+0x98>)
 80009da:	f000 ff45 	bl	8001868 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf14      	ite	ne
 80009e4:	2301      	movne	r3, #1
 80009e6:	2300      	moveq	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4619      	mov	r1, r3
 80009ec:	481a      	ldr	r0, [pc, #104]	@ (8000a58 <CheckBoton+0x9c>)
 80009ee:	f7ff fd69 	bl	80004c4 <DebounceFSMUpdate>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d002      	beq.n	80009fe <CheckBoton+0x42>
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d013      	beq.n	8000a24 <CheckBoton+0x68>
			data_out_s.buffer_size = strlen("CMD:PLA");
			MRF24TransmitirDato(&data_out_s);
			break;
		default:
	}
}
 80009fc:	e025      	b.n	8000a4a <CheckBoton+0x8e>
			ToggleLed(ROJO);
 80009fe:	2002      	movs	r0, #2
 8000a00:	f7ff ff6e 	bl	80008e0 <ToggleLed>
			strcpy(data_out_s.buffer, "CMD:ALA"); // acá iría memcpy
 8000a04:	463b      	mov	r3, r7
 8000a06:	3306      	adds	r3, #6
 8000a08:	4914      	ldr	r1, [pc, #80]	@ (8000a5c <CheckBoton+0xa0>)
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	cb03      	ldmia	r3!, {r0, r1}
 8000a10:	6010      	str	r0, [r2, #0]
 8000a12:	6051      	str	r1, [r2, #4]
			data_out_s.buffer_size = strlen("CMD:ALA");
 8000a14:	2307      	movs	r3, #7
 8000a16:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			MRF24TransmitirDato(&data_out_s);
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fb59 	bl	80030d4 <MRF24TransmitirDato>
			break;
 8000a22:	e012      	b.n	8000a4a <CheckBoton+0x8e>
			ToggleLed(ROJO);
 8000a24:	2002      	movs	r0, #2
 8000a26:	f7ff ff5b 	bl	80008e0 <ToggleLed>
			strcpy(data_out_s.buffer, "CMD:PLA");
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	3306      	adds	r3, #6
 8000a2e:	490c      	ldr	r1, [pc, #48]	@ (8000a60 <CheckBoton+0xa4>)
 8000a30:	461a      	mov	r2, r3
 8000a32:	460b      	mov	r3, r1
 8000a34:	cb03      	ldmia	r3!, {r0, r1}
 8000a36:	6010      	str	r0, [r2, #0]
 8000a38:	6051      	str	r1, [r2, #4]
			data_out_s.buffer_size = strlen("CMD:PLA");
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			MRF24TransmitirDato(&data_out_s);
 8000a40:	463b      	mov	r3, r7
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fb46 	bl	80030d4 <MRF24TransmitirDato>
			break;
 8000a48:	bf00      	nop
}
 8000a4a:	bf00      	nop
 8000a4c:	3748      	adds	r7, #72	@ 0x48
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	20000044 	.word	0x20000044
 8000a5c:	080035a0 	.word	0x080035a0
 8000a60:	080035a8 	.word	0x080035a8

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fa10 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f808 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 f876 	bl	8000b60 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a74:	f000 f83e 	bl	8000af4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  bucle();
 8000a78:	f7ff ff4a 	bl	8000910 <bucle>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <main+0x18>

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b090      	sub	sp, #64	@ 0x40
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0318 	add.w	r3, r7, #24
 8000a8a:	2228      	movs	r2, #40	@ 0x28
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fd20 	bl	80034d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 ff1f 	bl	80018f8 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000ac0:	f000 f8ee 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 f98d 	bl	8001dfc <HAL_RCC_ClockConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000ae8:	f000 f8da 	bl	8000ca0 <Error_Handler>
  }
}
 8000aec:	bf00      	nop
 8000aee:	3740      	adds	r7, #64	@ 0x40
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000afa:	4a18      	ldr	r2, [pc, #96]	@ (8000b5c <MX_SPI1_Init+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b28:	2220      	movs	r2, #32
 8000b2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b40:	220a      	movs	r2, #10
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_SPI1_Init+0x64>)
 8000b46:	f001 fab5 	bl	80020b4 <HAL_SPI_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b50:	f000 f8a6 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000054 	.word	0x20000054
 8000b5c:	40013000 	.word	0x40013000

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	4b46      	ldr	r3, [pc, #280]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a45      	ldr	r2, [pc, #276]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b43      	ldr	r3, [pc, #268]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8c:	4b40      	ldr	r3, [pc, #256]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a3f      	ldr	r2, [pc, #252]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000b92:	f043 0320 	orr.w	r3, r3, #32
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b3d      	ldr	r3, [pc, #244]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0320 	and.w	r3, r3, #32
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b3a      	ldr	r3, [pc, #232]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a39      	ldr	r2, [pc, #228]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b37      	ldr	r3, [pc, #220]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	4b34      	ldr	r3, [pc, #208]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a33      	ldr	r2, [pc, #204]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b31      	ldr	r3, [pc, #196]	@ (8000c90 <MX_GPIO_Init+0x130>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0308 	and.w	r3, r3, #8
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bda:	482e      	ldr	r0, [pc, #184]	@ (8000c94 <MX_GPIO_Init+0x134>)
 8000bdc:	f000 fe5b 	bl	8001896 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000be6:	482c      	ldr	r0, [pc, #176]	@ (8000c98 <MX_GPIO_Init+0x138>)
 8000be8:	f000 fe55 	bl	8001896 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MRF24_CS_Pin|MRF24_RESET_Pin|MRF24_WAKE_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000bf2:	482a      	ldr	r0, [pc, #168]	@ (8000c9c <MX_GPIO_Init+0x13c>)
 8000bf4:	f000 fe4f 	bl	8001896 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BOARD_Pin */
  GPIO_InitStruct.Pin = LED_BOARD_Pin;
 8000bf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BOARD_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4820      	ldr	r0, [pc, #128]	@ (8000c94 <MX_GPIO_Init+0x134>)
 8000c12:	f000 fca5 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_VERDE_Pin LED_AMARILLO_Pin LED_ROJO_Pin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin;
 8000c16:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	481a      	ldr	r0, [pc, #104]	@ (8000c98 <MX_GPIO_Init+0x138>)
 8000c30:	f000 fc96 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000c34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	4813      	ldr	r0, [pc, #76]	@ (8000c98 <MX_GPIO_Init+0x138>)
 8000c4a:	f000 fc89 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : MRF24_CS_Pin MRF24_RESET_Pin MRF24_WAKE_Pin */
  GPIO_InitStruct.Pin = MRF24_CS_Pin|MRF24_RESET_Pin|MRF24_WAKE_Pin;
 8000c4e:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	480d      	ldr	r0, [pc, #52]	@ (8000c9c <MX_GPIO_Init+0x13c>)
 8000c68:	f000 fc7a 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : MRF24_INTERRUP_Pin */
  GPIO_InitStruct.Pin = MRF24_INTERRUP_Pin;
 8000c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MRF24_INTERRUP_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4806      	ldr	r0, [pc, #24]	@ (8000c9c <MX_GPIO_Init+0x13c>)
 8000c82:	f000 fc6d 	bl	8001560 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c86:	bf00      	nop
 8000c88:	3720      	adds	r7, #32
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40011000 	.word	0x40011000
 8000c98:	40010c00 	.word	0x40010c00
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, LED_PRENDIDO);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cae:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <Error_Handler+0x3c>)
 8000cb0:	f000 fdf1 	bl	8001896 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, LED_APAGADO);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <Error_Handler+0x40>)
 8000cbc:	f000 fdeb 	bl	8001896 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_AMARILLO_GPIO_Port, LED_AMARILLO_Pin, LED_APAGADO);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cc6:	4806      	ldr	r0, [pc, #24]	@ (8000ce0 <Error_Handler+0x40>)
 8000cc8:	f000 fde5 	bl	8001896 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, LED_APAGADO);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cd2:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <Error_Handler+0x40>)
 8000cd4:	f000 fddf 	bl	8001896 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, LED_PRENDIDO);
 8000cd8:	bf00      	nop
 8000cda:	e7e5      	b.n	8000ca8 <Error_Handler+0x8>
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a0e      	ldr	r2, [pc, #56]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	61d3      	str	r3, [r2, #28]
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_MspInit+0x60>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4a04      	ldr	r2, [pc, #16]	@ (8000d44 <HAL_MspInit+0x60>)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000

08000d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd0 <HAL_SPI_MspInit+0x88>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d12f      	bne.n	8000dc8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <HAL_SPI_MspInit+0x8c>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a19      	ldr	r2, [pc, #100]	@ (8000dd4 <HAL_SPI_MspInit+0x8c>)
 8000d6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <HAL_SPI_MspInit+0x8c>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <HAL_SPI_MspInit+0x8c>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a13      	ldr	r2, [pc, #76]	@ (8000dd4 <HAL_SPI_MspInit+0x8c>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <HAL_SPI_MspInit+0x8c>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d98:	23a0      	movs	r3, #160	@ 0xa0
 8000d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	480b      	ldr	r0, [pc, #44]	@ (8000dd8 <HAL_SPI_MspInit+0x90>)
 8000dac:	f000 fbd8 	bl	8001560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db0:	2340      	movs	r3, #64	@ 0x40
 8000db2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <HAL_SPI_MspInit+0x90>)
 8000dc4:	f000 fbcc 	bl	8001560 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40013000 	.word	0x40013000
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010800 	.word	0x40010800

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <NMI_Handler+0x4>

08000de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <MemManage_Handler+0x4>

08000df4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2c:	f000 f874 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e40:	f7ff fff8 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e46:	490c      	ldr	r1, [pc, #48]	@ (8000e78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e48:	4a0c      	ldr	r2, [pc, #48]	@ (8000e7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e5c:	4c09      	ldr	r4, [pc, #36]	@ (8000e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f002 fb3b 	bl	80034e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6e:	f7ff fdf9 	bl	8000a64 <main>
  bx lr
 8000e72:	4770      	bx	lr
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000e7c:	080035f4 	.word	0x080035f4
  ldr r2, =_sbss
 8000e80:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000e84:	2000013c 	.word	0x2000013c

08000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_2_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_Init+0x28>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <HAL_Init+0x28>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f92b 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff ff1c 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f935 	bl	8001146 <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 f90b 	bl	800110e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	@ (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000018 	.word	0x20000018
 8000f10:	20000020 	.word	0x20000020
 8000f14:	2000001c 	.word	0x2000001c

08000f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <HAL_IncTick+0x1c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_IncTick+0x20>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a03      	ldr	r2, [pc, #12]	@ (8000f38 <HAL_IncTick+0x20>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000020 	.word	0x20000020
 8000f38:	200000ac 	.word	0x200000ac

08000f3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b02      	ldr	r3, [pc, #8]	@ (8000f4c <HAL_GetTick+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	200000ac 	.word	0x200000ac

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff fff0 	bl	8000f3c <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffe0 	bl	8000f3c <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000020 	.word	0x20000020

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	@ (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	@ (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f7ff ff90 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff49 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff5e 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff90 	bl	8001050 <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5f 	bl	8000ffc <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffb0 	bl	80010b4 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800117a:	4b2f      	ldr	r3, [pc, #188]	@ (8001238 <HAL_FLASH_Program+0xd8>)
 800117c:	7e1b      	ldrb	r3, [r3, #24]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_FLASH_Program+0x26>
 8001182:	2302      	movs	r3, #2
 8001184:	e054      	b.n	8001230 <HAL_FLASH_Program+0xd0>
 8001186:	4b2c      	ldr	r3, [pc, #176]	@ (8001238 <HAL_FLASH_Program+0xd8>)
 8001188:	2201      	movs	r2, #1
 800118a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800118c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001190:	f000 f8a8 	bl	80012e4 <FLASH_WaitForLastOperation>
 8001194:	4603      	mov	r3, r0
 8001196:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d144      	bne.n	8001228 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d102      	bne.n	80011aa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80011a4:	2301      	movs	r3, #1
 80011a6:	757b      	strb	r3, [r7, #21]
 80011a8:	e007      	b.n	80011ba <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d102      	bne.n	80011b6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80011b0:	2302      	movs	r3, #2
 80011b2:	757b      	strb	r3, [r7, #21]
 80011b4:	e001      	b.n	80011ba <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80011b6:	2304      	movs	r3, #4
 80011b8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	75bb      	strb	r3, [r7, #22]
 80011be:	e02d      	b.n	800121c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80011c0:	7dbb      	ldrb	r3, [r7, #22]
 80011c2:	005a      	lsls	r2, r3, #1
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	eb02 0c03 	add.w	ip, r2, r3
 80011ca:	7dbb      	ldrb	r3, [r7, #22]
 80011cc:	0119      	lsls	r1, r3, #4
 80011ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011d2:	f1c1 0620 	rsb	r6, r1, #32
 80011d6:	f1a1 0020 	sub.w	r0, r1, #32
 80011da:	fa22 f401 	lsr.w	r4, r2, r1
 80011de:	fa03 f606 	lsl.w	r6, r3, r6
 80011e2:	4334      	orrs	r4, r6
 80011e4:	fa23 f000 	lsr.w	r0, r3, r0
 80011e8:	4304      	orrs	r4, r0
 80011ea:	fa23 f501 	lsr.w	r5, r3, r1
 80011ee:	b2a3      	uxth	r3, r4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4660      	mov	r0, ip
 80011f4:	f000 f85a 	bl	80012ac <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011fc:	f000 f872 	bl	80012e4 <FLASH_WaitForLastOperation>
 8001200:	4603      	mov	r3, r0
 8001202:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001204:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <HAL_FLASH_Program+0xdc>)
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	4a0c      	ldr	r2, [pc, #48]	@ (800123c <HAL_FLASH_Program+0xdc>)
 800120a:	f023 0301 	bic.w	r3, r3, #1
 800120e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d107      	bne.n	8001226 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001216:	7dbb      	ldrb	r3, [r7, #22]
 8001218:	3301      	adds	r3, #1
 800121a:	75bb      	strb	r3, [r7, #22]
 800121c:	7dba      	ldrb	r2, [r7, #22]
 800121e:	7d7b      	ldrb	r3, [r7, #21]
 8001220:	429a      	cmp	r2, r3
 8001222:	d3cd      	bcc.n	80011c0 <HAL_FLASH_Program+0x60>
 8001224:	e000      	b.n	8001228 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001226:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_FLASH_Program+0xd8>)
 800122a:	2200      	movs	r2, #0
 800122c:	761a      	strb	r2, [r3, #24]

  return status;
 800122e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001230:	4618      	mov	r0, r3
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001238:	200000b0 	.word	0x200000b0
 800123c:	40022000 	.word	0x40022000

08001240 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <HAL_FLASH_Unlock+0x40>)
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00d      	beq.n	8001272 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_FLASH_Unlock+0x40>)
 8001258:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <HAL_FLASH_Unlock+0x44>)
 800125a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800125c:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <HAL_FLASH_Unlock+0x40>)
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_FLASH_Unlock+0x48>)
 8001260:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <HAL_FLASH_Unlock+0x40>)
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001272:	79fb      	ldrb	r3, [r7, #7]
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40022000 	.word	0x40022000
 8001284:	45670123 	.word	0x45670123
 8001288:	cdef89ab 	.word	0xcdef89ab

0800128c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_FLASH_Lock+0x1c>)
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <HAL_FLASH_Lock+0x1c>)
 8001296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800129a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40022000 	.word	0x40022000

080012ac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <FLASH_Program_HalfWord+0x30>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <FLASH_Program_HalfWord+0x34>)
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <FLASH_Program_HalfWord+0x34>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	887a      	ldrh	r2, [r7, #2]
 80012ce:	801a      	strh	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200000b0 	.word	0x200000b0
 80012e0:	40022000 	.word	0x40022000

080012e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff fe26 	bl	8000f3c <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80012f2:	e010      	b.n	8001316 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fa:	d00c      	beq.n	8001316 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <FLASH_WaitForLastOperation+0x2e>
 8001302:	f7ff fe1b 	bl	8000f3c <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	429a      	cmp	r2, r3
 8001310:	d201      	bcs.n	8001316 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e025      	b.n	8001362 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <FLASH_WaitForLastOperation+0x88>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1e8      	bne.n	80012f4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <FLASH_WaitForLastOperation+0x88>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f003 0320 	and.w	r3, r3, #32
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <FLASH_WaitForLastOperation+0x88>)
 8001330:	2220      	movs	r2, #32
 8001332:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <FLASH_WaitForLastOperation+0x88>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10b      	bne.n	8001358 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <FLASH_WaitForLastOperation+0x88>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001348:	2b00      	cmp	r3, #0
 800134a:	d105      	bne.n	8001358 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800134c:	4b07      	ldr	r3, [pc, #28]	@ (800136c <FLASH_WaitForLastOperation+0x88>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001358:	f000 f80a 	bl	8001370 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40022000 	.word	0x40022000

08001370 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800137a:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <FLASH_SetErrorCode+0x98>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <FLASH_SetErrorCode+0x9c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	4a1f      	ldr	r2, [pc, #124]	@ (800140c <FLASH_SetErrorCode+0x9c>)
 8001390:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <FLASH_SetErrorCode+0x98>)
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d009      	beq.n	80013ba <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <FLASH_SetErrorCode+0x9c>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	4a17      	ldr	r2, [pc, #92]	@ (800140c <FLASH_SetErrorCode+0x9c>)
 80013b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <FLASH_SetErrorCode+0x98>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <FLASH_SetErrorCode+0x9c>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <FLASH_SetErrorCode+0x9c>)
 80013d0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <FLASH_SetErrorCode+0x98>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001408 <FLASH_SetErrorCode+0x98>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f240 1201 	movw	r2, #257	@ 0x101
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d106      	bne.n	80013f6 <FLASH_SetErrorCode+0x86>
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <FLASH_SetErrorCode+0x98>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	4a06      	ldr	r2, [pc, #24]	@ (8001408 <FLASH_SetErrorCode+0x98>)
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	61d3      	str	r3, [r2, #28]
}  
 80013f4:	e002      	b.n	80013fc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80013f6:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <FLASH_SetErrorCode+0x98>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	60d3      	str	r3, [r2, #12]
}  
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40022000 	.word	0x40022000
 800140c:	200000b0 	.word	0x200000b0

08001410 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001422:	4b2f      	ldr	r3, [pc, #188]	@ (80014e0 <HAL_FLASHEx_Erase+0xd0>)
 8001424:	7e1b      	ldrb	r3, [r3, #24]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_FLASHEx_Erase+0x1e>
 800142a:	2302      	movs	r3, #2
 800142c:	e053      	b.n	80014d6 <HAL_FLASHEx_Erase+0xc6>
 800142e:	4b2c      	ldr	r3, [pc, #176]	@ (80014e0 <HAL_FLASHEx_Erase+0xd0>)
 8001430:	2201      	movs	r2, #1
 8001432:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d116      	bne.n	800146a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800143c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001440:	f7ff ff50 	bl	80012e4 <FLASH_WaitForLastOperation>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d141      	bne.n	80014ce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800144a:	2001      	movs	r0, #1
 800144c:	f000 f84c 	bl	80014e8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001450:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001454:	f7ff ff46 	bl	80012e4 <FLASH_WaitForLastOperation>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800145c:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <HAL_FLASHEx_Erase+0xd4>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	4a20      	ldr	r2, [pc, #128]	@ (80014e4 <HAL_FLASHEx_Erase+0xd4>)
 8001462:	f023 0304 	bic.w	r3, r3, #4
 8001466:	6113      	str	r3, [r2, #16]
 8001468:	e031      	b.n	80014ce <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800146a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800146e:	f7ff ff39 	bl	80012e4 <FLASH_WaitForLastOperation>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d12a      	bne.n	80014ce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f04f 32ff 	mov.w	r2, #4294967295
 800147e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	e019      	b.n	80014bc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001488:	68b8      	ldr	r0, [r7, #8]
 800148a:	f000 f849 	bl	8001520 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800148e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001492:	f7ff ff27 	bl	80012e4 <FLASH_WaitForLastOperation>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <HAL_FLASHEx_Erase+0xd4>)
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	4a11      	ldr	r2, [pc, #68]	@ (80014e4 <HAL_FLASHEx_Erase+0xd4>)
 80014a0:	f023 0302 	bic.w	r3, r3, #2
 80014a4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	601a      	str	r2, [r3, #0]
            break;
 80014b2:	e00c      	b.n	80014ce <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80014ba:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	029a      	lsls	r2, r3, #10
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	4413      	add	r3, r2
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3dc      	bcc.n	8001488 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014ce:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <HAL_FLASHEx_Erase+0xd0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	761a      	strb	r2, [r3, #24]

  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000b0 	.word	0x200000b0
 80014e4:	40022000 	.word	0x40022000

080014e8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <FLASH_MassErase+0x30>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <FLASH_MassErase+0x34>)
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	4a08      	ldr	r2, [pc, #32]	@ (800151c <FLASH_MassErase+0x34>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <FLASH_MassErase+0x34>)
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	4a05      	ldr	r2, [pc, #20]	@ (800151c <FLASH_MassErase+0x34>)
 8001508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800150c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	200000b0 	.word	0x200000b0
 800151c:	40022000 	.word	0x40022000

08001520 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <FLASH_PageErase+0x38>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <FLASH_PageErase+0x3c>)
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <FLASH_PageErase+0x3c>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800153a:	4a08      	ldr	r2, [pc, #32]	@ (800155c <FLASH_PageErase+0x3c>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <FLASH_PageErase+0x3c>)
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	4a05      	ldr	r2, [pc, #20]	@ (800155c <FLASH_PageErase+0x3c>)
 8001546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800154a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	200000b0 	.word	0x200000b0
 800155c:	40022000 	.word	0x40022000

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b08b      	sub	sp, #44	@ 0x2c
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001572:	e169      	b.n	8001848 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001574:	2201      	movs	r2, #1
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 8158 	bne.w	8001842 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4a9a      	ldr	r2, [pc, #616]	@ (8001800 <HAL_GPIO_Init+0x2a0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d05e      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 800159c:	4a98      	ldr	r2, [pc, #608]	@ (8001800 <HAL_GPIO_Init+0x2a0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d875      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015a2:	4a98      	ldr	r2, [pc, #608]	@ (8001804 <HAL_GPIO_Init+0x2a4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d058      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015a8:	4a96      	ldr	r2, [pc, #600]	@ (8001804 <HAL_GPIO_Init+0x2a4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d86f      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015ae:	4a96      	ldr	r2, [pc, #600]	@ (8001808 <HAL_GPIO_Init+0x2a8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d052      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015b4:	4a94      	ldr	r2, [pc, #592]	@ (8001808 <HAL_GPIO_Init+0x2a8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d869      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015ba:	4a94      	ldr	r2, [pc, #592]	@ (800180c <HAL_GPIO_Init+0x2ac>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d04c      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015c0:	4a92      	ldr	r2, [pc, #584]	@ (800180c <HAL_GPIO_Init+0x2ac>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d863      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015c6:	4a92      	ldr	r2, [pc, #584]	@ (8001810 <HAL_GPIO_Init+0x2b0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d046      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015cc:	4a90      	ldr	r2, [pc, #576]	@ (8001810 <HAL_GPIO_Init+0x2b0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d85d      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015d2:	2b12      	cmp	r3, #18
 80015d4:	d82a      	bhi.n	800162c <HAL_GPIO_Init+0xcc>
 80015d6:	2b12      	cmp	r3, #18
 80015d8:	d859      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015da:	a201      	add	r2, pc, #4	@ (adr r2, 80015e0 <HAL_GPIO_Init+0x80>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	0800165b 	.word	0x0800165b
 80015e4:	08001635 	.word	0x08001635
 80015e8:	08001647 	.word	0x08001647
 80015ec:	08001689 	.word	0x08001689
 80015f0:	0800168f 	.word	0x0800168f
 80015f4:	0800168f 	.word	0x0800168f
 80015f8:	0800168f 	.word	0x0800168f
 80015fc:	0800168f 	.word	0x0800168f
 8001600:	0800168f 	.word	0x0800168f
 8001604:	0800168f 	.word	0x0800168f
 8001608:	0800168f 	.word	0x0800168f
 800160c:	0800168f 	.word	0x0800168f
 8001610:	0800168f 	.word	0x0800168f
 8001614:	0800168f 	.word	0x0800168f
 8001618:	0800168f 	.word	0x0800168f
 800161c:	0800168f 	.word	0x0800168f
 8001620:	0800168f 	.word	0x0800168f
 8001624:	0800163d 	.word	0x0800163d
 8001628:	08001651 	.word	0x08001651
 800162c:	4a79      	ldr	r2, [pc, #484]	@ (8001814 <HAL_GPIO_Init+0x2b4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001632:	e02c      	b.n	800168e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e029      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	3304      	adds	r3, #4
 8001642:	623b      	str	r3, [r7, #32]
          break;
 8001644:	e024      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	3308      	adds	r3, #8
 800164c:	623b      	str	r3, [r7, #32]
          break;
 800164e:	e01f      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	330c      	adds	r3, #12
 8001656:	623b      	str	r3, [r7, #32]
          break;
 8001658:	e01a      	b.n	8001690 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001662:	2304      	movs	r3, #4
 8001664:	623b      	str	r3, [r7, #32]
          break;
 8001666:	e013      	b.n	8001690 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001670:	2308      	movs	r3, #8
 8001672:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	611a      	str	r2, [r3, #16]
          break;
 800167a:	e009      	b.n	8001690 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800167c:	2308      	movs	r3, #8
 800167e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	615a      	str	r2, [r3, #20]
          break;
 8001686:	e003      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
          break;
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x130>
          break;
 800168e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2bff      	cmp	r3, #255	@ 0xff
 8001694:	d801      	bhi.n	800169a <HAL_GPIO_Init+0x13a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	e001      	b.n	800169e <HAL_GPIO_Init+0x13e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3304      	adds	r3, #4
 800169e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2bff      	cmp	r3, #255	@ 0xff
 80016a4:	d802      	bhi.n	80016ac <HAL_GPIO_Init+0x14c>
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	e002      	b.n	80016b2 <HAL_GPIO_Init+0x152>
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	3b08      	subs	r3, #8
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	210f      	movs	r1, #15
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	401a      	ands	r2, r3
 80016c4:	6a39      	ldr	r1, [r7, #32]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	431a      	orrs	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 80b1 	beq.w	8001842 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001818 <HAL_GPIO_Init+0x2b8>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001818 <HAL_GPIO_Init+0x2b8>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001818 <HAL_GPIO_Init+0x2b8>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f8:	4a48      	ldr	r2, [pc, #288]	@ (800181c <HAL_GPIO_Init+0x2bc>)
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a40      	ldr	r2, [pc, #256]	@ (8001820 <HAL_GPIO_Init+0x2c0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d013      	beq.n	800174c <HAL_GPIO_Init+0x1ec>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a3f      	ldr	r2, [pc, #252]	@ (8001824 <HAL_GPIO_Init+0x2c4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d00d      	beq.n	8001748 <HAL_GPIO_Init+0x1e8>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a3e      	ldr	r2, [pc, #248]	@ (8001828 <HAL_GPIO_Init+0x2c8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d007      	beq.n	8001744 <HAL_GPIO_Init+0x1e4>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a3d      	ldr	r2, [pc, #244]	@ (800182c <HAL_GPIO_Init+0x2cc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d101      	bne.n	8001740 <HAL_GPIO_Init+0x1e0>
 800173c:	2303      	movs	r3, #3
 800173e:	e006      	b.n	800174e <HAL_GPIO_Init+0x1ee>
 8001740:	2304      	movs	r3, #4
 8001742:	e004      	b.n	800174e <HAL_GPIO_Init+0x1ee>
 8001744:	2302      	movs	r3, #2
 8001746:	e002      	b.n	800174e <HAL_GPIO_Init+0x1ee>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_GPIO_Init+0x1ee>
 800174c:	2300      	movs	r3, #0
 800174e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001750:	f002 0203 	and.w	r2, r2, #3
 8001754:	0092      	lsls	r2, r2, #2
 8001756:	4093      	lsls	r3, r2
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800175e:	492f      	ldr	r1, [pc, #188]	@ (800181c <HAL_GPIO_Init+0x2bc>)
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001778:	4b2d      	ldr	r3, [pc, #180]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	492c      	ldr	r1, [pc, #176]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001786:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	43db      	mvns	r3, r3
 800178e:	4928      	ldr	r1, [pc, #160]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 8001790:	4013      	ands	r3, r2
 8001792:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a0:	4b23      	ldr	r3, [pc, #140]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	4922      	ldr	r1, [pc, #136]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017ae:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	491e      	ldr	r1, [pc, #120]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4918      	ldr	r1, [pc, #96]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	43db      	mvns	r3, r3
 80017de:	4914      	ldr	r1, [pc, #80]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d021      	beq.n	8001834 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	490e      	ldr	r1, [pc, #56]	@ (8001830 <HAL_GPIO_Init+0x2d0>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e021      	b.n	8001842 <HAL_GPIO_Init+0x2e2>
 80017fe:	bf00      	nop
 8001800:	10320000 	.word	0x10320000
 8001804:	10310000 	.word	0x10310000
 8001808:	10220000 	.word	0x10220000
 800180c:	10210000 	.word	0x10210000
 8001810:	10120000 	.word	0x10120000
 8001814:	10110000 	.word	0x10110000
 8001818:	40021000 	.word	0x40021000
 800181c:	40010000 	.word	0x40010000
 8001820:	40010800 	.word	0x40010800
 8001824:	40010c00 	.word	0x40010c00
 8001828:	40011000 	.word	0x40011000
 800182c:	40011400 	.word	0x40011400
 8001830:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_GPIO_Init+0x304>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	43db      	mvns	r3, r3
 800183c:	4909      	ldr	r1, [pc, #36]	@ (8001864 <HAL_GPIO_Init+0x304>)
 800183e:	4013      	ands	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	3301      	adds	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	f47f ae8e 	bne.w	8001574 <HAL_GPIO_Init+0x14>
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	372c      	adds	r7, #44	@ 0x2c
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40010400 	.word	0x40010400

08001868 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e001      	b.n	800188a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	807b      	strh	r3, [r7, #2]
 80018a2:	4613      	mov	r3, r2
 80018a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a6:	787b      	ldrb	r3, [r7, #1]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ac:	887a      	ldrh	r2, [r7, #2]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018b2:	e003      	b.n	80018bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	041a      	lsls	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	611a      	str	r2, [r3, #16]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018d8:	887a      	ldrh	r2, [r7, #2]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4013      	ands	r3, r2
 80018de:	041a      	lsls	r2, r3, #16
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	400b      	ands	r3, r1
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e272      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8087 	beq.w	8001a26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001918:	4b92      	ldr	r3, [pc, #584]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b04      	cmp	r3, #4
 8001922:	d00c      	beq.n	800193e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001924:	4b8f      	ldr	r3, [pc, #572]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d112      	bne.n	8001956 <HAL_RCC_OscConfig+0x5e>
 8001930:	4b8c      	ldr	r3, [pc, #560]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800193c:	d10b      	bne.n	8001956 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193e:	4b89      	ldr	r3, [pc, #548]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d06c      	beq.n	8001a24 <HAL_RCC_OscConfig+0x12c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d168      	bne.n	8001a24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e24c      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x76>
 8001960:	4b80      	ldr	r3, [pc, #512]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a7f      	ldr	r2, [pc, #508]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	e02e      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x98>
 8001976:	4b7b      	ldr	r3, [pc, #492]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7a      	ldr	r2, [pc, #488]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b78      	ldr	r3, [pc, #480]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a77      	ldr	r2, [pc, #476]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001988:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e01d      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0xbc>
 800199a:	4b72      	ldr	r3, [pc, #456]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a71      	ldr	r2, [pc, #452]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 80019b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b68      	ldr	r3, [pc, #416]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a67      	ldr	r2, [pc, #412]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fab2 	bl	8000f3c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff faae 	bl	8000f3c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	@ 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e200      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0xe4>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fa9e 	bl	8000f3c <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fa9a 	bl	8000f3c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1ec      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	4b53      	ldr	r3, [pc, #332]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x10c>
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d063      	beq.n	8001afa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a32:	4b4c      	ldr	r3, [pc, #304]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a3e:	4b49      	ldr	r3, [pc, #292]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d11c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x18c>
 8001a4a:	4b46      	ldr	r3, [pc, #280]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d116      	bne.n	8001a84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	4b43      	ldr	r3, [pc, #268]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x176>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e1c0      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4939      	ldr	r1, [pc, #228]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	e03a      	b.n	8001afa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	4b36      	ldr	r3, [pc, #216]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fa53 	bl	8000f3c <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fa4f 	bl	8000f3c <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e1a1      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4927      	ldr	r1, [pc, #156]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ace:	4b26      	ldr	r3, [pc, #152]	@ (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fa32 	bl	8000f3c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff fa2e 	bl	8000f3c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e180      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d03a      	beq.n	8001b7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d019      	beq.n	8001b42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_RCC_OscConfig+0x274>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b14:	f7ff fa12 	bl	8000f3c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fa0e 	bl	8000f3c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e160      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f000 fa9c 	bl	8002078 <RCC_Delay>
 8001b40:	e01c      	b.n	8001b7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <HAL_RCC_OscConfig+0x274>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7ff f9f8 	bl	8000f3c <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4e:	e00f      	b.n	8001b70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff f9f4 	bl	8000f3c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d908      	bls.n	8001b70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e146      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	42420000 	.word	0x42420000
 8001b6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	4b92      	ldr	r3, [pc, #584]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e9      	bne.n	8001b50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80a6 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10d      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b88      	ldr	r3, [pc, #544]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a87      	ldr	r2, [pc, #540]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b85      	ldr	r3, [pc, #532]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	4b82      	ldr	r3, [pc, #520]	@ (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d118      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bce:	f7ff f9b5 	bl	8000f3c <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd6:	f7ff f9b1 	bl	8000f3c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b64      	cmp	r3, #100	@ 0x64
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e103      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	4b75      	ldr	r3, [pc, #468]	@ (8001dc0 <HAL_RCC_OscConfig+0x4c8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x312>
 8001bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a6e      	ldr	r2, [pc, #440]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e02d      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x334>
 8001c12:	4b6a      	ldr	r3, [pc, #424]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a69      	ldr	r2, [pc, #420]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	4b67      	ldr	r3, [pc, #412]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a66      	ldr	r2, [pc, #408]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	f023 0304 	bic.w	r3, r3, #4
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	e01c      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d10c      	bne.n	8001c4e <HAL_RCC_OscConfig+0x356>
 8001c34:	4b61      	ldr	r3, [pc, #388]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a60      	ldr	r2, [pc, #384]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	4b5e      	ldr	r3, [pc, #376]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a5d      	ldr	r2, [pc, #372]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6213      	str	r3, [r2, #32]
 8001c4c:	e00b      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a5a      	ldr	r2, [pc, #360]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	4b58      	ldr	r3, [pc, #352]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a57      	ldr	r2, [pc, #348]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d015      	beq.n	8001c9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff f965 	bl	8000f3c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff f961 	bl	8000f3c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0b1      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ee      	beq.n	8001c76 <HAL_RCC_OscConfig+0x37e>
 8001c98:	e014      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f94f 	bl	8000f3c <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff f94b 	bl	8000f3c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e09b      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb8:	4b40      	ldr	r3, [pc, #256]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ee      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d105      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cca:	4b3c      	ldr	r3, [pc, #240]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a3b      	ldr	r2, [pc, #236]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8087 	beq.w	8001dee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce0:	4b36      	ldr	r3, [pc, #216]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d061      	beq.n	8001db0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d146      	bne.n	8001d82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf4:	4b33      	ldr	r3, [pc, #204]	@ (8001dc4 <HAL_RCC_OscConfig+0x4cc>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff f91f 	bl	8000f3c <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff f91b 	bl	8000f3c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e06d      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d14:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d28:	d108      	bne.n	8001d3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4921      	ldr	r1, [pc, #132]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a19      	ldr	r1, [r3, #32]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	491b      	ldr	r1, [pc, #108]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d54:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_RCC_OscConfig+0x4cc>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff f8ef 	bl	8000f3c <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d62:	f7ff f8eb 	bl	8000f3c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e03d      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x46a>
 8001d80:	e035      	b.n	8001dee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <HAL_RCC_OscConfig+0x4cc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff f8d8 	bl	8000f3c <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff f8d4 	bl	8000f3c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e026      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x498>
 8001dae:	e01e      	b.n	8001dee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e019      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_RCC_OscConfig+0x500>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0d0      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e10:	4b6a      	ldr	r3, [pc, #424]	@ (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d910      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b67      	ldr	r3, [pc, #412]	@ (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 0207 	bic.w	r2, r3, #7
 8001e26:	4965      	ldr	r1, [pc, #404]	@ (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b63      	ldr	r3, [pc, #396]	@ (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b8      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e58:	4b59      	ldr	r3, [pc, #356]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a58      	ldr	r2, [pc, #352]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e70:	4b53      	ldr	r3, [pc, #332]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4a52      	ldr	r2, [pc, #328]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b50      	ldr	r3, [pc, #320]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	494d      	ldr	r1, [pc, #308]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d040      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b47      	ldr	r3, [pc, #284]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d115      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eba:	4b41      	ldr	r3, [pc, #260]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e073      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e06b      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eda:	4b39      	ldr	r3, [pc, #228]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f023 0203 	bic.w	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4936      	ldr	r1, [pc, #216]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eec:	f7ff f826 	bl	8000f3c <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef4:	f7ff f822 	bl	8000f3c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e053      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 020c 	and.w	r2, r3, #12
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1eb      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d210      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b24      	ldr	r3, [pc, #144]	@ (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 0207 	bic.w	r2, r3, #7
 8001f32:	4922      	ldr	r1, [pc, #136]	@ (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e032      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f58:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4916      	ldr	r1, [pc, #88]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	490e      	ldr	r1, [pc, #56]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f8a:	f000 f821 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	490a      	ldr	r1, [pc, #40]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	5ccb      	ldrb	r3, [r1, r3]
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	4a09      	ldr	r2, [pc, #36]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_RCC_ClockConfig+0x1d0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe ff84 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	080035b0 	.word	0x080035b0
 8001fc8:	20000018 	.word	0x20000018
 8001fcc:	2000001c 	.word	0x2000001c

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d002      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0x30>
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d003      	beq.n	8002006 <HAL_RCC_GetSysClockFreq+0x36>
 8001ffe:	e027      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002000:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x98>)
 8002002:	613b      	str	r3, [r7, #16]
      break;
 8002004:	e027      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	0c9b      	lsrs	r3, r3, #18
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	4a17      	ldr	r2, [pc, #92]	@ (800206c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800201e:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x94>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	0c5b      	lsrs	r3, r3, #17
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xa0>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a0d      	ldr	r2, [pc, #52]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x98>)
 8002032:	fb03 f202 	mul.w	r2, r3, r2
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e004      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a0c      	ldr	r2, [pc, #48]	@ (8002074 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	613b      	str	r3, [r7, #16]
      break;
 800204e:	e002      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x98>)
 8002052:	613b      	str	r3, [r7, #16]
      break;
 8002054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002056:	693b      	ldr	r3, [r7, #16]
}
 8002058:	4618      	mov	r0, r3
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	007a1200 	.word	0x007a1200
 800206c:	080035c0 	.word	0x080035c0
 8002070:	080035d0 	.word	0x080035d0
 8002074:	003d0900 	.word	0x003d0900

08002078 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002080:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <RCC_Delay+0x34>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <RCC_Delay+0x38>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0a5b      	lsrs	r3, r3, #9
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002094:	bf00      	nop
  }
  while (Delay --);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1e5a      	subs	r2, r3, #1
 800209a:	60fa      	str	r2, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f9      	bne.n	8002094 <RCC_Delay+0x1c>
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	20000018 	.word	0x20000018
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e076      	b.n	80021b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d108      	bne.n	80020e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020d6:	d009      	beq.n	80020ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
 80020de:	e005      	b.n	80020ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe fe1e 	bl	8000d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002122:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002170:	ea42 0103 	orr.w	r1, r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002178:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	0c1a      	lsrs	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f002 0204 	and.w	r2, r2, #4
 8002192:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021cc:	f7fe feb6 	bl	8000f3c <HAL_GetTick>
 80021d0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d001      	beq.n	80021e6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
 80021e4:	e12a      	b.n	800243c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_SPI_Transmit+0x36>
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e122      	b.n	800243c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_SPI_Transmit+0x48>
 8002200:	2302      	movs	r3, #2
 8002202:	e11b      	b.n	800243c <HAL_SPI_Transmit+0x280>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2203      	movs	r2, #3
 8002210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002252:	d10f      	bne.n	8002274 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002262:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002272:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227e:	2b40      	cmp	r3, #64	@ 0x40
 8002280:	d007      	beq.n	8002292 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800229a:	d152      	bne.n	8002342 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_SPI_Transmit+0xee>
 80022a4:	8b7b      	ldrh	r3, [r7, #26]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d145      	bne.n	8002336 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	881a      	ldrh	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	1c9a      	adds	r2, r3, #2
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022ce:	e032      	b.n	8002336 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d112      	bne.n	8002304 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	881a      	ldrh	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	1c9a      	adds	r2, r3, #2
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002302:	e018      	b.n	8002336 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002304:	f7fe fe1a 	bl	8000f3c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d803      	bhi.n	800231c <HAL_SPI_Transmit+0x160>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231a:	d102      	bne.n	8002322 <HAL_SPI_Transmit+0x166>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e082      	b.n	800243c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1c7      	bne.n	80022d0 <HAL_SPI_Transmit+0x114>
 8002340:	e053      	b.n	80023ea <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_SPI_Transmit+0x194>
 800234a:	8b7b      	ldrh	r3, [r7, #26]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d147      	bne.n	80023e0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	330c      	adds	r3, #12
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002376:	e033      	b.n	80023e0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d113      	bne.n	80023ae <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330c      	adds	r3, #12
 8002390:	7812      	ldrb	r2, [r2, #0]
 8002392:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023ac:	e018      	b.n	80023e0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ae:	f7fe fdc5 	bl	8000f3c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d803      	bhi.n	80023c6 <HAL_SPI_Transmit+0x20a>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d102      	bne.n	80023cc <HAL_SPI_Transmit+0x210>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d109      	bne.n	80023e0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e02d      	b.n	800243c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1c6      	bne.n	8002378 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	6839      	ldr	r1, [r7, #0]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fbc4 	bl	8002b7c <SPI_EndRxTxTransaction>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800243a:	2300      	movs	r3, #0
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d001      	beq.n	8002464 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
 8002462:	e104      	b.n	800266e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800246c:	d112      	bne.n	8002494 <HAL_SPI_Receive+0x50>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10e      	bne.n	8002494 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2204      	movs	r2, #4
 800247a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f8f3 	bl	8002676 <HAL_SPI_TransmitReceive>
 8002490:	4603      	mov	r3, r0
 8002492:	e0ec      	b.n	800266e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002494:	f7fe fd52 	bl	8000f3c <HAL_GetTick>
 8002498:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <HAL_SPI_Receive+0x62>
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0e1      	b.n	800266e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_SPI_Receive+0x74>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e0da      	b.n	800266e <HAL_SPI_Receive+0x22a>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2204      	movs	r2, #4
 80024c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	88fa      	ldrh	r2, [r7, #6]
 80024d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	88fa      	ldrh	r2, [r7, #6]
 80024de:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002506:	d10f      	bne.n	8002528 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002516:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002526:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002532:	2b40      	cmp	r3, #64	@ 0x40
 8002534:	d007      	beq.n	8002546 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d170      	bne.n	8002630 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800254e:	e035      	b.n	80025bc <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d115      	bne.n	800258a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f103 020c 	add.w	r2, r3, #12
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256a:	7812      	ldrb	r2, [r2, #0]
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002588:	e018      	b.n	80025bc <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800258a:	f7fe fcd7 	bl	8000f3c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d803      	bhi.n	80025a2 <HAL_SPI_Receive+0x15e>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d102      	bne.n	80025a8 <HAL_SPI_Receive+0x164>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e058      	b.n	800266e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1c4      	bne.n	8002550 <HAL_SPI_Receive+0x10c>
 80025c6:	e038      	b.n	800263a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d113      	bne.n	80025fe <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	b292      	uxth	r2, r2
 80025e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e8:	1c9a      	adds	r2, r3, #2
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025fc:	e018      	b.n	8002630 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025fe:	f7fe fc9d 	bl	8000f3c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d803      	bhi.n	8002616 <HAL_SPI_Receive+0x1d2>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d102      	bne.n	800261c <HAL_SPI_Receive+0x1d8>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e01e      	b.n	800266e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1c6      	bne.n	80025c8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fa4a 	bl	8002ad8 <SPI_EndRxTransaction>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800266c:	2300      	movs	r3, #0
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b08a      	sub	sp, #40	@ 0x28
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002684:	2301      	movs	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002688:	f7fe fc58 	bl	8000f3c <HAL_GetTick>
 800268c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002694:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026a0:	7ffb      	ldrb	r3, [r7, #31]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d00c      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0x4a>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026ac:	d106      	bne.n	80026bc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <HAL_SPI_TransmitReceive+0x46>
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d001      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
 80026be:	e17f      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_SPI_TransmitReceive+0x5c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_SPI_TransmitReceive+0x5c>
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e174      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_SPI_TransmitReceive+0x6e>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e16d      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x34a>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d003      	beq.n	8002700 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2205      	movs	r2, #5
 80026fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	887a      	ldrh	r2, [r7, #2]
 8002716:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	887a      	ldrh	r2, [r7, #2]
 8002722:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002740:	2b40      	cmp	r3, #64	@ 0x40
 8002742:	d007      	beq.n	8002754 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800275c:	d17e      	bne.n	800285c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_SPI_TransmitReceive+0xf6>
 8002766:	8afb      	ldrh	r3, [r7, #22]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d16c      	bne.n	8002846 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	881a      	ldrh	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277c:	1c9a      	adds	r2, r3, #2
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002790:	e059      	b.n	8002846 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b02      	cmp	r3, #2
 800279e:	d11b      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x162>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d016      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x162>
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d113      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	881a      	ldrh	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c0:	1c9a      	adds	r2, r3, #2
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d119      	bne.n	800281a <HAL_SPI_TransmitReceive+0x1a4>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d014      	beq.n	800281a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fa:	b292      	uxth	r2, r2
 80027fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002802:	1c9a      	adds	r2, r3, #2
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002816:	2301      	movs	r3, #1
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800281a:	f7fe fb8f 	bl	8000f3c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002826:	429a      	cmp	r2, r3
 8002828:	d80d      	bhi.n	8002846 <HAL_SPI_TransmitReceive+0x1d0>
 800282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d009      	beq.n	8002846 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0bc      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1a0      	bne.n	8002792 <HAL_SPI_TransmitReceive+0x11c>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d19b      	bne.n	8002792 <HAL_SPI_TransmitReceive+0x11c>
 800285a:	e082      	b.n	8002962 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_SPI_TransmitReceive+0x1f4>
 8002864:	8afb      	ldrh	r3, [r7, #22]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d171      	bne.n	800294e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	7812      	ldrb	r2, [r2, #0]
 8002876:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002890:	e05d      	b.n	800294e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b02      	cmp	r3, #2
 800289e:	d11c      	bne.n	80028da <HAL_SPI_TransmitReceive+0x264>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d017      	beq.n	80028da <HAL_SPI_TransmitReceive+0x264>
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d114      	bne.n	80028da <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	330c      	adds	r3, #12
 80028ba:	7812      	ldrb	r2, [r2, #0]
 80028bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d119      	bne.n	800291c <HAL_SPI_TransmitReceive+0x2a6>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d014      	beq.n	800291c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002918:	2301      	movs	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800291c:	f7fe fb0e 	bl	8000f3c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002928:	429a      	cmp	r2, r3
 800292a:	d803      	bhi.n	8002934 <HAL_SPI_TransmitReceive+0x2be>
 800292c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002932:	d102      	bne.n	800293a <HAL_SPI_TransmitReceive+0x2c4>
 8002934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e038      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d19c      	bne.n	8002892 <HAL_SPI_TransmitReceive+0x21c>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d197      	bne.n	8002892 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002962:	6a3a      	ldr	r2, [r7, #32]
 8002964:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f908 	bl	8002b7c <SPI_EndRxTxTransaction>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e01d      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80029be:	2300      	movs	r3, #0
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3728      	adds	r7, #40	@ 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029d8:	f7fe fab0 	bl	8000f3c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029e8:	f7fe faa8 	bl	8000f3c <HAL_GetTick>
 80029ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029ee:	4b39      	ldr	r3, [pc, #228]	@ (8002ad4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	015b      	lsls	r3, r3, #5
 80029f4:	0d1b      	lsrs	r3, r3, #20
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	fb02 f303 	mul.w	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029fe:	e054      	b.n	8002aaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	d050      	beq.n	8002aaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a08:	f7fe fa98 	bl	8000f3c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d902      	bls.n	8002a1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d13d      	bne.n	8002a9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a36:	d111      	bne.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a40:	d004      	beq.n	8002a4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a4a:	d107      	bne.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a64:	d10f      	bne.n	8002a86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e017      	b.n	8002aca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	bf0c      	ite	eq
 8002aba:	2301      	moveq	r3, #1
 8002abc:	2300      	movne	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d19b      	bne.n	8002a00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000018 	.word	0x20000018

08002ad8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aec:	d111      	bne.n	8002b12 <SPI_EndRxTransaction+0x3a>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002af6:	d004      	beq.n	8002b02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b00:	d107      	bne.n	8002b12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b10:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b1a:	d117      	bne.n	8002b4c <SPI_EndRxTransaction+0x74>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b24:	d112      	bne.n	8002b4c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2101      	movs	r1, #1
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff ff49 	bl	80029c8 <SPI_WaitFlagStateUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01a      	beq.n	8002b72 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e013      	b.n	8002b74 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2200      	movs	r2, #0
 8002b54:	2180      	movs	r1, #128	@ 0x80
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff ff36 	bl	80029c8 <SPI_WaitFlagStateUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d007      	beq.n	8002b72 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b66:	f043 0220 	orr.w	r2, r3, #32
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e000      	b.n	8002b74 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	2102      	movs	r1, #2
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f7ff ff18 	bl	80029c8 <SPI_WaitFlagStateUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba2:	f043 0220 	orr.w	r2, r3, #32
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e013      	b.n	8002bd6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2180      	movs	r1, #128	@ 0x80
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff ff05 	bl	80029c8 <SPI_WaitFlagStateUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e000      	b.n	8002bd6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <InicializoVariables>:
 * @param  None
 * @retval None
 * @note   Si no se inicializa previamente las variables se carga la configuración
 * 		   por defecto.
 */
static void InicializoVariables(void) {
 8002be0:	b490      	push	{r4, r7}
 8002be2:	af00      	add	r7, sp, #0

	if(VACIO == data_config_s.channel) {
 8002be4:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <InicializoVariables+0x50>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d11d      	bne.n	8002c28 <InicializoVariables+0x48>

		memcpy(data_config_s.security_key, default_security_key, SEC_KEY_SIZE);
 8002bec:	4b10      	ldr	r3, [pc, #64]	@ (8002c30 <InicializoVariables+0x50>)
 8002bee:	4a11      	ldr	r2, [pc, #68]	@ (8002c34 <InicializoVariables+0x54>)
 8002bf0:	f103 0410 	add.w	r4, r3, #16
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(data_config_s.mac, default_mac_address, LARGE_MAC_SIZE);
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <InicializoVariables+0x50>)
 8002bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8002c38 <InicializoVariables+0x58>)
 8002c00:	3308      	adds	r3, #8
 8002c02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c06:	e883 0003 	stmia.w	r3, {r0, r1}
		data_config_s.sequence_number = DEFAULT_SEC_NUMBER;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <InicializoVariables+0x50>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	705a      	strb	r2, [r3, #1]
		data_config_s.channel = DEFAULT_CHANNEL;
 8002c10:	4b07      	ldr	r3, [pc, #28]	@ (8002c30 <InicializoVariables+0x50>)
 8002c12:	2203      	movs	r2, #3
 8002c14:	701a      	strb	r2, [r3, #0]
		data_config_s.panid = MY_DEFAULT_PAN_ID;
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <InicializoVariables+0x50>)
 8002c18:	f649 1299 	movw	r2, #39321	@ 0x9999
 8002c1c:	805a      	strh	r2, [r3, #2]
		data_config_s.address = MY_DEFAULT_ADDRESS;
 8002c1e:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <InicializoVariables+0x50>)
 8002c20:	f241 1211 	movw	r2, #4369	@ 0x1111
 8002c24:	809a      	strh	r2, [r3, #4]
	}
	return;
 8002c26:	bf00      	nop
 8002c28:	bf00      	nop
}
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc90      	pop	{r4, r7}
 8002c2e:	4770      	bx	lr
 8002c30:	200000d4 	.word	0x200000d4
 8002c34:	080035dc 	.word	0x080035dc
 8002c38:	080035d4 	.word	0x080035d4

08002c3c <InicializoMRF24>:
/**
 * @brief  Inicialización del módulo MRF24J40MA
 * @param  None
 * @retval Estado de la operación (TIME_OUT_OCURRIDO, INICIALIZACION_OK)
 */
static mrf24_state_t InicializoMRF24(void) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0

	uint8_t lectura;
	delayNoBloqueanteData_t delay_time_out;
	DelayInit(&delay_time_out, MRF_TIME_OUT);
 8002c42:	463b      	mov	r3, r7
 8002c44:	21c8      	movs	r1, #200	@ 0xc8
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fca2 	bl	8000590 <DelayInit>
	SetShortAddr(SOFTRST, RSTPWR | RSTBB | RSTMAC);
 8002c4c:	2107      	movs	r1, #7
 8002c4e:	202a      	movs	r0, #42	@ 0x2a
 8002c50:	f000 f887 	bl	8002d62 <SetShortAddr>
	DelayReset(&delay_time_out);
 8002c54:	463b      	mov	r3, r7
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fce0 	bl	800061c <DelayReset>

	do {

		lectura = GetShortAddr(SOFTRST);
 8002c5c:	202a      	movs	r0, #42	@ 0x2a
 8002c5e:	f000 f8a0 	bl	8002da2 <GetShortAddr>
 8002c62:	4603      	mov	r3, r0
 8002c64:	73fb      	strb	r3, [r7, #15]
		if(DelayRead(&delay_time_out))
 8002c66:	463b      	mov	r3, r7
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fca8 	bl	80005be <DelayRead>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <InicializoMRF24+0x3c>
			return TIME_OUT_OCURRED;
 8002c74:	2308      	movs	r3, #8
 8002c76:	e070      	b.n	8002d5a <InicializoMRF24+0x11e>
	}while(VACIO != (lectura & (RSTPWR | RSTBB | RSTMAC)));
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ec      	bne.n	8002c5c <InicializoMRF24+0x20>
	delay_t(WAIT_50_MS);
 8002c82:	2032      	movs	r0, #50	@ 0x32
 8002c84:	f7fe f964 	bl	8000f50 <HAL_Delay>
	SetShortAddr(RXFLUSH, RXFLUSH_RESET);
 8002c88:	2101      	movs	r1, #1
 8002c8a:	200d      	movs	r0, #13
 8002c8c:	f000 f869 	bl	8002d62 <SetShortAddr>
	SetDeviceAddress();
 8002c90:	f000 f906 	bl	8002ea0 <SetDeviceAddress>
	SetDeviceMACAddress();
 8002c94:	f000 f92a 	bl	8002eec <SetDeviceMACAddress>
	SetLongAddr(RFCON1, VCOOPT1 | VCOOPT0);
 8002c98:	2103      	movs	r1, #3
 8002c9a:	f240 2001 	movw	r0, #513	@ 0x201
 8002c9e:	f000 f8a1 	bl	8002de4 <SetLongAddr>
	SetLongAddr(RFCON2, PLLEN);
 8002ca2:	2180      	movs	r1, #128	@ 0x80
 8002ca4:	f240 2002 	movw	r0, #514	@ 0x202
 8002ca8:	f000 f89c 	bl	8002de4 <SetLongAddr>
	SetLongAddr(RFCON3, P20dBm | P0dBm);
 8002cac:	2180      	movs	r1, #128	@ 0x80
 8002cae:	f240 2003 	movw	r0, #515	@ 0x203
 8002cb2:	f000 f897 	bl	8002de4 <SetLongAddr>
	SetLongAddr(RFCON6, TXFIL | _20MRECVR);
 8002cb6:	2190      	movs	r1, #144	@ 0x90
 8002cb8:	f240 2006 	movw	r0, #518	@ 0x206
 8002cbc:	f000 f892 	bl	8002de4 <SetLongAddr>
	SetLongAddr(RFCON7, SLPCLK100KHZ);
 8002cc0:	2180      	movs	r1, #128	@ 0x80
 8002cc2:	f240 2007 	movw	r0, #519	@ 0x207
 8002cc6:	f000 f88d 	bl	8002de4 <SetLongAddr>
	SetLongAddr(RFCON8, RFVCO);
 8002cca:	2110      	movs	r1, #16
 8002ccc:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8002cd0:	f000 f888 	bl	8002de4 <SetLongAddr>
	SetLongAddr(SLPCON1, CLKOUTDIS | SLPCLKDIV0);
 8002cd4:	2121      	movs	r1, #33	@ 0x21
 8002cd6:	f44f 7008 	mov.w	r0, #544	@ 0x220
 8002cda:	f000 f883 	bl	8002de4 <SetLongAddr>
	SetShortAddr(BBREG2, CCA_MODE_1);
 8002cde:	2180      	movs	r1, #128	@ 0x80
 8002ce0:	203a      	movs	r0, #58	@ 0x3a
 8002ce2:	f000 f83e 	bl	8002d62 <SetShortAddr>
	SetShortAddr(BBREG6, RSSIMODE2);
 8002ce6:	2140      	movs	r1, #64	@ 0x40
 8002ce8:	203e      	movs	r0, #62	@ 0x3e
 8002cea:	f000 f83a 	bl	8002d62 <SetShortAddr>
	SetShortAddr(CCAEDTH, CCAEDTH2 | CCAEDTH1);
 8002cee:	2106      	movs	r1, #6
 8002cf0:	203f      	movs	r0, #63	@ 0x3f
 8002cf2:	f000 f836 	bl	8002d62 <SetShortAddr>
	SetShortAddr(PACON2, FIFOEN | TXONTS2 | TXONTS1);
 8002cf6:	2198      	movs	r1, #152	@ 0x98
 8002cf8:	2018      	movs	r0, #24
 8002cfa:	f000 f832 	bl	8002d62 <SetShortAddr>
	SetShortAddr(TXSTBL, RFSTBL3 | RFSTBL0 | MSIFS2 | MSIFS0);
 8002cfe:	2195      	movs	r1, #149	@ 0x95
 8002d00:	202e      	movs	r0, #46	@ 0x2e
 8002d02:	f000 f82e 	bl	8002d62 <SetShortAddr>
	DelayReset(&delay_time_out);
 8002d06:	463b      	mov	r3, r7
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fc87 	bl	800061c <DelayReset>

	do {

		lectura = GetLongAddr(RFSTATE) & RX;
 8002d0e:	f240 200f 	movw	r0, #527	@ 0x20f
 8002d12:	f000 f88b 	bl	8002e2c <GetLongAddr>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d1c:	73fb      	strb	r3, [r7, #15]
		if(DelayRead(&delay_time_out))
 8002d1e:	463b      	mov	r3, r7
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc4c 	bl	80005be <DelayRead>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <InicializoMRF24+0xf4>
			return TIME_OUT_OCURRED;
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	e014      	b.n	8002d5a <InicializoMRF24+0x11e>
	}while(RX != lectura);
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d34:	d1eb      	bne.n	8002d0e <InicializoMRF24+0xd2>
	SetShortAddr(MRFINTCON, SLPIE_DIS | WAKEIE_DIS | HSYMTMRIE_DIS | SECIE_DIS
 8002d36:	21f5      	movs	r1, #245	@ 0xf5
 8002d38:	2032      	movs	r0, #50	@ 0x32
 8002d3a:	f000 f812 	bl	8002d62 <SetShortAddr>
					| TXG2IE_DIS | TXNIE_DIS);
	SetShortAddr(ACKTMOUT, DRPACK | MAWD5 | MAWD4 | MAWD3 | MAWD0);
 8002d3e:	21b9      	movs	r1, #185	@ 0xb9
 8002d40:	2012      	movs	r0, #18
 8002d42:	f000 f80e 	bl	8002d62 <SetShortAddr>
	SetChannel();
 8002d46:	f000 f893 	bl	8002e70 <SetChannel>
	SetShortAddr(RXMCR, VACIO);
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f000 f808 	bl	8002d62 <SetShortAddr>
	(void)GetShortAddr(INTSTAT);
 8002d52:	2031      	movs	r0, #49	@ 0x31
 8002d54:	f000 f825 	bl	8002da2 <GetShortAddr>
	return INITIALIZATION_OK;
 8002d58:	2301      	movs	r3, #1
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <SetShortAddr>:
 * @retval None
 * @note   Al escribir direcciones cortas (SHORT ADDRESS REGISTER) se comienza
 *         con el MSB en 0 indicando una dirección corta, 6 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura.
 */
static void SetShortAddr(uint8_t reg_address, uint8_t valor) {
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	460a      	mov	r2, r1
 8002d6c:	71fb      	strb	r3, [r7, #7]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	71bb      	strb	r3, [r7, #6]

	reg_address = (uint8_t) (reg_address << SHIFT_SHORT_ADDR) | WRITE_8_BITS;
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	71fb      	strb	r3, [r7, #7]
	SetCSPin(DISABLE);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f000 fb0a 	bl	8003398 <SetCSPin>
	WriteByteSPIPort(reg_address);
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fb4e 	bl	8003428 <WriteByteSPIPort>
	WriteByteSPIPort(valor);
 8002d8c:	79bb      	ldrb	r3, [r7, #6]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fb4a 	bl	8003428 <WriteByteSPIPort>
	SetCSPin(ENABLE);
 8002d94:	2001      	movs	r0, #1
 8002d96:	f000 faff 	bl	8003398 <SetCSPin>
	return;
 8002d9a:	bf00      	nop
}
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <GetShortAddr>:
 * @retval Valor devuelto por el módulo - 1 byte
 * @note   Al escribir direcciones cortas (SHORT ADDRESS REGISTER) se comienza
 *         con el MSB en 0 indicando una dirección corta, 6 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura.
 */
static uint8_t GetShortAddr(uint8_t reg_address) {
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	71fb      	strb	r3, [r7, #7]

	uint8_t leido_spi = VACIO;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]
	reg_address = (uint8_t) (reg_address << SHIFT_SHORT_ADDR) & READ_8_BITS;
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002dba:	71fb      	strb	r3, [r7, #7]
	SetCSPin(DISABLE);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f000 faeb 	bl	8003398 <SetCSPin>
	WriteByteSPIPort(reg_address);
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fb2f 	bl	8003428 <WriteByteSPIPort>
	leido_spi = ReadByteSPIPort();
 8002dca:	f000 fb61 	bl	8003490 <ReadByteSPIPort>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73fb      	strb	r3, [r7, #15]
	SetCSPin(ENABLE);
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 fae0 	bl	8003398 <SetCSPin>
	return leido_spi;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <SetLongAddr>:
 * @note   Al escribir direcciones largas (LONG ADDRESS REGISTER) se comienza
 *         con el MSB en 1 indicando una dirección larga, 10 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura. En
 *         los 4 bits restantes (LSB) no importa el valor.
 */
static void SetLongAddr(uint16_t reg_address, uint8_t valor) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	460a      	mov	r2, r1
 8002dee:	80fb      	strh	r3, [r7, #6]
 8002df0:	4613      	mov	r3, r2
 8002df2:	717b      	strb	r3, [r7, #5]

	reg_address = (reg_address << SHIFT_LONG_ADDR) | WRITE_16_BITS;
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	015b      	lsls	r3, r3, #5
 8002df8:	b21a      	sxth	r2, r3
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <SetLongAddr+0x44>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	b21b      	sxth	r3, r3
 8002e00:	80fb      	strh	r3, [r7, #6]
	SetCSPin(DISABLE);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f000 fac8 	bl	8003398 <SetCSPin>
	Write2ByteSPIPort(reg_address);
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fb1e 	bl	800344c <Write2ByteSPIPort>
	WriteByteSPIPort(valor);
 8002e10:	797b      	ldrb	r3, [r7, #5]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fb08 	bl	8003428 <WriteByteSPIPort>
	SetCSPin(ENABLE);
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f000 fabd 	bl	8003398 <SetCSPin>
	return;
 8002e1e:	bf00      	nop
}
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	ffff8010 	.word	0xffff8010

08002e2c <GetLongAddr>:
 * @note   Al escribir direcciones largas (LONG ADDRESS REGISTER) se comienza
 *         con el MSB en 1 indicando una dirección larga, 10 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura. En
 *         los 4 bits restantes (LSB) no importa el valor.
 */
static uint8_t GetLongAddr(uint16_t reg_address) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]

	uint8_t respuesta;
	reg_address = (reg_address << SHIFT_LONG_ADDR) | READ_16_BITS;
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	015b      	lsls	r3, r3, #5
 8002e3a:	b21b      	sxth	r3, r3
 8002e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	80fb      	strh	r3, [r7, #6]
	SetCSPin(DISABLE);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f000 faa5 	bl	8003398 <SetCSPin>
	Write2ByteSPIPort(reg_address);
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fafb 	bl	800344c <Write2ByteSPIPort>
	respuesta = ReadByteSPIPort();
 8002e56:	f000 fb1b 	bl	8003490 <ReadByteSPIPort>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	73fb      	strb	r3, [r7, #15]
	SetCSPin(ENABLE);
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f000 fa9a 	bl	8003398 <SetCSPin>
	return respuesta;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <SetChannel>:
/**
 * @brief  Seteo en el módulo en canal guardado en mrf24_data_config
 * @param  None
 * @retval None
 */
static void SetChannel(void) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0

	SetLongAddr(RFCON0, data_config_s.channel);
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <SetChannel+0x2c>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002e7e:	f7ff ffb1 	bl	8002de4 <SetLongAddr>
	SetShortAddr(RFCTL, RFRST_HOLD);
 8002e82:	2104      	movs	r1, #4
 8002e84:	2036      	movs	r0, #54	@ 0x36
 8002e86:	f7ff ff6c 	bl	8002d62 <SetShortAddr>
	SetShortAddr(RFCTL, VACIO);
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	2036      	movs	r0, #54	@ 0x36
 8002e8e:	f7ff ff68 	bl	8002d62 <SetShortAddr>
	delay_t(WAIT_1_MS);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7fe f85c 	bl	8000f50 <HAL_Delay>
	return;
 8002e98:	bf00      	nop
}
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	200000d4 	.word	0x200000d4

08002ea0 <SetDeviceAddress>:
/**
 * @brief  Seteo en el módulo la dirección corta guardada en mrf24_data_config
 * @param  None
 * @retval None
 */
static void SetDeviceAddress(void) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0

	SetShortAddr(SADRH, (uint8_t) (data_config_s.address >> SHIFT_BYTE));
 8002ea4:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <SetDeviceAddress+0x48>)
 8002ea6:	889b      	ldrh	r3, [r3, #4]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4619      	mov	r1, r3
 8002eb0:	2004      	movs	r0, #4
 8002eb2:	f7ff ff56 	bl	8002d62 <SetShortAddr>
	SetShortAddr(SADRL, (uint8_t) (data_config_s.address));
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <SetDeviceAddress+0x48>)
 8002eb8:	889b      	ldrh	r3, [r3, #4]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	2003      	movs	r0, #3
 8002ec0:	f7ff ff4f 	bl	8002d62 <SetShortAddr>
	SetShortAddr(PANIDH, (uint8_t) (data_config_s.panid >> SHIFT_BYTE));
 8002ec4:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <SetDeviceAddress+0x48>)
 8002ec6:	885b      	ldrh	r3, [r3, #2]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	4619      	mov	r1, r3
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	f7ff ff46 	bl	8002d62 <SetShortAddr>
	SetShortAddr(PANIDL, (uint8_t) (data_config_s.panid));
 8002ed6:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <SetDeviceAddress+0x48>)
 8002ed8:	885b      	ldrh	r3, [r3, #2]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	4619      	mov	r1, r3
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7ff ff3f 	bl	8002d62 <SetShortAddr>
	return;
 8002ee4:	bf00      	nop
}
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200000d4 	.word	0x200000d4

08002eec <SetDeviceMACAddress>:
/**
 * @brief  Seteo en el módulo la dirección mac guardada en mrf24_data_config.
 * @param  None.
 * @retval None.
 */
static void SetDeviceMACAddress(void) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < LARGE_MAC_SIZE; i++) {
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	71fb      	strb	r3, [r7, #7]
 8002ef6:	e00d      	b.n	8002f14 <SetDeviceMACAddress+0x28>

		SetShortAddr(EADR0 + i, data_config_s.mac[i]);
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	3305      	adds	r3, #5
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4908      	ldr	r1, [pc, #32]	@ (8002f24 <SetDeviceMACAddress+0x38>)
 8002f02:	440b      	add	r3, r1
 8002f04:	7a1b      	ldrb	r3, [r3, #8]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f7ff ff2a 	bl	8002d62 <SetShortAddr>
	for(uint8_t i = 0; i < LARGE_MAC_SIZE; i++) {
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	3301      	adds	r3, #1
 8002f12:	71fb      	strb	r3, [r7, #7]
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	2b07      	cmp	r3, #7
 8002f18:	d9ee      	bls.n	8002ef8 <SetDeviceMACAddress+0xc>
	}
	return;
 8002f1a:	bf00      	nop
}
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200000d4 	.word	0x200000d4

08002f28 <MRF24J40Init>:
/**
 * @brief  Inicialización del módulo MRF24J40MA.
 * @param  None.
 * @retval Estado de la operación (TIME_OUT_OCURRIDO, INICIALIZACION_OK).
 */
mrf24_state_t MRF24J40Init(void) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0

	InicializoVariables();
 8002f2c:	f7ff fe58 	bl	8002be0 <InicializoVariables>
	InicializoPines();
 8002f30:	f000 fa24 	bl	800337c <InicializoPines>
	delay_t(WAIT_1_MS);
 8002f34:	2001      	movs	r0, #1
 8002f36:	f7fe f80b 	bl	8000f50 <HAL_Delay>
	SetResetPin(1);
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f000 fa50 	bl	80033e0 <SetResetPin>
	delay_t(WAIT_1_MS);
 8002f40:	2001      	movs	r0, #1
 8002f42:	f7fe f805 	bl	8000f50 <HAL_Delay>
	estadoActual = InicializoMRF24();
 8002f46:	f7ff fe79 	bl	8002c3c <InicializoMRF24>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <MRF24J40Init+0x34>)
 8002f50:	701a      	strb	r2, [r3, #0]
	return estadoActual;
 8002f52:	4b02      	ldr	r3, [pc, #8]	@ (8002f5c <MRF24J40Init+0x34>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200000d0 	.word	0x200000d0

08002f60 <MRF24SetChannel>:
 * @brief	Actualizo el canal de trabajo.
 * @param	Nuevo canal.
 * @retval	Estado de la operación (INVALID_VALUE, OPERATION_OK).
 * @note	Se comprueba la integridad del dato.
 */
mrf24_state_t MRF24SetChannel(channel_list_t ch) {
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]

	if(0x03 > ch || 0xF3 < ch)
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d902      	bls.n	8002f76 <MRF24SetChannel+0x16>
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	2bf3      	cmp	r3, #243	@ 0xf3
 8002f74:	d901      	bls.n	8002f7a <MRF24SetChannel+0x1a>
		return INVALID_VALUE;
 8002f76:	230c      	movs	r3, #12
 8002f78:	e003      	b.n	8002f82 <MRF24SetChannel+0x22>
	data_config_s.channel = ch;
 8002f7a:	4a04      	ldr	r2, [pc, #16]	@ (8002f8c <MRF24SetChannel+0x2c>)
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	7013      	strb	r3, [r2, #0]
	return OPERATION_OK;
 8002f80:	230a      	movs	r3, #10
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	200000d4 	.word	0x200000d4

08002f90 <MRF24SetPanId>:
 * @brief	Actualizo el PANID de trabajo.
 * @param	Nuevo PANID (uint16_t).
 * @retval	Estado de la operación (INVALID_VALUE, OPERATION_OK).
 * @note	Se comprueba la integridad del dato.
 */
mrf24_state_t MRF24SetPanId(uint16_t pan_id) {
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]

	if(BROADCAST == pan_id)
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <MRF24SetPanId+0x18>
		return INVALID_VALUE;
 8002fa4:	230c      	movs	r3, #12
 8002fa6:	e003      	b.n	8002fb0 <MRF24SetPanId+0x20>
	data_config_s.panid = pan_id;
 8002fa8:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <MRF24SetPanId+0x2c>)
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	8053      	strh	r3, [r2, #2]
	return OPERATION_OK;
 8002fae:	230a      	movs	r3, #10
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	200000d4 	.word	0x200000d4

08002fc0 <MRF24SetAdd>:
 * @brief	Actualizo la dirección corta del dispositivo.
 * @param	Nueva dirección (uint16_t).
 * @retval	Estado de la operación (INVALID_VALUE, OPERATION_OK).
 * @note	Se comprueba la integridad del dato.
 */
mrf24_state_t MRF24SetAdd(uint16_t add) {
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]

	if(BROADCAST == add)
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <MRF24SetAdd+0x18>
		return INVALID_VALUE;
 8002fd4:	230c      	movs	r3, #12
 8002fd6:	e003      	b.n	8002fe0 <MRF24SetAdd+0x20>
	data_config_s.address = add;
 8002fd8:	4a04      	ldr	r2, [pc, #16]	@ (8002fec <MRF24SetAdd+0x2c>)
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	8093      	strh	r3, [r2, #4]
	return OPERATION_OK;
 8002fde:	230a      	movs	r3, #10
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	200000d4 	.word	0x200000d4

08002ff0 <MRF24SetInter>:
/**
 * @brief	Actualizo el número de secuancia de las comunicaciones salientes.
 * @param	Nuevo número de secuencia (uint16_t).
 * @retval	Estado de la operación (OPERATION_OK).
 */
mrf24_state_t MRF24SetInter(uint16_t sec) {
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]

	data_config_s.sequence_number = sec;
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4b04      	ldr	r3, [pc, #16]	@ (8003010 <MRF24SetInter+0x20>)
 8003000:	705a      	strb	r2, [r3, #1]
	return OPERATION_OK;
 8003002:	230a      	movs	r3, #10
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	200000d4 	.word	0x200000d4

08003014 <MRF24SetMAC>:
 * @brief	Actualizo la dirección larga del dispositivo.
 * @param	Nueva dirección (8 bytes).
 * @retval	Estado de la operación (INVALID_VALUE, OPERATION_OK).
 * @note	Se comprueba la integridad del dato.
 */
mrf24_state_t MRF24SetMAC(uint8_t mac[8]) {
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

	bool_t dif_cero = false;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i =0; i < LARGE_MAC_SIZE; i++) {
 8003020:	2300      	movs	r3, #0
 8003022:	73bb      	strb	r3, [r7, #14]
 8003024:	e00b      	b.n	800303e <MRF24SetMAC+0x2a>

		if(VACIO != mac[i]) {
 8003026:	7bbb      	ldrb	r3, [r7, #14]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4413      	add	r3, r2
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <MRF24SetMAC+0x24>

			dif_cero = true;
 8003032:	2301      	movs	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
			break;
 8003036:	e005      	b.n	8003044 <MRF24SetMAC+0x30>
	for(uint8_t i =0; i < LARGE_MAC_SIZE; i++) {
 8003038:	7bbb      	ldrb	r3, [r7, #14]
 800303a:	3301      	adds	r3, #1
 800303c:	73bb      	strb	r3, [r7, #14]
 800303e:	7bbb      	ldrb	r3, [r7, #14]
 8003040:	2b07      	cmp	r3, #7
 8003042:	d9f0      	bls.n	8003026 <MRF24SetMAC+0x12>
		}
	}

	if(!dif_cero)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	f083 0301 	eor.w	r3, r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MRF24SetMAC+0x40>
		return INVALID_VALUE;
 8003050:	230c      	movs	r3, #12
 8003052:	e006      	b.n	8003062 <MRF24SetMAC+0x4e>
	memcpy(data_config_s.mac, mac, sizeof(data_config_s.mac));
 8003054:	4b05      	ldr	r3, [pc, #20]	@ (800306c <MRF24SetMAC+0x58>)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	3308      	adds	r3, #8
 800305a:	6810      	ldr	r0, [r2, #0]
 800305c:	6851      	ldr	r1, [r2, #4]
 800305e:	c303      	stmia	r3!, {r0, r1}
	return OPERATION_OK;
 8003060:	230a      	movs	r3, #10
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	200000d4 	.word	0x200000d4

08003070 <MRF24SetSecurityKey>:
 * @brief	Actualizo la llave de seguridad para la encriptación.
 * @param	Nueva llave (16 bytes).
 * @retval	Estado de la operación (INVALID_VALUE, OPERATION_OK).
 * @note	Se comprueba la integridad del dato.
 */
mrf24_state_t MRF24SetSecurityKey(uint8_t security_key[16]) {
 8003070:	b490      	push	{r4, r7}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

	bool_t dif_cero = false;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i =0; i < SEC_KEY_SIZE; i++) {
 800307c:	2300      	movs	r3, #0
 800307e:	73bb      	strb	r3, [r7, #14]
 8003080:	e00b      	b.n	800309a <MRF24SetSecurityKey+0x2a>

		if(VACIO != security_key[i]) {
 8003082:	7bbb      	ldrb	r3, [r7, #14]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <MRF24SetSecurityKey+0x24>

			dif_cero = true;
 800308e:	2301      	movs	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
			break;
 8003092:	e005      	b.n	80030a0 <MRF24SetSecurityKey+0x30>
	for(uint8_t i =0; i < SEC_KEY_SIZE; i++) {
 8003094:	7bbb      	ldrb	r3, [r7, #14]
 8003096:	3301      	adds	r3, #1
 8003098:	73bb      	strb	r3, [r7, #14]
 800309a:	7bbb      	ldrb	r3, [r7, #14]
 800309c:	2b0f      	cmp	r3, #15
 800309e:	d9f0      	bls.n	8003082 <MRF24SetSecurityKey+0x12>
		}
	}

	if(!dif_cero)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	f083 0301 	eor.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MRF24SetSecurityKey+0x40>
		return INVALID_VALUE;
 80030ac:	230c      	movs	r3, #12
 80030ae:	e00a      	b.n	80030c6 <MRF24SetSecurityKey+0x56>
	memcpy(data_config_s.security_key, security_key, sizeof(data_config_s.security_key));
 80030b0:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <MRF24SetSecurityKey+0x60>)
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	f103 0410 	add.w	r4, r3, #16
 80030b8:	4613      	mov	r3, r2
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	return OPERATION_OK;
 80030c4:	230a      	movs	r3, #10
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc90      	pop	{r4, r7}
 80030ce:	4770      	bx	lr
 80030d0:	200000d4 	.word	0x200000d4

080030d4 <MRF24TransmitirDato>:
 * @brief   Envío la información almacenada en la estructura de salida.
 * @param   None.
 * @retval  Estado de la operación (OPERACION_NO_REALIZADA,
 * 			TRANSMISION_REALIZADA, NO_DIRECCION, MSG_NO_PRESENTE).
 */
mrf24_state_t MRF24TransmitirDato(mrf24_data_out_t * p_info_out_s) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

	if(INITIALIZATION_OK != estadoActual)
 80030dc:	4b67      	ldr	r3, [pc, #412]	@ (800327c <MRF24TransmitirDato+0x1a8>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d001      	beq.n	80030e8 <MRF24TransmitirDato+0x14>
		return OPERATION_FAIL;
 80030e4:	2309      	movs	r3, #9
 80030e6:	e0c4      	b.n	8003272 <MRF24TransmitirDato+0x19e>

	if(VACIO == p_info_out_s->dest_address)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	885b      	ldrh	r3, [r3, #2]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <MRF24TransmitirDato+0x20>
		return DIRECTION_EMPTY;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0be      	b.n	8003272 <MRF24TransmitirDato+0x19e>

	if(VACIO == p_info_out_s->buffer_size)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <MRF24TransmitirDato+0x2e>
		return BUFFER_EMPTY;
 80030fe:	2307      	movs	r3, #7
 8003100:	e0b7      	b.n	8003272 <MRF24TransmitirDato+0x19e>

	if(BUFFER_SIZE < p_info_out_s->buffer_size)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003108:	2b40      	cmp	r3, #64	@ 0x40
 800310a:	d901      	bls.n	8003110 <MRF24TransmitirDato+0x3c>
		return TO_LONG_MSG;
 800310c:	2306      	movs	r3, #6
 800310e:	e0b0      	b.n	8003272 <MRF24TransmitirDato+0x19e>
	uint8_t pos_mem = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]
	SetLongAddr(pos_mem++, HEAD_LENGTH);
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	73fa      	strb	r2, [r7, #15]
 800311a:	210b      	movs	r1, #11
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fe61 	bl	8002de4 <SetLongAddr>
	SetLongAddr(pos_mem++, p_info_out_s->buffer_size + HEAD_LENGTH);
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	73fa      	strb	r2, [r7, #15]
 8003128:	461a      	mov	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003130:	330b      	adds	r3, #11
 8003132:	b2db      	uxtb	r3, r3
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f7ff fe54 	bl	8002de4 <SetLongAddr>
	SetLongAddr(pos_mem++, DATA | ACK_REQ | INTRA_PAN);			// LSB.
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	73fa      	strb	r2, [r7, #15]
 8003142:	2161      	movs	r1, #97	@ 0x61
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fe4d 	bl	8002de4 <SetLongAddr>
	SetLongAddr(pos_mem++, SHORT_S_ADD | SHORT_D_ADD);			// MSB.
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	73fa      	strb	r2, [r7, #15]
 8003150:	2188      	movs	r1, #136	@ 0x88
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fe46 	bl	8002de4 <SetLongAddr>
	SetLongAddr(pos_mem++, data_config_s.sequence_number++);
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	73fa      	strb	r2, [r7, #15]
 800315e:	4618      	mov	r0, r3
 8003160:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <MRF24TransmitirDato+0x1ac>)
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	b2d1      	uxtb	r1, r2
 8003168:	4a45      	ldr	r2, [pc, #276]	@ (8003280 <MRF24TransmitirDato+0x1ac>)
 800316a:	7051      	strb	r1, [r2, #1]
 800316c:	4619      	mov	r1, r3
 800316e:	f7ff fe39 	bl	8002de4 <SetLongAddr>

	if(VACIO == p_info_out_s->dest_panid)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <MRF24TransmitirDato+0xae>
		p_info_out_s->dest_panid = data_config_s.panid;
 800317a:	4b41      	ldr	r3, [pc, #260]	@ (8003280 <MRF24TransmitirDato+0x1ac>)
 800317c:	885a      	ldrh	r2, [r3, #2]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	801a      	strh	r2, [r3, #0]
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_panid);
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	73fa      	strb	r2, [r7, #15]
 8003188:	461a      	mov	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f7ff fe26 	bl	8002de4 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_panid >> SHIFT_BYTE));
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	73fa      	strb	r2, [r7, #15]
 800319e:	461a      	mov	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f7ff fe19 	bl	8002de4 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_address);
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	73fa      	strb	r2, [r7, #15]
 80031b8:	461a      	mov	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	885b      	ldrh	r3, [r3, #2]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f7ff fe0e 	bl	8002de4 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_address >> SHIFT_BYTE));
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	73fa      	strb	r2, [r7, #15]
 80031ce:	461a      	mov	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	885b      	ldrh	r3, [r3, #2]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f7ff fe01 	bl	8002de4 <SetLongAddr>

	if(VACIO == p_info_out_s->origin_address)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	889b      	ldrh	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <MRF24TransmitirDato+0x11e>
		p_info_out_s->origin_address = data_config_s.address;
 80031ea:	4b25      	ldr	r3, [pc, #148]	@ (8003280 <MRF24TransmitirDato+0x1ac>)
 80031ec:	889a      	ldrh	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	809a      	strh	r2, [r3, #4]
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->origin_address);
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	73fa      	strb	r2, [r7, #15]
 80031f8:	461a      	mov	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	889b      	ldrh	r3, [r3, #4]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	4619      	mov	r1, r3
 8003202:	4610      	mov	r0, r2
 8003204:	f7ff fdee 	bl	8002de4 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->origin_address >> SHIFT_BYTE));
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	73fa      	strb	r2, [r7, #15]
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	889b      	ldrh	r3, [r3, #4]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	b29b      	uxth	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f7ff fde1 	bl	8002de4 <SetLongAddr>

	for(int8_t i = 0; i < p_info_out_s->buffer_size; i++) {
 8003222:	2300      	movs	r3, #0
 8003224:	73bb      	strb	r3, [r7, #14]
 8003226:	e011      	b.n	800324c <MRF24TransmitirDato+0x178>

		SetLongAddr(pos_mem++, p_info_out_s->buffer[i]);
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	73fa      	strb	r2, [r7, #15]
 800322e:	4618      	mov	r0, r3
 8003230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4413      	add	r3, r2
 8003238:	799b      	ldrb	r3, [r3, #6]
 800323a:	4619      	mov	r1, r3
 800323c:	f7ff fdd2 	bl	8002de4 <SetLongAddr>
	for(int8_t i = 0; i < p_info_out_s->buffer_size; i++) {
 8003240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3301      	adds	r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	73bb      	strb	r3, [r7, #14]
 800324c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	f892 2046 	ldrb.w	r2, [r2, #70]	@ 0x46
 8003256:	4293      	cmp	r3, r2
 8003258:	dbe6      	blt.n	8003228 <MRF24TransmitirDato+0x154>
	}
	SetLongAddr(pos_mem++, VACIO);
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	73fa      	strb	r2, [r7, #15]
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fdbe 	bl	8002de4 <SetLongAddr>
	SetShortAddr(TXNCON, TXNACKREQ | TXNTRIG);
 8003268:	2105      	movs	r1, #5
 800326a:	201b      	movs	r0, #27
 800326c:	f7ff fd79 	bl	8002d62 <SetShortAddr>
	return TRANSMISSION_COMPLETED;
 8003270:	2302      	movs	r3, #2
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200000d0 	.word	0x200000d0
 8003280:	200000d4 	.word	0x200000d4

08003284 <MRF24IsNewMsg>:
 * @brief   Se levantó la bandera indicando la llegada de un mensaje.
 * @param   None.
 * @retval  Estado de la operación (ERROR_INESPERADO, MSG_PRESENTE,
 *          MSG_NO_PRESENTE).
 */
volatile mrf24_state_t MRF24IsNewMsg(void) {
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0

	if(INITIALIZATION_OK != estadoActual)
 8003288:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <MRF24IsNewMsg+0x2c>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d001      	beq.n	8003294 <MRF24IsNewMsg+0x10>
		return UNEXPECTED_ERROR;
 8003290:	230b      	movs	r3, #11
 8003292:	e00a      	b.n	80032aa <MRF24IsNewMsg+0x26>

	if(!IsMRF24Interrup())
 8003294:	f000 f8b6 	bl	8003404 <IsMRF24Interrup>
 8003298:	4603      	mov	r3, r0
 800329a:	f083 0301 	eor.w	r3, r3, #1
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MRF24IsNewMsg+0x24>
		return MSG_PRESENT;
 80032a4:	2304      	movs	r3, #4
 80032a6:	e000      	b.n	80032aa <MRF24IsNewMsg+0x26>
	return BUFFER_EMPTY;
 80032a8:	2307      	movs	r3, #7
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200000d0 	.word	0x200000d0

080032b4 <MRF24ReciboPaquete>:
 * @brief   Recibir un paquete y dejarlo en el bufer de entrada en
 *          la estructura data_in_s.
 * @param   None.
 * @retval  Estado de la operación (OPERACION_NO_REALIZADA, MSG_LEIDO).
 */
mrf24_state_t MRF24ReciboPaquete(void) {
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
	/*
	 * agregar la lectura del rssi y del lq, vienen en el paquete del mensaje.
	 */


	if(INITIALIZATION_OK != estadoActual)
 80032ba:	4b29      	ldr	r3, [pc, #164]	@ (8003360 <MRF24ReciboPaquete+0xac>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d001      	beq.n	80032c6 <MRF24ReciboPaquete+0x12>
		return OPERATION_FAIL;
 80032c2:	2309      	movs	r3, #9
 80032c4:	e048      	b.n	8003358 <MRF24ReciboPaquete+0xa4>
	SetLongAddr(BBREG1, RXDECINV);
 80032c6:	2104      	movs	r1, #4
 80032c8:	2039      	movs	r0, #57	@ 0x39
 80032ca:	f7ff fd8b 	bl	8002de4 <SetLongAddr>
	SetShortAddr(RXFLUSH, DATAONLY);
 80032ce:	2104      	movs	r1, #4
 80032d0:	200d      	movs	r0, #13
 80032d2:	f7ff fd46 	bl	8002d62 <SetShortAddr>
	data_in_s.buffer_size = GetLongAddr(RX_FIFO);
 80032d6:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80032da:	f7ff fda7 	bl	8002e2c <GetLongAddr>
 80032de:	4603      	mov	r3, r0
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <MRF24ReciboPaquete+0xb0>)
 80032e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	uint16_t add = GetLongAddr(RX_FIFO + 9);
 80032e8:	f240 3009 	movw	r0, #777	@ 0x309
 80032ec:	f7ff fd9e 	bl	8002e2c <GetLongAddr>
 80032f0:	4603      	mov	r3, r0
 80032f2:	80bb      	strh	r3, [r7, #4]
	add = (add << SHIFT_BYTE) | GetLongAddr(RX_FIFO + 8);
 80032f4:	88bb      	ldrh	r3, [r7, #4]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	b21c      	sxth	r4, r3
 80032fa:	f44f 7042 	mov.w	r0, #776	@ 0x308
 80032fe:	f7ff fd95 	bl	8002e2c <GetLongAddr>
 8003302:	4603      	mov	r3, r0
 8003304:	b21b      	sxth	r3, r3
 8003306:	4323      	orrs	r3, r4
 8003308:	b21b      	sxth	r3, r3
 800330a:	80bb      	strh	r3, [r7, #4]
	data_in_s.address = add;
 800330c:	4a15      	ldr	r2, [pc, #84]	@ (8003364 <MRF24ReciboPaquete+0xb0>)
 800330e:	88bb      	ldrh	r3, [r7, #4]
 8003310:	8053      	strh	r3, [r2, #2]

	for(uint8_t i = 0; i < data_in_s.buffer_size - FCS_LQI_RSSI; i++) {
 8003312:	2300      	movs	r3, #0
 8003314:	71fb      	strb	r3, [r7, #7]
 8003316:	e010      	b.n	800333a <MRF24ReciboPaquete+0x86>

		data_in_s.buffer[i] = GetLongAddr(RX_FIFO + HEAD_LENGTH + i - 1);
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	b29b      	uxth	r3, r3
 800331c:	f203 330a 	addw	r3, r3, #778	@ 0x30a
 8003320:	b29b      	uxth	r3, r3
 8003322:	79fc      	ldrb	r4, [r7, #7]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fd81 	bl	8002e2c <GetLongAddr>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <MRF24ReciboPaquete+0xb0>)
 8003330:	4423      	add	r3, r4
 8003332:	715a      	strb	r2, [r3, #5]
	for(uint8_t i = 0; i < data_in_s.buffer_size - FCS_LQI_RSSI; i++) {
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	3301      	adds	r3, #1
 8003338:	71fb      	strb	r3, [r7, #7]
 800333a:	79fa      	ldrb	r2, [r7, #7]
 800333c:	4b09      	ldr	r3, [pc, #36]	@ (8003364 <MRF24ReciboPaquete+0xb0>)
 800333e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003342:	3b04      	subs	r3, #4
 8003344:	429a      	cmp	r2, r3
 8003346:	dbe7      	blt.n	8003318 <MRF24ReciboPaquete+0x64>
	}
	SetLongAddr(BBREG1, VACIO);
 8003348:	2100      	movs	r1, #0
 800334a:	2039      	movs	r0, #57	@ 0x39
 800334c:	f7ff fd4a 	bl	8002de4 <SetLongAddr>
	(void)GetShortAddr(INTSTAT);
 8003350:	2031      	movs	r0, #49	@ 0x31
 8003352:	f7ff fd26 	bl	8002da2 <GetShortAddr>
	return MSG_READ;
 8003356:	2305      	movs	r3, #5
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bd90      	pop	{r4, r7, pc}
 8003360:	200000d0 	.word	0x200000d0
 8003364:	200000f4 	.word	0x200000f4

08003368 <MRF24GetDataIn>:
 * @brief   Devuelvo el puntero a la estructura que contiene la información del
 * 			mensaje de entrada.
 * @param   None.
 * @retval  Puntero a la estructura tipo mrf24_data_in_t.
 */
mrf24_data_in_t * MRF24GetDataIn(void) {
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

	return &data_in_s;
 800336c:	4b02      	ldr	r3, [pc, #8]	@ (8003378 <MRF24GetDataIn+0x10>)
}
 800336e:	4618      	mov	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	200000f4 	.word	0x200000f4

0800337c <InicializoPines>:
/**
 * @brief  Inicialización del hardware relacionado con el módulo
 * @param  None
 * @retval None
 */
void InicializoPines(void) {
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0

    SetCSPin(1);
 8003380:	2001      	movs	r0, #1
 8003382:	f000 f809 	bl	8003398 <SetCSPin>
    SetWakePin(1);
 8003386:	2001      	movs	r0, #1
 8003388:	f000 f818 	bl	80033bc <SetWakePin>
    SetResetPin(0);
 800338c:	2000      	movs	r0, #0
 800338e:	f000 f827 	bl	80033e0 <SetResetPin>
    return;
 8003392:	bf00      	nop
}
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <SetCSPin>:
/**
 * @brief  Escribo en el pin destinado a CS
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetCSPin(bool_t estado) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_CS_GPIO_Port, MRF24_CS_Pin, estado);
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	461a      	mov	r2, r3
 80033a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033aa:	4803      	ldr	r0, [pc, #12]	@ (80033b8 <SetCSPin+0x20>)
 80033ac:	f7fe fa73 	bl	8001896 <HAL_GPIO_WritePin>
    return;
 80033b0:	bf00      	nop
}
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40010800 	.word	0x40010800

080033bc <SetWakePin>:
/**
 * @brief  Escribo en el pin destinado a Wake
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetWakePin(bool_t estado) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_WAKE_GPIO_Port, MRF24_WAKE_Pin, estado);
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	461a      	mov	r2, r3
 80033ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80033ce:	4803      	ldr	r0, [pc, #12]	@ (80033dc <SetWakePin+0x20>)
 80033d0:	f7fe fa61 	bl	8001896 <HAL_GPIO_WritePin>
    return;
 80033d4:	bf00      	nop
}
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40010800 	.word	0x40010800

080033e0 <SetResetPin>:
/**
 * @brief  Escribo en el pin destinado a Reset
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetResetPin(bool_t estado) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_RESET_GPIO_Port, MRF24_RESET_Pin, estado);
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	461a      	mov	r2, r3
 80033ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80033f2:	4803      	ldr	r0, [pc, #12]	@ (8003400 <SetResetPin+0x20>)
 80033f4:	f7fe fa4f 	bl	8001896 <HAL_GPIO_WritePin>
    return;
 80033f8:	bf00      	nop
}
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40010800 	.word	0x40010800

08003404 <IsMRF24Interrup>:

/**
 * @brief  Devuelvo el estado del pin interrup del módulo
 * @retval Booleano
 */
volatile bool_t IsMRF24Interrup(void) {
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0

	return HAL_GPIO_ReadPin(MRF24_INTERRUP_GPIO_Port, MRF24_INTERRUP_Pin);
 8003408:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800340c:	4805      	ldr	r0, [pc, #20]	@ (8003424 <IsMRF24Interrup+0x20>)
 800340e:	f7fe fa2b 	bl	8001868 <HAL_GPIO_ReadPin>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
}
 800341e:	4618      	mov	r0, r3
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40010800 	.word	0x40010800

08003428 <WriteByteSPIPort>:
/**
 * @brief  Escribo en el puerto SPI
 * @param  Dato - 1 byte
 * @retval None
 */
void WriteByteSPIPort(uint8_t dato) {
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &dato, _1_BYTE, TIME_OUT_SPI);
 8003432:	1df9      	adds	r1, r7, #7
 8003434:	2364      	movs	r3, #100	@ 0x64
 8003436:	2201      	movs	r2, #1
 8003438:	4803      	ldr	r0, [pc, #12]	@ (8003448 <WriteByteSPIPort+0x20>)
 800343a:	f7fe febf 	bl	80021bc <HAL_SPI_Transmit>
    return;
 800343e:	bf00      	nop
}
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000054 	.word	0x20000054

0800344c <Write2ByteSPIPort>:
/**
 * @brief  Escribo en el puerto SPI
 * @param  Dato - 1 byte
 * @retval None
 */
void Write2ByteSPIPort(uint16_t dato) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]

	uint8_t dato_partido = (uint8_t) (dato >> SHIFT_BYTE);
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	b29b      	uxth	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &dato_partido, _1_BYTE, TIME_OUT_SPI);
 8003460:	f107 010f 	add.w	r1, r7, #15
 8003464:	2364      	movs	r3, #100	@ 0x64
 8003466:	2201      	movs	r2, #1
 8003468:	4808      	ldr	r0, [pc, #32]	@ (800348c <Write2ByteSPIPort+0x40>)
 800346a:	f7fe fea7 	bl	80021bc <HAL_SPI_Transmit>
	dato_partido = (uint8_t) dato;
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &dato_partido, _1_BYTE, TIME_OUT_SPI);
 8003474:	f107 010f 	add.w	r1, r7, #15
 8003478:	2364      	movs	r3, #100	@ 0x64
 800347a:	2201      	movs	r2, #1
 800347c:	4803      	ldr	r0, [pc, #12]	@ (800348c <Write2ByteSPIPort+0x40>)
 800347e:	f7fe fe9d 	bl	80021bc <HAL_SPI_Transmit>
    return;
 8003482:	bf00      	nop
}
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000054 	.word	0x20000054

08003490 <ReadByteSPIPort>:
/**
 * @brief  Leo en el puerto SPI
 * @param  None
 * @retval Dato - 1 byte
 */
uint8_t ReadByteSPIPort(void) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0

	uint8_t dato = 0x01;
 8003496:	2301      	movs	r3, #1
 8003498:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &dato, _1_BYTE, TIME_OUT_SPI);
 800349a:	1df9      	adds	r1, r7, #7
 800349c:	2364      	movs	r3, #100	@ 0x64
 800349e:	2201      	movs	r2, #1
 80034a0:	4803      	ldr	r0, [pc, #12]	@ (80034b0 <ReadByteSPIPort+0x20>)
 80034a2:	f7fe ffcf 	bl	8002444 <HAL_SPI_Receive>
	return dato;
 80034a6:	79fb      	ldrb	r3, [r7, #7]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000054 	.word	0x20000054

080034b4 <memcmp>:
 80034b4:	b510      	push	{r4, lr}
 80034b6:	3901      	subs	r1, #1
 80034b8:	4402      	add	r2, r0
 80034ba:	4290      	cmp	r0, r2
 80034bc:	d101      	bne.n	80034c2 <memcmp+0xe>
 80034be:	2000      	movs	r0, #0
 80034c0:	e005      	b.n	80034ce <memcmp+0x1a>
 80034c2:	7803      	ldrb	r3, [r0, #0]
 80034c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80034c8:	42a3      	cmp	r3, r4
 80034ca:	d001      	beq.n	80034d0 <memcmp+0x1c>
 80034cc:	1b18      	subs	r0, r3, r4
 80034ce:	bd10      	pop	{r4, pc}
 80034d0:	3001      	adds	r0, #1
 80034d2:	e7f2      	b.n	80034ba <memcmp+0x6>

080034d4 <memset>:
 80034d4:	4603      	mov	r3, r0
 80034d6:	4402      	add	r2, r0
 80034d8:	4293      	cmp	r3, r2
 80034da:	d100      	bne.n	80034de <memset+0xa>
 80034dc:	4770      	bx	lr
 80034de:	f803 1b01 	strb.w	r1, [r3], #1
 80034e2:	e7f9      	b.n	80034d8 <memset+0x4>

080034e4 <__libc_init_array>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	2600      	movs	r6, #0
 80034e8:	4d0c      	ldr	r5, [pc, #48]	@ (800351c <__libc_init_array+0x38>)
 80034ea:	4c0d      	ldr	r4, [pc, #52]	@ (8003520 <__libc_init_array+0x3c>)
 80034ec:	1b64      	subs	r4, r4, r5
 80034ee:	10a4      	asrs	r4, r4, #2
 80034f0:	42a6      	cmp	r6, r4
 80034f2:	d109      	bne.n	8003508 <__libc_init_array+0x24>
 80034f4:	f000 f828 	bl	8003548 <_init>
 80034f8:	2600      	movs	r6, #0
 80034fa:	4d0a      	ldr	r5, [pc, #40]	@ (8003524 <__libc_init_array+0x40>)
 80034fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003528 <__libc_init_array+0x44>)
 80034fe:	1b64      	subs	r4, r4, r5
 8003500:	10a4      	asrs	r4, r4, #2
 8003502:	42a6      	cmp	r6, r4
 8003504:	d105      	bne.n	8003512 <__libc_init_array+0x2e>
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	f855 3b04 	ldr.w	r3, [r5], #4
 800350c:	4798      	blx	r3
 800350e:	3601      	adds	r6, #1
 8003510:	e7ee      	b.n	80034f0 <__libc_init_array+0xc>
 8003512:	f855 3b04 	ldr.w	r3, [r5], #4
 8003516:	4798      	blx	r3
 8003518:	3601      	adds	r6, #1
 800351a:	e7f2      	b.n	8003502 <__libc_init_array+0x1e>
 800351c:	080035ec 	.word	0x080035ec
 8003520:	080035ec 	.word	0x080035ec
 8003524:	080035ec 	.word	0x080035ec
 8003528:	080035f0 	.word	0x080035f0

0800352c <memcpy>:
 800352c:	440a      	add	r2, r1
 800352e:	4291      	cmp	r1, r2
 8003530:	f100 33ff 	add.w	r3, r0, #4294967295
 8003534:	d100      	bne.n	8003538 <memcpy+0xc>
 8003536:	4770      	bx	lr
 8003538:	b510      	push	{r4, lr}
 800353a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800353e:	4291      	cmp	r1, r2
 8003540:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003544:	d1f9      	bne.n	800353a <memcpy+0xe>
 8003546:	bd10      	pop	{r4, pc}

08003548 <_init>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	bf00      	nop
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr

08003554 <_fini>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	bf00      	nop
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr


sensor_blue_pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003488  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003594  08003594  00004594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003620  08003620  00005024  2**0
                  CONTENTS
  4 .ARM          00000000  08003620  08003620  00005024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003620  08003620  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003620  08003620  00004620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003624  08003624  00004624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003628  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000028  0800364c  00005028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  0800364c  000051bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fa0  00000000  00000000  0000504d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d0  00000000  00000000  0000cfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0000f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006af  00000000  00000000  0000fce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187c7  00000000  00000000  00010397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c999  00000000  00000000  00028b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083976  00000000  00000000  000354f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8e6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021d8  00000000  00000000  000b8eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000bb088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	0800357c 	.word	0x0800357c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	0800357c 	.word	0x0800357c

0800014c <ModoSetup>:
 * 			10 segundos el botón de reset el módulo arranca en modo configuración
 * @param	None.
 * @retval	Estado de la operación (NO_SETUP, SETUP_FAIL y SETUP_SUCIFULL).
 * @note	Arranco con la configuración de fábrica para el módulo MRF24J40
 */
sys_state_t ModoSetup(void) {
 800014c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800014e:	b0b3      	sub	sp, #204	@ 0xcc
 8000150:	af00      	add	r7, sp, #0

	int32_t tiempo = HAL_GetTick();
 8000152:	f000 ff0d 	bl	8000f70 <HAL_GetTick>
 8000156:	4603      	mov	r3, r0
 8000158:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	bool_t config_enable = false;
 800015c:	2300      	movs	r3, #0
 800015e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

	while(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 8000162:	e024      	b.n	80001ae <ModoSetup+0x62>

		if((HAL_GetTick() - tiempo) >= SETUP_TIME_MS) {
 8000164:	f000 ff04 	bl	8000f70 <HAL_GetTick>
 8000168:	4602      	mov	r2, r0
 800016a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800016e:	1ad3      	subs	r3, r2, r3
 8000170:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000174:	4293      	cmp	r3, r2
 8000176:	d91a      	bls.n	80001ae <ModoSetup+0x62>

			for(uint8_t i = 0; i < 6; i++) {
 8000178:	2300      	movs	r3, #0
 800017a:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
 800017e:	e00e      	b.n	800019e <ModoSetup+0x52>

				ToggleLed(ROJO);
 8000180:	2002      	movs	r0, #2
 8000182:	f000 fbc7 	bl	8000914 <ToggleLed>
				ToggleLed(VERDE);
 8000186:	2000      	movs	r0, #0
 8000188:	f000 fbc4 	bl	8000914 <ToggleLed>
				delay_t(500);
 800018c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000190:	f000 fef8 	bl	8000f84 <HAL_Delay>
			for(uint8_t i = 0; i < 6; i++) {
 8000194:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8000198:	3301      	adds	r3, #1
 800019a:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
 800019e:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80001a2:	2b05      	cmp	r3, #5
 80001a4:	d9ec      	bls.n	8000180 <ModoSetup+0x34>
			}
			config_enable = true;
 80001a6:	2301      	movs	r3, #1
 80001a8:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
			break;
 80001ac:	e007      	b.n	80001be <ModoSetup+0x72>
	while(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 80001ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001b2:	4881      	ldr	r0, [pc, #516]	@ (80003b8 <ModoSetup+0x26c>)
 80001b4:	f001 fb72 	bl	800189c <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d1d2      	bne.n	8000164 <ModoSetup+0x18>
		}
	}

	if(!config_enable)
 80001be:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80001c2:	f083 0301 	eor.w	r3, r3, #1
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <ModoSetup+0x84>
		return NO_SETUP;
 80001cc:	2300      	movs	r3, #0
 80001ce:	e0ee      	b.n	80003ae <ModoSetup+0x262>

	if(INITIALIZATION_OK != MRF24J40Init())			// inicializo el mrf con configuración por defecto
 80001d0:	f002 fec4 	bl	8002f5c <MRF24J40Init>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d001      	beq.n	80001de <ModoSetup+0x92>
		return SETUP_FAIL;
 80001da:	2303      	movs	r3, #3
 80001dc:	e0e7      	b.n	80003ae <ModoSetup+0x262>
	uint8_t ciclos = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
	delayNoBloqueanteData_t delay_time;
	DelayInit(&delay_time, CICLE_TIME_MS);
 80001e4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80001e8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f9e9 	bl	80005c4 <DelayInit>
	mrf24_data_in_t * mrf24_data_in;				// puntero para recibir el mensage de entrada
	mrf24_data_config_t data_config_recibida = {0}; // variable de configuración recibida para el mrf
 80001f2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80001f6:	2220      	movs	r2, #32
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f003 f984 	bl	8003508 <memset>
	bool_t actualizar_mrf24 = false;
 8000200:	2300      	movs	r3, #0
 8000202:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
	bool_t actualizar_system_info = false;
 8000206:	2300      	movs	r3, #0
 8000208:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

	while(config_enable) {
 800020c:	e06d      	b.n	80002ea <ModoSetup+0x19e>

		if(DelayRead(&delay_time)) {
 800020e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f9ed 	bl	80005f2 <DelayRead>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d007      	beq.n	800022e <ModoSetup+0xe2>

			ToggleLed(ROJO);
 800021e:	2002      	movs	r0, #2
 8000220:	f000 fb78 	bl	8000914 <ToggleLed>
			ciclos ++;
 8000224:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8000228:	3301      	adds	r3, #1
 800022a:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
		if(ciclos > CICLE_TIME_OUT) {

			SetLed(ROJO, LED_APAGADO);
			return SETUP_FAIL;
		}
		if(MSG_PRESENT == MRF24IsNewMsg()) {
 800022e:	f003 f843 	bl	80032b8 <MRF24IsNewMsg>
 8000232:	4603      	mov	r3, r0
 8000234:	2b04      	cmp	r3, #4
 8000236:	d158      	bne.n	80002ea <ModoSetup+0x19e>

			if(MSG_READ == MRF24ReciboPaquete()) {
 8000238:	f003 f856 	bl	80032e8 <MRF24ReciboPaquete>
 800023c:	4603      	mov	r3, r0
 800023e:	2b05      	cmp	r3, #5
 8000240:	d153      	bne.n	80002ea <ModoSetup+0x19e>

				mrf24_data_in = MRF24GetDataIn();
 8000242:	f003 f8ab 	bl	800339c <MRF24GetDataIn>
 8000246:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

				if(!memcmp(mrf24_data_in->buffer, "MRFCNF:", SIZE_COMMAND)) {
 800024a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800024e:	3305      	adds	r3, #5
 8000250:	2207      	movs	r2, #7
 8000252:	495a      	ldr	r1, [pc, #360]	@ (80003bc <ModoSetup+0x270>)
 8000254:	4618      	mov	r0, r3
 8000256:	f003 f947 	bl	80034e8 <memcmp>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d10d      	bne.n	800027c <ModoSetup+0x130>

					memcpy(&data_config_recibida,
							mrf24_data_in->buffer + SIZE_COMMAND,
 8000260:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000264:	3305      	adds	r3, #5
					memcpy(&data_config_recibida,
 8000266:	1dd9      	adds	r1, r3, #7
 8000268:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800026c:	2220      	movs	r2, #32
 800026e:	4618      	mov	r0, r3
 8000270:	f003 f976 	bl	8003560 <memcpy>
							sizeof(mrf24_data_config_t));
					actualizar_mrf24 = true;
 8000274:	2301      	movs	r3, #1
 8000276:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
 800027a:	e036      	b.n	80002ea <ModoSetup+0x19e>
				} else if(!memcmp(mrf24_data_in->buffer, "SYSCNF:", SIZE_COMMAND)) {
 800027c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000280:	3305      	adds	r3, #5
 8000282:	2207      	movs	r2, #7
 8000284:	494e      	ldr	r1, [pc, #312]	@ (80003c0 <ModoSetup+0x274>)
 8000286:	4618      	mov	r0, r3
 8000288:	f003 f92e 	bl	80034e8 <memcmp>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d11d      	bne.n	80002ce <ModoSetup+0x182>

					memcpy(&system_config_s,
							mrf24_data_in->buffer + SIZE_COMMAND,
 8000292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000296:	3305      	adds	r3, #5
					memcpy(&system_config_s,
 8000298:	3307      	adds	r3, #7
 800029a:	4a4a      	ldr	r2, [pc, #296]	@ (80003c4 <ModoSetup+0x278>)
 800029c:	461c      	mov	r4, r3
 800029e:	4616      	mov	r6, r2
 80002a0:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80002a4:	4635      	mov	r5, r6
 80002a6:	4623      	mov	r3, r4
 80002a8:	6818      	ldr	r0, [r3, #0]
 80002aa:	6859      	ldr	r1, [r3, #4]
 80002ac:	689a      	ldr	r2, [r3, #8]
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002b2:	3410      	adds	r4, #16
 80002b4:	3610      	adds	r6, #16
 80002b6:	4564      	cmp	r4, ip
 80002b8:	d1f4      	bne.n	80002a4 <ModoSetup+0x158>
 80002ba:	4633      	mov	r3, r6
 80002bc:	4622      	mov	r2, r4
 80002be:	6810      	ldr	r0, [r2, #0]
 80002c0:	6851      	ldr	r1, [r2, #4]
 80002c2:	6892      	ldr	r2, [r2, #8]
 80002c4:	c307      	stmia	r3!, {r0, r1, r2}
							sizeof(system_config_t));
					actualizar_system_info = true;
 80002c6:	2301      	movs	r3, #1
 80002c8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 80002cc:	e00d      	b.n	80002ea <ModoSetup+0x19e>
				} else if(!memcmp(mrf24_data_in->buffer, "ENDCNF:", SIZE_COMMAND)) {
 80002ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80002d2:	3305      	adds	r3, #5
 80002d4:	2207      	movs	r2, #7
 80002d6:	493c      	ldr	r1, [pc, #240]	@ (80003c8 <ModoSetup+0x27c>)
 80002d8:	4618      	mov	r0, r3
 80002da:	f003 f905 	bl	80034e8 <memcmp>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d102      	bne.n	80002ea <ModoSetup+0x19e>

					config_enable = false;
 80002e4:	2300      	movs	r3, #0
 80002e6:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
	while(config_enable) {
 80002ea:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d18d      	bne.n	800020e <ModoSetup+0xc2>
				}
			}
		}
	}
	SetLed(ROJO, LED_APAGADO);
 80002f2:	2101      	movs	r1, #1
 80002f4:	2002      	movs	r0, #2
 80002f6:	f000 faf1 	bl	80008dc <SetLed>

	if(actualizar_mrf24) {
 80002fa:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d015      	beq.n	800032e <ModoSetup+0x1e2>

		if(CARGA_OK != SetMRF24Config(&data_config_recibida))
 8000302:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f8a0 	bl	800044c <SetMRF24Config>
 800030c:	4603      	mov	r3, r0
 800030e:	2b01      	cmp	r3, #1
 8000310:	d001      	beq.n	8000316 <ModoSetup+0x1ca>
			return SETUP_FAIL;
 8000312:	2303      	movs	r3, #3
 8000314:	e04b      	b.n	80003ae <ModoSetup+0x262>

		if(SAVE_OK != EEPROMSaveStruct(EEPROM_MRF24_ADDR,
 8000316:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800031a:	2220      	movs	r2, #32
 800031c:	4619      	mov	r1, r3
 800031e:	482b      	ldr	r0, [pc, #172]	@ (80003cc <ModoSetup+0x280>)
 8000320:	f000 f9b6 	bl	8000690 <EEPROMSaveStruct>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <ModoSetup+0x1e2>
										&data_config_recibida,
										sizeof(mrf24_data_config_t)))
			return SETUP_FAIL;
 800032a:	2303      	movs	r3, #3
 800032c:	e03f      	b.n	80003ae <ModoSetup+0x262>
	}

	if(actualizar_system_info) {
 800032e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8000332:	2b00      	cmp	r3, #0
 8000334:	d009      	beq.n	800034a <ModoSetup+0x1fe>

		if(SAVE_OK != EEPROMSaveStruct(EEPROM_CONFIG_ADDR,
 8000336:	223c      	movs	r2, #60	@ 0x3c
 8000338:	4922      	ldr	r1, [pc, #136]	@ (80003c4 <ModoSetup+0x278>)
 800033a:	4825      	ldr	r0, [pc, #148]	@ (80003d0 <ModoSetup+0x284>)
 800033c:	f000 f9a8 	bl	8000690 <EEPROMSaveStruct>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <ModoSetup+0x1fe>
										&system_config_s,
										sizeof(system_config_t)))
			return SETUP_FAIL;
 8000346:	2303      	movs	r3, #3
 8000348:	e031      	b.n	80003ae <ModoSetup+0x262>
	}
    mrf24_data_out_t data_out_s;
	data_out_s.dest_address = BROADCAST;
 800034a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800034e:	80fb      	strh	r3, [r7, #6]
	data_out_s.dest_panid = 0x9999;
 8000350:	f649 1399 	movw	r3, #39321	@ 0x9999
 8000354:	80bb      	strh	r3, [r7, #4]
	data_out_s.origin_address = 0x1111;
 8000356:	f241 1311 	movw	r3, #4369	@ 0x1111
 800035a:	813b      	strh	r3, [r7, #8]
    data_out_s.buffer_size = strlen("Configuración guardada");
 800035c:	2317      	movs	r3, #23
 800035e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	strcpy(data_out_s.buffer, "Configuración guardada");
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	3306      	adds	r3, #6
 8000366:	4a1b      	ldr	r2, [pc, #108]	@ (80003d4 <ModoSetup+0x288>)
 8000368:	461d      	mov	r5, r3
 800036a:	4614      	mov	r4, r2
 800036c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800036e:	6028      	str	r0, [r5, #0]
 8000370:	6069      	str	r1, [r5, #4]
 8000372:	60aa      	str	r2, [r5, #8]
 8000374:	60eb      	str	r3, [r5, #12]
 8000376:	cc03      	ldmia	r4!, {r0, r1}
 8000378:	6128      	str	r0, [r5, #16]
 800037a:	6169      	str	r1, [r5, #20]
	MRF24TransmitirDato(&data_out_s);
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4618      	mov	r0, r3
 8000380:	f002 fec2 	bl	8003108 <MRF24TransmitirDato>

	for(uint8_t i = 0; i < 6; i++) {
 8000384:	2300      	movs	r3, #0
 8000386:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
 800038a:	e00b      	b.n	80003a4 <ModoSetup+0x258>

		ToggleLed(VERDE);
 800038c:	2000      	movs	r0, #0
 800038e:	f000 fac1 	bl	8000914 <ToggleLed>
		delay_t(500);
 8000392:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000396:	f000 fdf5 	bl	8000f84 <HAL_Delay>
	for(uint8_t i = 0; i < 6; i++) {
 800039a:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 800039e:	3301      	adds	r3, #1
 80003a0:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
 80003a4:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 80003a8:	2b05      	cmp	r3, #5
 80003aa:	d9ef      	bls.n	800038c <ModoSetup+0x240>
	}
	return SETUP_SUCIFULL;
 80003ac:	2304      	movs	r3, #4
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	37cc      	adds	r7, #204	@ 0xcc
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010c00 	.word	0x40010c00
 80003bc:	08003594 	.word	0x08003594
 80003c0:	0800359c 	.word	0x0800359c
 80003c4:	20000044 	.word	0x20000044
 80003c8:	080035a4 	.word	0x080035a4
 80003cc:	0800fc00 	.word	0x0800fc00
 80003d0:	0800fc40 	.word	0x0800fc40
 80003d4:	080035ac 	.word	0x080035ac

080003d8 <CargarConfig>:
 * 			sistema si estan almacenadas en ROM.
 * @param	None.
 * @retval	Estado de la carga (CARGA_OK, CARGA_ERR).
 * @note
 */
sys_state_t CargarConfig(void) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0

	mrf24_data_config_t mrf24_config_s = {0};
 80003de:	463b      	mov	r3, r7
 80003e0:	2220      	movs	r2, #32
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f003 f88f 	bl	8003508 <memset>
	if(LOAD_OK == EEPROMLoadStruct(EEPROM_MRF24_ADDR, &mrf24_config_s, sizeof(mrf24_data_config_t))) {
 80003ea:	463b      	mov	r3, r7
 80003ec:	2220      	movs	r2, #32
 80003ee:	4619      	mov	r1, r3
 80003f0:	4813      	ldr	r0, [pc, #76]	@ (8000440 <CargarConfig+0x68>)
 80003f2:	f000 fa3f 	bl	8000874 <EEPROMLoadStruct>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	d10b      	bne.n	8000414 <CargarConfig+0x3c>

		if(0xFF != mrf24_config_s.channel) {
 80003fc:	783b      	ldrb	r3, [r7, #0]
 80003fe:	2bff      	cmp	r3, #255	@ 0xff
 8000400:	d008      	beq.n	8000414 <CargarConfig+0x3c>

			if(CARGA_ERR == SetMRF24Config(&mrf24_config_s))
 8000402:	463b      	mov	r3, r7
 8000404:	4618      	mov	r0, r3
 8000406:	f000 f821 	bl	800044c <SetMRF24Config>
 800040a:	4603      	mov	r3, r0
 800040c:	2b02      	cmp	r3, #2
 800040e:	d101      	bne.n	8000414 <CargarConfig+0x3c>
				return CARGA_ERR;
 8000410:	2302      	movs	r3, #2
 8000412:	e011      	b.n	8000438 <CargarConfig+0x60>
		}
	}

	if(LOAD_OK != EEPROMLoadStruct(EEPROM_CONFIG_ADDR, &system_config_s, sizeof(system_config_t)))
 8000414:	223c      	movs	r2, #60	@ 0x3c
 8000416:	490b      	ldr	r1, [pc, #44]	@ (8000444 <CargarConfig+0x6c>)
 8000418:	480b      	ldr	r0, [pc, #44]	@ (8000448 <CargarConfig+0x70>)
 800041a:	f000 fa2b 	bl	8000874 <EEPROMLoadStruct>
 800041e:	4603      	mov	r3, r0
 8000420:	2b02      	cmp	r3, #2
 8000422:	d001      	beq.n	8000428 <CargarConfig+0x50>
			return CARGA_ERR;
 8000424:	2302      	movs	r3, #2
 8000426:	e007      	b.n	8000438 <CargarConfig+0x60>

	if(INITIALIZATION_OK != MRF24J40Init())
 8000428:	f002 fd98 	bl	8002f5c <MRF24J40Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b01      	cmp	r3, #1
 8000430:	d001      	beq.n	8000436 <CargarConfig+0x5e>
		return CARGA_ERR;
 8000432:	2302      	movs	r3, #2
 8000434:	e000      	b.n	8000438 <CargarConfig+0x60>
	return CARGA_OK;
 8000436:	2301      	movs	r3, #1
}
 8000438:	4618      	mov	r0, r3
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	0800fc00 	.word	0x0800fc00
 8000444:	20000044 	.word	0x20000044
 8000448:	0800fc40 	.word	0x0800fc40

0800044c <SetMRF24Config>:
 * @param	Puntero a la estructura con la información
 * @retval	Estado de la operación (CARGA_OK, CARGA_ERR).
 * @note	Si alguno de los parámetros no son correctos se informa el error
 * 			para no continuar con el arranque.
 */
sys_state_t SetMRF24Config(mrf24_data_config_t * mrf_info_s) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]

	if(OPERATION_OK != MRF24SetChannel(mrf_info_s->channel))
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f002 fd9b 	bl	8002f94 <MRF24SetChannel>
 800045e:	4603      	mov	r3, r0
 8000460:	2b0a      	cmp	r3, #10
 8000462:	d001      	beq.n	8000468 <SetMRF24Config+0x1c>
		return CARGA_ERR;
 8000464:	2302      	movs	r3, #2
 8000466:	e032      	b.n	80004ce <SetMRF24Config+0x82>

	if(OPERATION_OK != MRF24SetPanId(mrf_info_s->panid))
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	885b      	ldrh	r3, [r3, #2]
 800046c:	4618      	mov	r0, r3
 800046e:	f002 fda9 	bl	8002fc4 <MRF24SetPanId>
 8000472:	4603      	mov	r3, r0
 8000474:	2b0a      	cmp	r3, #10
 8000476:	d001      	beq.n	800047c <SetMRF24Config+0x30>
		return CARGA_ERR;
 8000478:	2302      	movs	r3, #2
 800047a:	e028      	b.n	80004ce <SetMRF24Config+0x82>

	if(OPERATION_OK != MRF24SetAdd(mrf_info_s->address))
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	889b      	ldrh	r3, [r3, #4]
 8000480:	4618      	mov	r0, r3
 8000482:	f002 fdb7 	bl	8002ff4 <MRF24SetAdd>
 8000486:	4603      	mov	r3, r0
 8000488:	2b0a      	cmp	r3, #10
 800048a:	d001      	beq.n	8000490 <SetMRF24Config+0x44>
		return CARGA_ERR;
 800048c:	2302      	movs	r3, #2
 800048e:	e01e      	b.n	80004ce <SetMRF24Config+0x82>

	if(OPERATION_OK != MRF24SetInter(mrf_info_s->intervalo))
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	88db      	ldrh	r3, [r3, #6]
 8000494:	4618      	mov	r0, r3
 8000496:	f002 fdc5 	bl	8003024 <MRF24SetInter>
 800049a:	4603      	mov	r3, r0
 800049c:	2b0a      	cmp	r3, #10
 800049e:	d001      	beq.n	80004a4 <SetMRF24Config+0x58>
		return CARGA_ERR;
 80004a0:	2302      	movs	r3, #2
 80004a2:	e014      	b.n	80004ce <SetMRF24Config+0x82>

	if(OPERATION_OK != MRF24SetMAC(mrf_info_s->mac))
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3308      	adds	r3, #8
 80004a8:	4618      	mov	r0, r3
 80004aa:	f002 fdcd 	bl	8003048 <MRF24SetMAC>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b0a      	cmp	r3, #10
 80004b2:	d001      	beq.n	80004b8 <SetMRF24Config+0x6c>
		return CARGA_ERR;
 80004b4:	2302      	movs	r3, #2
 80004b6:	e00a      	b.n	80004ce <SetMRF24Config+0x82>

	if(OPERATION_OK != MRF24SetSecurityKey(mrf_info_s->security_key))
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3310      	adds	r3, #16
 80004bc:	4618      	mov	r0, r3
 80004be:	f002 fdf1 	bl	80030a4 <MRF24SetSecurityKey>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b0a      	cmp	r3, #10
 80004c6:	d001      	beq.n	80004cc <SetMRF24Config+0x80>
		return CARGA_ERR;
 80004c8:	2302      	movs	r3, #2
 80004ca:	e000      	b.n	80004ce <SetMRF24Config+0x82>
	return CARGA_OK;
 80004cc:	2301      	movs	r3, #1
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <DebounceFSMInit>:
/**
  * @brief  Inicializa las variables de la máuina de estado para la función anti rebote.
  * @param  Puntero a la estructura que contiene las variabes.
  * @retval None
  */
void DebounceFSMInit(debounce_data_t * antirrebote_boton_n) {
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]

	assert_param(antirrebote_boton_n);
	antirrebote_boton_n->estadoActual = BOTON_SIN_CAMBIOS;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2203      	movs	r2, #3
 80004e2:	701a      	strb	r2, [r3, #0]
	DelayInit(&antirrebote_boton_n->delay_anti_rebote, TIEMPO_ANTI_REBOTE);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3304      	adds	r3, #4
 80004e8:	2128      	movs	r1, #40	@ 0x28
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 f86a 	bl	80005c4 <DelayInit>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <DebounceFSMUpdate>:
  * @param  Estado actual - booleano.
  * @retval Devuelvo la información si el botón fue presionado, soltado, sin cambios o si hubo un error.
  * @note	En el enunciado la función no posee parámetros, pero de esta forma independizo totalmente
  * 		el driver del hardware en donde lo implemento.
  */
estado_pulsador_t DebounceFSMUpdate(debounce_data_t * antirrebote_boton_n, bool_t estado_pin) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	70fb      	strb	r3, [r7, #3]

	assert_param(antirrebote_boton_n);

	switch(antirrebote_boton_n->estadoActual) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b03      	cmp	r3, #3
 800050a:	d849      	bhi.n	80005a0 <DebounceFSMUpdate+0xa8>
 800050c:	a201      	add	r2, pc, #4	@ (adr r2, 8000514 <DebounceFSMUpdate+0x1c>)
 800050e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000512:	bf00      	nop
 8000514:	08000525 	.word	0x08000525
 8000518:	08000539 	.word	0x08000539
 800051c:	08000593 	.word	0x08000593
 8000520:	08000569 	.word	0x08000569

		case BUTTON_UP:

			if(!estado_pin)
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	f083 0301 	eor.w	r3, r3, #1
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d03c      	beq.n	80005aa <DebounceFSMUpdate+0xb2>
				antirrebote_boton_n->estadoActual = BUTTON_FALLING;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
			break;
 8000536:	e038      	b.n	80005aa <DebounceFSMUpdate+0xb2>

		case BUTTON_FALLING:

			if(DelayRead(&antirrebote_boton_n->delay_anti_rebote)) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3304      	adds	r3, #4
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f858 	bl	80005f2 <DelayRead>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d032      	beq.n	80005ae <DebounceFSMUpdate+0xb6>

				if(!estado_pin) {
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	f083 0301 	eor.w	r3, r3, #1
 800054e:	b2db      	uxtb	r3, r3
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <DebounceFSMUpdate+0x66>

					antirrebote_boton_n->estadoActual = BUTTON_DOWN;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2202      	movs	r2, #2
 8000558:	701a      	strb	r2, [r3, #0]
					return PRESIONO_BOTON;
 800055a:	2301      	movs	r3, #1
 800055c:	e02d      	b.n	80005ba <DebounceFSMUpdate+0xc2>
				} else {

					antirrebote_boton_n->estadoActual = BUTTON_UP;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
					return RUIDO;
 8000564:	2304      	movs	r3, #4
 8000566:	e028      	b.n	80005ba <DebounceFSMUpdate+0xc2>
			}
			break;

		case BUTTON_RAISING:

			if(DelayRead(&antirrebote_boton_n->delay_anti_rebote)) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3304      	adds	r3, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f840 	bl	80005f2 <DelayRead>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d01c      	beq.n	80005b2 <DebounceFSMUpdate+0xba>

				if(estado_pin) {
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d004      	beq.n	8000588 <DebounceFSMUpdate+0x90>

					antirrebote_boton_n->estadoActual = BUTTON_UP;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
					return SUELTO_BOTON;
 8000584:	2302      	movs	r3, #2
 8000586:	e018      	b.n	80005ba <DebounceFSMUpdate+0xc2>
				} else {

					antirrebote_boton_n->estadoActual = BUTTON_DOWN;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2202      	movs	r2, #2
 800058c:	701a      	strb	r2, [r3, #0]
					return RUIDO;
 800058e:	2304      	movs	r3, #4
 8000590:	e013      	b.n	80005ba <DebounceFSMUpdate+0xc2>
			}
			break;

		case BUTTON_DOWN:

			if(estado_pin)
 8000592:	78fb      	ldrb	r3, [r7, #3]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00e      	beq.n	80005b6 <DebounceFSMUpdate+0xbe>
				antirrebote_boton_n->estadoActual = BUTTON_RAISING;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2203      	movs	r2, #3
 800059c:	701a      	strb	r2, [r3, #0]
			break;
 800059e:	e00a      	b.n	80005b6 <DebounceFSMUpdate+0xbe>

		default:

			DebounceFSMInit(antirrebote_boton_n);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff ff98 	bl	80004d6 <DebounceFSMInit>
			return ERROR_ANTI_REBOTE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	e007      	b.n	80005ba <DebounceFSMUpdate+0xc2>
			break;
 80005aa:	bf00      	nop
 80005ac:	e004      	b.n	80005b8 <DebounceFSMUpdate+0xc0>
			break;
 80005ae:	bf00      	nop
 80005b0:	e002      	b.n	80005b8 <DebounceFSMUpdate+0xc0>
			break;
 80005b2:	bf00      	nop
 80005b4:	e000      	b.n	80005b8 <DebounceFSMUpdate+0xc0>
			break;
 80005b6:	bf00      	nop
	}
	return BOTON_SIN_CAMBIOS;
 80005b8:	2303      	movs	r3, #3
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop

080005c4 <DelayInit>:
  * @brief  Inicializa el delay no bloqueante.
  * @param  Puntero a la estructura con las variables.
  * @param  Duración del delay.
  * @retval None
  */
void DelayInit(delayNoBloqueanteData_t * delay, tick_t duration) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]

	if(delay == NULL || duration == 0)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <DelayInit+0x16>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <DelayInit+0x1a>
		Error_Handler();
 80005da:	f000 fb7b 	bl	8000cd4 <Error_Handler>
	delay->duration = duration;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	721a      	strb	r2, [r3, #8]
	return;
 80005ea:	bf00      	nop
}
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <DelayRead>:
/**
  * @brief  Obtengo el estado del delay.
  * @param  Puntero a la estructura con las variables.
  * @retval Estado del delay (contando / tiempo cumplido).
  */
bool_t DelayRead(delayNoBloqueanteData_t * delay) {
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]

	if(delay == NULL)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d101      	bne.n	8000604 <DelayRead+0x12>
		Error_Handler();
 8000600:	f000 fb68 	bl	8000cd4 <Error_Handler>

	if(DelayIsRunning(delay) == false) {
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f833 	bl	8000670 <DelayIsRunning>
 800060a:	4603      	mov	r3, r0
 800060c:	f083 0301 	eor.w	r3, r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d008      	beq.n	8000628 <DelayRead+0x36>

		delay->startTime = HAL_GetTick();
 8000616:	f000 fcab 	bl	8000f70 <HAL_GetTick>
 800061a:	4602      	mov	r2, r0
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2201      	movs	r2, #1
 8000624:	721a      	strb	r2, [r3, #8]
 8000626:	e00e      	b.n	8000646 <DelayRead+0x54>
	} else {

		if((HAL_GetTick() - delay->startTime) >= delay->duration) {
 8000628:	f000 fca2 	bl	8000f70 <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	1ad2      	subs	r2, r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	429a      	cmp	r2, r3
 800063a:	d304      	bcc.n	8000646 <DelayRead+0x54>

			delay->running = false;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	721a      	strb	r2, [r3, #8]
			return true;
 8000642:	2301      	movs	r3, #1
 8000644:	e000      	b.n	8000648 <DelayRead+0x56>
		}
	}
	return false;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <DelayReset>:
/**
  * @brief  Reseteo la cuenta del tiempo.
  * @param  Puntero a la estructura con las variables.
  * @retval None
  */
void DelayReset( delayNoBloqueanteData_t * delay) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

	delay->startTime = HAL_GetTick();
 8000658:	f000 fc8a 	bl	8000f70 <HAL_GetTick>
 800065c:	4602      	mov	r2, r0
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
	delay->running = true;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2201      	movs	r2, #1
 8000666:	721a      	strb	r2, [r3, #8]
	return;
 8000668:	bf00      	nop
}
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <DelayIsRunning>:
  * @retval Estado del delay (contando / tiempo cumplido).
  * @note	En el trabajo práctico la define como función pública, pero para mejorar
  * 		el encapsulamiento la defino como privada ya que solo se utiliza en el
  * 		ámbito de este archivo.
  */
static bool_t DelayIsRunning(delayNoBloqueanteData_t * delay) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

	if(delay == NULL)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <DelayIsRunning+0x12>
		Error_Handler();
 800067e:	f000 fb29 	bl	8000cd4 <Error_Handler>
	return delay->running;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	7a1b      	ldrb	r3, [r3, #8]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <EEPROMSaveStruct>:
 * 			la estructura que no quiero reemplazar ya que para guardar
 * 			primero debo borrar la página completa.
 */
eeprom_state_t EEPROMSaveStruct(eeprom_mem_t mem_addr,
								void *p_info_s,
								size_t info_size) {
 8000690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000694:	b0bd      	sub	sp, #244	@ 0xf4
 8000696:	af00      	add	r7, sp, #0
 8000698:	60f8      	str	r0, [r7, #12]
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]

	if(FLASH_PAGE_SIZE < sizeof(eeprom_data_t))
		return SAVE_ERR;

	if(NULL == p_info_s)
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <EEPROMSaveStruct+0x18>
		return SAVE_ERR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	e0dc      	b.n	8000862 <EEPROMSaveStruct+0x1d2>
	eeprom_data_t bloque_actual = {0};
 80006a8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006ac:	225c      	movs	r2, #92	@ 0x5c
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 ff29 	bl	8003508 <memset>

	switch(mem_addr) {
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4a6c      	ldr	r2, [pc, #432]	@ (800086c <EEPROMSaveStruct+0x1dc>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d004      	beq.n	80006c8 <EEPROMSaveStruct+0x38>
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4a6b      	ldr	r2, [pc, #428]	@ (8000870 <EEPROMSaveStruct+0x1e0>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d01a      	beq.n	80006fc <EEPROMSaveStruct+0x6c>
 80006c6:	e042      	b.n	800074e <EEPROMSaveStruct+0xbe>

		case EEPROM_MRF24_ADDR:

            if(info_size != sizeof(mrf24_data_config_t))
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b20      	cmp	r3, #32
 80006cc:	d001      	beq.n	80006d2 <EEPROMSaveStruct+0x42>
            	return SAVE_ERR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e0c7      	b.n	8000862 <EEPROMSaveStruct+0x1d2>

            if(LOAD_OK != EEPROMLoadStruct(EEPROM_CONFIG_ADDR, &bloque_actual.system, sizeof(system_config_t)))
 80006d2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006d6:	3320      	adds	r3, #32
 80006d8:	223c      	movs	r2, #60	@ 0x3c
 80006da:	4619      	mov	r1, r3
 80006dc:	4864      	ldr	r0, [pc, #400]	@ (8000870 <EEPROMSaveStruct+0x1e0>)
 80006de:	f000 f8c9 	bl	8000874 <EEPROMLoadStruct>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d001      	beq.n	80006ec <EEPROMSaveStruct+0x5c>
            	return SAVE_ERR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	e0ba      	b.n	8000862 <EEPROMSaveStruct+0x1d2>
            memcpy(&bloque_actual.mrf24, p_info_s, sizeof(mrf24_data_config_t));
 80006ec:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006f0:	2220      	movs	r2, #32
 80006f2:	68b9      	ldr	r1, [r7, #8]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 ff33 	bl	8003560 <memcpy>
            break;
 80006fa:	e02a      	b.n	8000752 <EEPROMSaveStruct+0xc2>
		case EEPROM_CONFIG_ADDR:

            if(info_size != sizeof(system_config_t))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b3c      	cmp	r3, #60	@ 0x3c
 8000700:	d001      	beq.n	8000706 <EEPROMSaveStruct+0x76>
            	return SAVE_ERR;
 8000702:	2301      	movs	r3, #1
 8000704:	e0ad      	b.n	8000862 <EEPROMSaveStruct+0x1d2>

            if(LOAD_OK != EEPROMLoadStruct(EEPROM_MRF24_ADDR, &bloque_actual.mrf24, sizeof(mrf24_data_config_t)))
 8000706:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800070a:	2220      	movs	r2, #32
 800070c:	4619      	mov	r1, r3
 800070e:	4857      	ldr	r0, [pc, #348]	@ (800086c <EEPROMSaveStruct+0x1dc>)
 8000710:	f000 f8b0 	bl	8000874 <EEPROMLoadStruct>
 8000714:	4603      	mov	r3, r0
 8000716:	2b02      	cmp	r3, #2
 8000718:	d001      	beq.n	800071e <EEPROMSaveStruct+0x8e>
            	return SAVE_ERR;
 800071a:	2301      	movs	r3, #1
 800071c:	e0a1      	b.n	8000862 <EEPROMSaveStruct+0x1d2>
            memcpy(&bloque_actual.system, p_info_s, sizeof(system_config_t));
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	461c      	mov	r4, r3
 8000722:	f107 06a0 	add.w	r6, r7, #160	@ 0xa0
 8000726:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800072a:	4635      	mov	r5, r6
 800072c:	4623      	mov	r3, r4
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	6859      	ldr	r1, [r3, #4]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000738:	3410      	adds	r4, #16
 800073a:	3610      	adds	r6, #16
 800073c:	4564      	cmp	r4, ip
 800073e:	d1f4      	bne.n	800072a <EEPROMSaveStruct+0x9a>
 8000740:	4633      	mov	r3, r6
 8000742:	4622      	mov	r2, r4
 8000744:	6810      	ldr	r0, [r2, #0]
 8000746:	6851      	ldr	r1, [r2, #4]
 8000748:	6892      	ldr	r2, [r2, #8]
 800074a:	c307      	stmia	r3!, {r0, r1, r2}
            break;
 800074c:	e001      	b.n	8000752 <EEPROMSaveStruct+0xc2>
		default:
			return SAVE_ERR;
 800074e:	2301      	movs	r3, #1
 8000750:	e087      	b.n	8000862 <EEPROMSaveStruct+0x1d2>
	}
	HAL_StatusTypeDef status = HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

    uint32_t page_start = mem_addr & ~(FLASH_PAGE_SIZE - 1);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800075e:	f023 0303 	bic.w	r3, r3, #3
 8000762:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000766:	b672      	cpsid	i
}
 8000768:	bf00      	nop
    __disable_irq();
    HAL_FLASH_Unlock();
 800076a:	f000 fd83 	bl	8001274 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef erase = {0};
 800076e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
    uint32_t pageError = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000780:	2300      	movs	r3, #0
 8000782:	673b      	str	r3, [r7, #112]	@ 0x70
    erase.PageAddress = page_start;
 8000784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000788:	67bb      	str	r3, [r7, #120]	@ 0x78
    erase.NbPages = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    if(HAL_OK != HAL_FLASHEx_Erase(&erase, &pageError)) {
 800078e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8000792:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fe53 	bl	8001444 <HAL_FLASHEx_Erase>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d005      	beq.n	80007b0 <EEPROMSaveStruct+0x120>

        HAL_FLASH_Lock();
 80007a4:	f000 fd8c 	bl	80012c0 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80007a8:	b662      	cpsie	i
}
 80007aa:	bf00      	nop
        __enable_irq();
        return SAVE_ERR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e058      	b.n	8000862 <EEPROMSaveStruct+0x1d2>
    }
    const uint32_t *p_data32 = (const uint32_t*)&bloque_actual;
 80007b0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80007b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    uint32_t address = page_start;
 80007b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80007bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

    for(uint32_t i = 0; i < (sizeof(eeprom_data_t) + 3u) / 4u; i++) {
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80007c6:	e021      	b.n	800080c <EEPROMSaveStruct+0x17c>

        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, p_data32[i]);
 80007c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80007d2:	4413      	add	r3, r2
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2200      	movs	r2, #0
 80007d8:	4698      	mov	r8, r3
 80007da:	4691      	mov	r9, r2
 80007dc:	4642      	mov	r2, r8
 80007de:	464b      	mov	r3, r9
 80007e0:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80007e4:	2002      	movs	r0, #2
 80007e6:	f000 fcd5 	bl	8001194 <HAL_FLASH_Program>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

        if(HAL_OK != status)
 80007f0:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10e      	bne.n	8000816 <EEPROMSaveStruct+0x186>
        	break;
        address += 4;
 80007f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80007fc:	3304      	adds	r3, #4
 80007fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    for(uint32_t i = 0; i < (sizeof(eeprom_data_t) + 3u) / 4u; i++) {
 8000802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000806:	3301      	adds	r3, #1
 8000808:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800080c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000810:	2b16      	cmp	r3, #22
 8000812:	d9d9      	bls.n	80007c8 <EEPROMSaveStruct+0x138>
 8000814:	e000      	b.n	8000818 <EEPROMSaveStruct+0x188>
        	break;
 8000816:	bf00      	nop
    }
    HAL_FLASH_Lock();
 8000818:	f000 fd52 	bl	80012c0 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800081c:	b662      	cpsie	i
}
 800081e:	bf00      	nop
    __enable_irq();
	eeprom_data_t verify = {0};
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	225c      	movs	r2, #92	@ 0x5c
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fe6d 	bl	8003508 <memset>
	memcpy(&verify, (const void*)page_start, sizeof(verify));
 800082e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	225c      	movs	r2, #92	@ 0x5c
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fe91 	bl	8003560 <memcpy>
	if(HAL_OK != status || memcmp(&verify, &bloque_actual, sizeof(verify)))
 800083e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8000842:	2b00      	cmp	r3, #0
 8000844:	d10a      	bne.n	800085c <EEPROMSaveStruct+0x1cc>
 8000846:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	225c      	movs	r2, #92	@ 0x5c
 8000850:	4618      	mov	r0, r3
 8000852:	f002 fe49 	bl	80034e8 <memcmp>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <EEPROMSaveStruct+0x1d0>
		return SAVE_ERR;
 800085c:	2301      	movs	r3, #1
 800085e:	e000      	b.n	8000862 <EEPROMSaveStruct+0x1d2>
    return SAVE_OK;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	37f4      	adds	r7, #244	@ 0xf4
 8000866:	46bd      	mov	sp, r7
 8000868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800086c:	0800fc00 	.word	0x0800fc00
 8000870:	0800fc40 	.word	0x0800fc40

08000874 <EEPROMLoadStruct>:
 * @retval Estado de la operación (LOAD_OK, LOAD_ERR).
 * @note
 */
eeprom_state_t EEPROMLoadStruct(eeprom_mem_t mem_addr,
						  	  	void * p_info_s,
								size_t info_size) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]

	if(NULL == p_info_s || VACIO == info_size)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <EEPROMLoadStruct+0x18>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <EEPROMLoadStruct+0x1c>
		return LOAD_ERR;
 800088c:	2303      	movs	r3, #3
 800088e:	e01c      	b.n	80008ca <EEPROMLoadStruct+0x56>

	switch(mem_addr) {
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4a10      	ldr	r2, [pc, #64]	@ (80008d4 <EEPROMLoadStruct+0x60>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d004      	beq.n	80008a2 <EEPROMLoadStruct+0x2e>
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4a0f      	ldr	r2, [pc, #60]	@ (80008d8 <EEPROMLoadStruct+0x64>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d007      	beq.n	80008b0 <EEPROMLoadStruct+0x3c>
 80008a0:	e010      	b.n	80008c4 <EEPROMLoadStruct+0x50>

		case EEPROM_MRF24_ADDR:
			memcpy(p_info_s, (const void*)mem_addr, info_size);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4619      	mov	r1, r3
 80008a8:	68b8      	ldr	r0, [r7, #8]
 80008aa:	f002 fe59 	bl	8003560 <memcpy>
            break;
 80008ae:	e00b      	b.n	80008c8 <EEPROMLoadStruct+0x54>
		case EEPROM_CONFIG_ADDR:
			size_t mem_offset = mem_addr + sizeof(mrf24_data_config_t);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	3320      	adds	r3, #32
 80008b4:	617b      	str	r3, [r7, #20]
			memcpy(p_info_s, (const void*) mem_offset, info_size);
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	4619      	mov	r1, r3
 80008bc:	68b8      	ldr	r0, [r7, #8]
 80008be:	f002 fe4f 	bl	8003560 <memcpy>
            break;
 80008c2:	e001      	b.n	80008c8 <EEPROMLoadStruct+0x54>
		default:
			return LOAD_ERR;
 80008c4:	2303      	movs	r3, #3
 80008c6:	e000      	b.n	80008ca <EEPROMLoadStruct+0x56>
	}
	return LOAD_OK;
 80008c8:	2302      	movs	r3, #2
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	0800fc00 	.word	0x0800fc00
 80008d8:	0800fc40 	.word	0x0800fc40

080008dc <SetLed>:
 * @brief   Wrapper para escribir en el GPIO.
 * @param   Led al que voy a escribir.
 * @param   Valor a escribir.
 * @retval  None.
 */
void SetLed(color_leds color, estado_leds_t estado) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	460a      	mov	r2, r1
 80008e6:	71fb      	strb	r3, [r7, #7]
 80008e8:	4613      	mov	r3, r2
 80008ea:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(led[color].puerto, led[color].pin, estado);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <SetLed+0x34>)
 80008f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a06      	ldr	r2, [pc, #24]	@ (8000910 <SetLed+0x34>)
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	4413      	add	r3, r2
 80008fc:	889b      	ldrh	r3, [r3, #4]
 80008fe:	79ba      	ldrb	r2, [r7, #6]
 8000900:	4619      	mov	r1, r3
 8000902:	f000 ffe2 	bl	80018ca <HAL_GPIO_WritePin>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000000 	.word	0x20000000

08000914 <ToggleLed>:
/**
 * @brief   Wrapper para hacer un toggle en el GPIO.
 * @param   Led al que voy a escribir.
 * @retval  None.
 */
void ToggleLed(color_leds color) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_TogglePin(led[color].puerto, led[color].pin);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4a07      	ldr	r2, [pc, #28]	@ (8000940 <ToggleLed+0x2c>)
 8000922:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	4905      	ldr	r1, [pc, #20]	@ (8000940 <ToggleLed+0x2c>)
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	440b      	add	r3, r1
 800092e:	889b      	ldrh	r3, [r3, #4]
 8000930:	4619      	mov	r1, r3
 8000932:	4610      	mov	r0, r2
 8000934:	f000 ffe1 	bl	80018fa <HAL_GPIO_TogglePin>
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000000 	.word	0x20000000

08000944 <bucle>:
static debounce_data_t boton1;

/* Prototipo de funciones privadas -------------------------------------------*/
static void CheckBoton(void);

void bucle(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

	SetLed(VERDE, LED_APAGADO);
 800094a:	2101      	movs	r1, #1
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff ffc5 	bl	80008dc <SetLed>
	SetLed(AMARILLO, LED_APAGADO);
 8000952:	2101      	movs	r1, #1
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ffc1 	bl	80008dc <SetLed>
	SetLed(ROJO, LED_APAGADO);
 800095a:	2101      	movs	r1, #1
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff ffbd 	bl	80008dc <SetLed>

	if(SETUP_FAIL == ModoSetup())
 8000962:	f7ff fbf3 	bl	800014c <ModoSetup>
 8000966:	4603      	mov	r3, r0
 8000968:	2b03      	cmp	r3, #3
 800096a:	d101      	bne.n	8000970 <bucle+0x2c>
		Error_Handler();
 800096c:	f000 f9b2 	bl	8000cd4 <Error_Handler>

	if(CARGA_ERR == CargarConfig())
 8000970:	f7ff fd32 	bl	80003d8 <CargarConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b02      	cmp	r3, #2
 8000978:	d101      	bne.n	800097e <bucle+0x3a>
		Error_Handler();
 800097a:	f000 f9ab 	bl	8000cd4 <Error_Handler>

	DebounceFSMInit(&boton1);
 800097e:	4819      	ldr	r0, [pc, #100]	@ (80009e4 <bucle+0xa0>)
 8000980:	f7ff fda9 	bl	80004d6 <DebounceFSMInit>
	mrf24_data_in_t * mrf24_data_in;

	while(1) {

		CheckBoton();
 8000984:	f000 f834 	bl	80009f0 <CheckBoton>

		if(MRF24IsNewMsg() == MSG_PRESENT) {
 8000988:	f002 fc96 	bl	80032b8 <MRF24IsNewMsg>
 800098c:	4603      	mov	r3, r0
 800098e:	2b04      	cmp	r3, #4
 8000990:	d1f8      	bne.n	8000984 <bucle+0x40>

			if(MRF24ReciboPaquete() == MSG_READ) {
 8000992:	f002 fca9 	bl	80032e8 <MRF24ReciboPaquete>
 8000996:	4603      	mov	r3, r0
 8000998:	2b05      	cmp	r3, #5
 800099a:	d11f      	bne.n	80009dc <bucle+0x98>

				mrf24_data_in = MRF24GetDataIn();
 800099c:	f002 fcfe 	bl	800339c <MRF24GetDataIn>
 80009a0:	6078      	str	r0, [r7, #4]

				if(!memcmp(mrf24_data_in->buffer, "CMD:PLV", 7))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3305      	adds	r3, #5
 80009a6:	2207      	movs	r2, #7
 80009a8:	490f      	ldr	r1, [pc, #60]	@ (80009e8 <bucle+0xa4>)
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fd9c 	bl	80034e8 <memcmp>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d103      	bne.n	80009be <bucle+0x7a>
					SetLed(VERDE, LED_PRENDIDO);
 80009b6:	2100      	movs	r1, #0
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff ff8f 	bl	80008dc <SetLed>
				if(!memcmp(mrf24_data_in->buffer, "CMD:ALV", 7))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3305      	adds	r3, #5
 80009c2:	2207      	movs	r2, #7
 80009c4:	4909      	ldr	r1, [pc, #36]	@ (80009ec <bucle+0xa8>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fd8e 	bl	80034e8 <memcmp>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d1d8      	bne.n	8000984 <bucle+0x40>
					SetLed(VERDE, LED_APAGADO);
 80009d2:	2101      	movs	r1, #1
 80009d4:	2000      	movs	r0, #0
 80009d6:	f7ff ff81 	bl	80008dc <SetLed>
 80009da:	e7d3      	b.n	8000984 <bucle+0x40>
			} else {

				ToggleLed(AMARILLO);
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff ff99 	bl	8000914 <ToggleLed>
		CheckBoton();
 80009e2:	e7cf      	b.n	8000984 <bucle+0x40>
 80009e4:	20000080 	.word	0x20000080
 80009e8:	080035c4 	.word	0x080035c4
 80009ec:	080035cc 	.word	0x080035cc

080009f0 <CheckBoton>:
/**
  * @brief  Manejo de las pulsaciones del botón
  * @param	None.
  * @retval
  */
static void CheckBoton(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0a2      	sub	sp, #136	@ 0x88
 80009f4:	af00      	add	r7, sp, #0

	mrf24_data_out_t data_out_s;
	data_out_s.dest_address = LOW_END_ADDR;
 80009f6:	f241 1312 	movw	r3, #4370	@ 0x1112
 80009fa:	807b      	strh	r3, [r7, #2]
	data_out_s.dest_panid = 0x1234;
 80009fc:	f241 2334 	movw	r3, #4660	@ 0x1234
 8000a00:	803b      	strh	r3, [r7, #0]
	data_out_s.origin_address = 0x1111;
 8000a02:	f241 1311 	movw	r3, #4369	@ 0x1111
 8000a06:	80bb      	strh	r3, [r7, #4]

	switch(DebounceFSMUpdate(&boton1, HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin))) {
 8000a08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a0c:	481e      	ldr	r0, [pc, #120]	@ (8000a88 <CheckBoton+0x98>)
 8000a0e:	f000 ff45 	bl	800189c <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bf14      	ite	ne
 8000a18:	2301      	movne	r3, #1
 8000a1a:	2300      	moveq	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481a      	ldr	r0, [pc, #104]	@ (8000a8c <CheckBoton+0x9c>)
 8000a22:	f7ff fd69 	bl	80004f8 <DebounceFSMUpdate>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d002      	beq.n	8000a32 <CheckBoton+0x42>
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d013      	beq.n	8000a58 <CheckBoton+0x68>
			data_out_s.buffer_size = strlen("CMD:PLA");
			MRF24TransmitirDato(&data_out_s);
			break;
		default:
	}
}
 8000a30:	e025      	b.n	8000a7e <CheckBoton+0x8e>
			ToggleLed(ROJO);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff ff6e 	bl	8000914 <ToggleLed>
			strcpy(data_out_s.buffer, "CMD:ALA"); // acá iría memcpy
 8000a38:	463b      	mov	r3, r7
 8000a3a:	3306      	adds	r3, #6
 8000a3c:	4914      	ldr	r1, [pc, #80]	@ (8000a90 <CheckBoton+0xa0>)
 8000a3e:	461a      	mov	r2, r3
 8000a40:	460b      	mov	r3, r1
 8000a42:	cb03      	ldmia	r3!, {r0, r1}
 8000a44:	6010      	str	r0, [r2, #0]
 8000a46:	6051      	str	r1, [r2, #4]
			data_out_s.buffer_size = strlen("CMD:ALA");
 8000a48:	2307      	movs	r3, #7
 8000a4a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			MRF24TransmitirDato(&data_out_s);
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fb59 	bl	8003108 <MRF24TransmitirDato>
			break;
 8000a56:	e012      	b.n	8000a7e <CheckBoton+0x8e>
			ToggleLed(ROJO);
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f7ff ff5b 	bl	8000914 <ToggleLed>
			strcpy(data_out_s.buffer, "CMD:PLA");
 8000a5e:	463b      	mov	r3, r7
 8000a60:	3306      	adds	r3, #6
 8000a62:	490c      	ldr	r1, [pc, #48]	@ (8000a94 <CheckBoton+0xa4>)
 8000a64:	461a      	mov	r2, r3
 8000a66:	460b      	mov	r3, r1
 8000a68:	cb03      	ldmia	r3!, {r0, r1}
 8000a6a:	6010      	str	r0, [r2, #0]
 8000a6c:	6051      	str	r1, [r2, #4]
			data_out_s.buffer_size = strlen("CMD:PLA");
 8000a6e:	2307      	movs	r3, #7
 8000a70:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			MRF24TransmitirDato(&data_out_s);
 8000a74:	463b      	mov	r3, r7
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fb46 	bl	8003108 <MRF24TransmitirDato>
			break;
 8000a7c:	bf00      	nop
}
 8000a7e:	bf00      	nop
 8000a80:	3788      	adds	r7, #136	@ 0x88
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40010c00 	.word	0x40010c00
 8000a8c:	20000080 	.word	0x20000080
 8000a90:	080035d4 	.word	0x080035d4
 8000a94:	080035dc 	.word	0x080035dc

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f000 fa10 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f808 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f000 f876 	bl	8000b94 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000aa8:	f000 f83e 	bl	8000b28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  bucle();
 8000aac:	f7ff ff4a 	bl	8000944 <bucle>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <main+0x18>

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	@ 0x40
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0318 	add.w	r3, r7, #24
 8000abe:	2228      	movs	r2, #40	@ 0x28
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fd20 	bl	8003508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ada:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ade:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 ff1f 	bl	800192c <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000af4:	f000 f8ee 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000afc:	2301      	movs	r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 f98d 	bl	8001e30 <HAL_RCC_ClockConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000b1c:	f000 f8da 	bl	8000cd4 <Error_Handler>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3740      	adds	r7, #64	@ 0x40
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b2e:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <MX_SPI1_Init+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b74:	220a      	movs	r2, #10
 8000b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <MX_SPI1_Init+0x64>)
 8000b7a:	f001 fab5 	bl	80020e8 <HAL_SPI_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b84:	f000 f8a6 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000090 	.word	0x20000090
 8000b90:	40013000 	.word	0x40013000

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba8:	4b46      	ldr	r3, [pc, #280]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a45      	ldr	r2, [pc, #276]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000bae:	f043 0310 	orr.w	r3, r3, #16
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b43      	ldr	r3, [pc, #268]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0310 	and.w	r3, r3, #16
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc0:	4b40      	ldr	r3, [pc, #256]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a3f      	ldr	r2, [pc, #252]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000bc6:	f043 0320 	orr.w	r3, r3, #32
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a39      	ldr	r2, [pc, #228]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b37      	ldr	r3, [pc, #220]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	4b34      	ldr	r3, [pc, #208]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a33      	ldr	r2, [pc, #204]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b31      	ldr	r3, [pc, #196]	@ (8000cc4 <MX_GPIO_Init+0x130>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0308 	and.w	r3, r3, #8
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0e:	482e      	ldr	r0, [pc, #184]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000c10:	f000 fe5b 	bl	80018ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000c1a:	482c      	ldr	r0, [pc, #176]	@ (8000ccc <MX_GPIO_Init+0x138>)
 8000c1c:	f000 fe55 	bl	80018ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MRF24_CS_Pin|MRF24_RESET_Pin|MRF24_WAKE_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000c26:	482a      	ldr	r0, [pc, #168]	@ (8000cd0 <MX_GPIO_Init+0x13c>)
 8000c28:	f000 fe4f 	bl	80018ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BOARD_Pin */
  GPIO_InitStruct.Pin = LED_BOARD_Pin;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BOARD_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4619      	mov	r1, r3
 8000c44:	4820      	ldr	r0, [pc, #128]	@ (8000cc8 <MX_GPIO_Init+0x134>)
 8000c46:	f000 fca5 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_VERDE_Pin LED_AMARILLO_Pin LED_ROJO_Pin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin;
 8000c4a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	481a      	ldr	r0, [pc, #104]	@ (8000ccc <MX_GPIO_Init+0x138>)
 8000c64:	f000 fc96 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000c68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4813      	ldr	r0, [pc, #76]	@ (8000ccc <MX_GPIO_Init+0x138>)
 8000c7e:	f000 fc89 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : MRF24_CS_Pin MRF24_RESET_Pin MRF24_WAKE_Pin */
  GPIO_InitStruct.Pin = MRF24_CS_Pin|MRF24_RESET_Pin|MRF24_WAKE_Pin;
 8000c82:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <MX_GPIO_Init+0x13c>)
 8000c9c:	f000 fc7a 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : MRF24_INT_Pin */
  GPIO_InitStruct.Pin = MRF24_INT_Pin;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MRF24_INT_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <MX_GPIO_Init+0x13c>)
 8000cb6:	f000 fc6d 	bl	8001594 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cba:	bf00      	nop
 8000cbc:	3720      	adds	r7, #32
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, LED_PRENDIDO);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce2:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <Error_Handler+0x3c>)
 8000ce4:	f000 fdf1 	bl	80018ca <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, LED_APAGADO);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cee:	4809      	ldr	r0, [pc, #36]	@ (8000d14 <Error_Handler+0x40>)
 8000cf0:	f000 fdeb 	bl	80018ca <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_AMARILLO_GPIO_Port, LED_AMARILLO_Pin, LED_APAGADO);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <Error_Handler+0x40>)
 8000cfc:	f000 fde5 	bl	80018ca <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, LED_APAGADO);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d06:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <Error_Handler+0x40>)
 8000d08:	f000 fddf 	bl	80018ca <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, LED_PRENDIDO);
 8000d0c:	bf00      	nop
 8000d0e:	e7e5      	b.n	8000cdc <Error_Handler+0x8>
 8000d10:	40011000 	.word	0x40011000
 8000d14:	40010c00 	.word	0x40010c00

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_MspInit+0x60>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <HAL_MspInit+0x60>)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000

08000d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a1b      	ldr	r2, [pc, #108]	@ (8000e04 <HAL_SPI_MspInit+0x88>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d12f      	bne.n	8000dfc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <HAL_SPI_MspInit+0x8c>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a19      	ldr	r2, [pc, #100]	@ (8000e08 <HAL_SPI_MspInit+0x8c>)
 8000da2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <HAL_SPI_MspInit+0x8c>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <HAL_SPI_MspInit+0x8c>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <HAL_SPI_MspInit+0x8c>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_SPI_MspInit+0x8c>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dcc:	23a0      	movs	r3, #160	@ 0xa0
 8000dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480b      	ldr	r0, [pc, #44]	@ (8000e0c <HAL_SPI_MspInit+0x90>)
 8000de0:	f000 fbd8 	bl	8001594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000de4:	2340      	movs	r3, #64	@ 0x40
 8000de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <HAL_SPI_MspInit+0x90>)
 8000df8:	f000 fbcc 	bl	8001594 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40013000 	.word	0x40013000
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010800 	.word	0x40010800

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <NMI_Handler+0x4>

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <MemManage_Handler+0x4>

08000e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f874 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff fff8 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e7a:	490c      	ldr	r1, [pc, #48]	@ (8000eac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a09      	ldr	r2, [pc, #36]	@ (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e90:	4c09      	ldr	r4, [pc, #36]	@ (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f002 fb3b 	bl	8003518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea2:	f7ff fdf9 	bl	8000a98 <main>
  bx lr
 8000ea6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000eb0:	08003628 	.word	0x08003628
  ldr r2, =_sbss
 8000eb4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000eb8:	200001bc 	.word	0x200001bc

08000ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_2_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x28>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x28>)
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f92b 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff ff1c 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40022000 	.word	0x40022000

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f935 	bl	800117a <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f90b 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000018 	.word	0x20000018
 8000f44:	20000020 	.word	0x20000020
 8000f48:	2000001c 	.word	0x2000001c

08000f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_IncTick+0x1c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a03      	ldr	r2, [pc, #12]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000020 	.word	0x20000020
 8000f6c:	200000e8 	.word	0x200000e8

08000f70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b02      	ldr	r3, [pc, #8]	@ (8000f80 <HAL_GetTick+0x10>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	200000e8 	.word	0x200000e8

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff fff0 	bl	8000f70 <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffe0 	bl	8000f70 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000020 	.word	0x20000020

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	@ (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	@ 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	@ 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff90 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff49 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff5e 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff90 	bl	8001084 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5f 	bl	8001030 <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffb0 	bl	80010e8 <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011ae:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <HAL_FLASH_Program+0xd8>)
 80011b0:	7e1b      	ldrb	r3, [r3, #24]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_FLASH_Program+0x26>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e054      	b.n	8001264 <HAL_FLASH_Program+0xd0>
 80011ba:	4b2c      	ldr	r3, [pc, #176]	@ (800126c <HAL_FLASH_Program+0xd8>)
 80011bc:	2201      	movs	r2, #1
 80011be:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011c4:	f000 f8a8 	bl	8001318 <FLASH_WaitForLastOperation>
 80011c8:	4603      	mov	r3, r0
 80011ca:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d144      	bne.n	800125c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d102      	bne.n	80011de <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80011d8:	2301      	movs	r3, #1
 80011da:	757b      	strb	r3, [r7, #21]
 80011dc:	e007      	b.n	80011ee <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d102      	bne.n	80011ea <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80011e4:	2302      	movs	r3, #2
 80011e6:	757b      	strb	r3, [r7, #21]
 80011e8:	e001      	b.n	80011ee <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80011ea:	2304      	movs	r3, #4
 80011ec:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	75bb      	strb	r3, [r7, #22]
 80011f2:	e02d      	b.n	8001250 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80011f4:	7dbb      	ldrb	r3, [r7, #22]
 80011f6:	005a      	lsls	r2, r3, #1
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	eb02 0c03 	add.w	ip, r2, r3
 80011fe:	7dbb      	ldrb	r3, [r7, #22]
 8001200:	0119      	lsls	r1, r3, #4
 8001202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001206:	f1c1 0620 	rsb	r6, r1, #32
 800120a:	f1a1 0020 	sub.w	r0, r1, #32
 800120e:	fa22 f401 	lsr.w	r4, r2, r1
 8001212:	fa03 f606 	lsl.w	r6, r3, r6
 8001216:	4334      	orrs	r4, r6
 8001218:	fa23 f000 	lsr.w	r0, r3, r0
 800121c:	4304      	orrs	r4, r0
 800121e:	fa23 f501 	lsr.w	r5, r3, r1
 8001222:	b2a3      	uxth	r3, r4
 8001224:	4619      	mov	r1, r3
 8001226:	4660      	mov	r0, ip
 8001228:	f000 f85a 	bl	80012e0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800122c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001230:	f000 f872 	bl	8001318 <FLASH_WaitForLastOperation>
 8001234:	4603      	mov	r3, r0
 8001236:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001238:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <HAL_FLASH_Program+0xdc>)
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	4a0c      	ldr	r2, [pc, #48]	@ (8001270 <HAL_FLASH_Program+0xdc>)
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d107      	bne.n	800125a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800124a:	7dbb      	ldrb	r3, [r7, #22]
 800124c:	3301      	adds	r3, #1
 800124e:	75bb      	strb	r3, [r7, #22]
 8001250:	7dba      	ldrb	r2, [r7, #22]
 8001252:	7d7b      	ldrb	r3, [r7, #21]
 8001254:	429a      	cmp	r2, r3
 8001256:	d3cd      	bcc.n	80011f4 <HAL_FLASH_Program+0x60>
 8001258:	e000      	b.n	800125c <HAL_FLASH_Program+0xc8>
      {
        break;
 800125a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <HAL_FLASH_Program+0xd8>)
 800125e:	2200      	movs	r2, #0
 8001260:	761a      	strb	r2, [r3, #24]

  return status;
 8001262:	7dfb      	ldrb	r3, [r7, #23]
}
 8001264:	4618      	mov	r0, r3
 8001266:	371c      	adds	r7, #28
 8001268:	46bd      	mov	sp, r7
 800126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800126c:	200000f0 	.word	0x200000f0
 8001270:	40022000 	.word	0x40022000

08001274 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800127e:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <HAL_FLASH_Unlock+0x40>)
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00d      	beq.n	80012a6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_FLASH_Unlock+0x40>)
 800128c:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <HAL_FLASH_Unlock+0x44>)
 800128e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <HAL_FLASH_Unlock+0x40>)
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <HAL_FLASH_Unlock+0x48>)
 8001294:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001296:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <HAL_FLASH_Unlock+0x40>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80012a6:	79fb      	ldrb	r3, [r7, #7]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40022000 	.word	0x40022000
 80012b8:	45670123 	.word	0x45670123
 80012bc:	cdef89ab 	.word	0xcdef89ab

080012c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_FLASH_Lock+0x1c>)
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_FLASH_Lock+0x1c>)
 80012ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000

080012e0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <FLASH_Program_HalfWord+0x30>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <FLASH_Program_HalfWord+0x34>)
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <FLASH_Program_HalfWord+0x34>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	887a      	ldrh	r2, [r7, #2]
 8001302:	801a      	strh	r2, [r3, #0]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	200000f0 	.word	0x200000f0
 8001314:	40022000 	.word	0x40022000

08001318 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff fe26 	bl	8000f70 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001326:	e010      	b.n	800134a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132e:	d00c      	beq.n	800134a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <FLASH_WaitForLastOperation+0x2e>
 8001336:	f7ff fe1b 	bl	8000f70 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	429a      	cmp	r2, r3
 8001344:	d201      	bcs.n	800134a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e025      	b.n	8001396 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <FLASH_WaitForLastOperation+0x88>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1e8      	bne.n	8001328 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001356:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <FLASH_WaitForLastOperation+0x88>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001362:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <FLASH_WaitForLastOperation+0x88>)
 8001364:	2220      	movs	r2, #32
 8001366:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001368:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <FLASH_WaitForLastOperation+0x88>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10b      	bne.n	800138c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <FLASH_WaitForLastOperation+0x88>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <FLASH_WaitForLastOperation+0x88>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800138c:	f000 f80a 	bl	80013a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40022000 	.word	0x40022000

080013a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <FLASH_SetErrorCode+0x98>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80013ba:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <FLASH_SetErrorCode+0x9c>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001440 <FLASH_SetErrorCode+0x9c>)
 80013c4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f043 0310 	orr.w	r3, r3, #16
 80013cc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80013ce:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <FLASH_SetErrorCode+0x98>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <FLASH_SetErrorCode+0x9c>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	4a17      	ldr	r2, [pc, #92]	@ (8001440 <FLASH_SetErrorCode+0x9c>)
 80013e4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80013ee:	4b13      	ldr	r3, [pc, #76]	@ (800143c <FLASH_SetErrorCode+0x98>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <FLASH_SetErrorCode+0x9c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <FLASH_SetErrorCode+0x9c>)
 8001404:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001406:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <FLASH_SetErrorCode+0x98>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <FLASH_SetErrorCode+0x98>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f240 1201 	movw	r2, #257	@ 0x101
 8001418:	4293      	cmp	r3, r2
 800141a:	d106      	bne.n	800142a <FLASH_SetErrorCode+0x86>
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <FLASH_SetErrorCode+0x98>)
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	4a06      	ldr	r2, [pc, #24]	@ (800143c <FLASH_SetErrorCode+0x98>)
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	61d3      	str	r3, [r2, #28]
}  
 8001428:	e002      	b.n	8001430 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800142a:	4a04      	ldr	r2, [pc, #16]	@ (800143c <FLASH_SetErrorCode+0x98>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	60d3      	str	r3, [r2, #12]
}  
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40022000 	.word	0x40022000
 8001440:	200000f0 	.word	0x200000f0

08001444 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001456:	4b2f      	ldr	r3, [pc, #188]	@ (8001514 <HAL_FLASHEx_Erase+0xd0>)
 8001458:	7e1b      	ldrb	r3, [r3, #24]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_FLASHEx_Erase+0x1e>
 800145e:	2302      	movs	r3, #2
 8001460:	e053      	b.n	800150a <HAL_FLASHEx_Erase+0xc6>
 8001462:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <HAL_FLASHEx_Erase+0xd0>)
 8001464:	2201      	movs	r2, #1
 8001466:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d116      	bne.n	800149e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001470:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001474:	f7ff ff50 	bl	8001318 <FLASH_WaitForLastOperation>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d141      	bne.n	8001502 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800147e:	2001      	movs	r0, #1
 8001480:	f000 f84c 	bl	800151c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001484:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001488:	f7ff ff46 	bl	8001318 <FLASH_WaitForLastOperation>
 800148c:	4603      	mov	r3, r0
 800148e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001490:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <HAL_FLASHEx_Erase+0xd4>)
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	4a20      	ldr	r2, [pc, #128]	@ (8001518 <HAL_FLASHEx_Erase+0xd4>)
 8001496:	f023 0304 	bic.w	r3, r3, #4
 800149a:	6113      	str	r3, [r2, #16]
 800149c:	e031      	b.n	8001502 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800149e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014a2:	f7ff ff39 	bl	8001318 <FLASH_WaitForLastOperation>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d12a      	bne.n	8001502 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	f04f 32ff 	mov.w	r2, #4294967295
 80014b2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	e019      	b.n	80014f0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80014bc:	68b8      	ldr	r0, [r7, #8]
 80014be:	f000 f849 	bl	8001554 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014c2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014c6:	f7ff ff27 	bl	8001318 <FLASH_WaitForLastOperation>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_FLASHEx_Erase+0xd4>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	4a11      	ldr	r2, [pc, #68]	@ (8001518 <HAL_FLASHEx_Erase+0xd4>)
 80014d4:	f023 0302 	bic.w	r3, r3, #2
 80014d8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	601a      	str	r2, [r3, #0]
            break;
 80014e6:	e00c      	b.n	8001502 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80014ee:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	029a      	lsls	r2, r3, #10
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	4413      	add	r3, r2
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d3dc      	bcc.n	80014bc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001502:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <HAL_FLASHEx_Erase+0xd0>)
 8001504:	2200      	movs	r2, #0
 8001506:	761a      	strb	r2, [r3, #24]

  return status;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000f0 	.word	0x200000f0
 8001518:	40022000 	.word	0x40022000

0800151c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <FLASH_MassErase+0x30>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <FLASH_MassErase+0x34>)
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	4a08      	ldr	r2, [pc, #32]	@ (8001550 <FLASH_MassErase+0x34>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <FLASH_MassErase+0x34>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <FLASH_MassErase+0x34>)
 800153c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001540:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	200000f0 	.word	0x200000f0
 8001550:	40022000 	.word	0x40022000

08001554 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800155c:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <FLASH_PageErase+0x38>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <FLASH_PageErase+0x3c>)
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <FLASH_PageErase+0x3c>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800156e:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <FLASH_PageErase+0x3c>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <FLASH_PageErase+0x3c>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	4a05      	ldr	r2, [pc, #20]	@ (8001590 <FLASH_PageErase+0x3c>)
 800157a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800157e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200000f0 	.word	0x200000f0
 8001590:	40022000 	.word	0x40022000

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b08b      	sub	sp, #44	@ 0x2c
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	e169      	b.n	800187c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015a8:	2201      	movs	r2, #1
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8158 	bne.w	8001876 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a9a      	ldr	r2, [pc, #616]	@ (8001834 <HAL_GPIO_Init+0x2a0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d05e      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015d0:	4a98      	ldr	r2, [pc, #608]	@ (8001834 <HAL_GPIO_Init+0x2a0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d875      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015d6:	4a98      	ldr	r2, [pc, #608]	@ (8001838 <HAL_GPIO_Init+0x2a4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d058      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015dc:	4a96      	ldr	r2, [pc, #600]	@ (8001838 <HAL_GPIO_Init+0x2a4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d86f      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015e2:	4a96      	ldr	r2, [pc, #600]	@ (800183c <HAL_GPIO_Init+0x2a8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d052      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015e8:	4a94      	ldr	r2, [pc, #592]	@ (800183c <HAL_GPIO_Init+0x2a8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d869      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015ee:	4a94      	ldr	r2, [pc, #592]	@ (8001840 <HAL_GPIO_Init+0x2ac>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d04c      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015f4:	4a92      	ldr	r2, [pc, #584]	@ (8001840 <HAL_GPIO_Init+0x2ac>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d863      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015fa:	4a92      	ldr	r2, [pc, #584]	@ (8001844 <HAL_GPIO_Init+0x2b0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d046      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 8001600:	4a90      	ldr	r2, [pc, #576]	@ (8001844 <HAL_GPIO_Init+0x2b0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d85d      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 8001606:	2b12      	cmp	r3, #18
 8001608:	d82a      	bhi.n	8001660 <HAL_GPIO_Init+0xcc>
 800160a:	2b12      	cmp	r3, #18
 800160c:	d859      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 800160e:	a201      	add	r2, pc, #4	@ (adr r2, 8001614 <HAL_GPIO_Init+0x80>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	0800168f 	.word	0x0800168f
 8001618:	08001669 	.word	0x08001669
 800161c:	0800167b 	.word	0x0800167b
 8001620:	080016bd 	.word	0x080016bd
 8001624:	080016c3 	.word	0x080016c3
 8001628:	080016c3 	.word	0x080016c3
 800162c:	080016c3 	.word	0x080016c3
 8001630:	080016c3 	.word	0x080016c3
 8001634:	080016c3 	.word	0x080016c3
 8001638:	080016c3 	.word	0x080016c3
 800163c:	080016c3 	.word	0x080016c3
 8001640:	080016c3 	.word	0x080016c3
 8001644:	080016c3 	.word	0x080016c3
 8001648:	080016c3 	.word	0x080016c3
 800164c:	080016c3 	.word	0x080016c3
 8001650:	080016c3 	.word	0x080016c3
 8001654:	080016c3 	.word	0x080016c3
 8001658:	08001671 	.word	0x08001671
 800165c:	08001685 	.word	0x08001685
 8001660:	4a79      	ldr	r2, [pc, #484]	@ (8001848 <HAL_GPIO_Init+0x2b4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001666:	e02c      	b.n	80016c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e029      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	3304      	adds	r3, #4
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e024      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	3308      	adds	r3, #8
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e01f      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	330c      	adds	r3, #12
 800168a:	623b      	str	r3, [r7, #32]
          break;
 800168c:	e01a      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001696:	2304      	movs	r3, #4
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e013      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d105      	bne.n	80016b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a4:	2308      	movs	r3, #8
 80016a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	611a      	str	r2, [r3, #16]
          break;
 80016ae:	e009      	b.n	80016c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b0:	2308      	movs	r3, #8
 80016b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	615a      	str	r2, [r3, #20]
          break;
 80016ba:	e003      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e000      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          break;
 80016c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2bff      	cmp	r3, #255	@ 0xff
 80016c8:	d801      	bhi.n	80016ce <HAL_GPIO_Init+0x13a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_Init+0x13e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2bff      	cmp	r3, #255	@ 0xff
 80016d8:	d802      	bhi.n	80016e0 <HAL_GPIO_Init+0x14c>
 80016da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x152>
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	3b08      	subs	r3, #8
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	210f      	movs	r1, #15
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	6a39      	ldr	r1, [r7, #32]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	431a      	orrs	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80b1 	beq.w	8001876 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001714:	4b4d      	ldr	r3, [pc, #308]	@ (800184c <HAL_GPIO_Init+0x2b8>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a4c      	ldr	r2, [pc, #304]	@ (800184c <HAL_GPIO_Init+0x2b8>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b4a      	ldr	r3, [pc, #296]	@ (800184c <HAL_GPIO_Init+0x2b8>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800172c:	4a48      	ldr	r2, [pc, #288]	@ (8001850 <HAL_GPIO_Init+0x2bc>)
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a40      	ldr	r2, [pc, #256]	@ (8001854 <HAL_GPIO_Init+0x2c0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d013      	beq.n	8001780 <HAL_GPIO_Init+0x1ec>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a3f      	ldr	r2, [pc, #252]	@ (8001858 <HAL_GPIO_Init+0x2c4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d00d      	beq.n	800177c <HAL_GPIO_Init+0x1e8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a3e      	ldr	r2, [pc, #248]	@ (800185c <HAL_GPIO_Init+0x2c8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d007      	beq.n	8001778 <HAL_GPIO_Init+0x1e4>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a3d      	ldr	r2, [pc, #244]	@ (8001860 <HAL_GPIO_Init+0x2cc>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d101      	bne.n	8001774 <HAL_GPIO_Init+0x1e0>
 8001770:	2303      	movs	r3, #3
 8001772:	e006      	b.n	8001782 <HAL_GPIO_Init+0x1ee>
 8001774:	2304      	movs	r3, #4
 8001776:	e004      	b.n	8001782 <HAL_GPIO_Init+0x1ee>
 8001778:	2302      	movs	r3, #2
 800177a:	e002      	b.n	8001782 <HAL_GPIO_Init+0x1ee>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_GPIO_Init+0x1ee>
 8001780:	2300      	movs	r3, #0
 8001782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001784:	f002 0203 	and.w	r2, r2, #3
 8001788:	0092      	lsls	r2, r2, #2
 800178a:	4093      	lsls	r3, r2
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001792:	492f      	ldr	r1, [pc, #188]	@ (8001850 <HAL_GPIO_Init+0x2bc>)
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3302      	adds	r3, #2
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	492c      	ldr	r1, [pc, #176]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4928      	ldr	r1, [pc, #160]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017d4:	4b23      	ldr	r3, [pc, #140]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	4922      	ldr	r1, [pc, #136]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60cb      	str	r3, [r1, #12]
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017e2:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	491e      	ldr	r1, [pc, #120]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017fc:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	4918      	ldr	r1, [pc, #96]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800180a:	4b16      	ldr	r3, [pc, #88]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	4914      	ldr	r1, [pc, #80]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 8001814:	4013      	ands	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d021      	beq.n	8001868 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001824:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	490e      	ldr	r1, [pc, #56]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e021      	b.n	8001876 <HAL_GPIO_Init+0x2e2>
 8001832:	bf00      	nop
 8001834:	10320000 	.word	0x10320000
 8001838:	10310000 	.word	0x10310000
 800183c:	10220000 	.word	0x10220000
 8001840:	10210000 	.word	0x10210000
 8001844:	10120000 	.word	0x10120000
 8001848:	10110000 	.word	0x10110000
 800184c:	40021000 	.word	0x40021000
 8001850:	40010000 	.word	0x40010000
 8001854:	40010800 	.word	0x40010800
 8001858:	40010c00 	.word	0x40010c00
 800185c:	40011000 	.word	0x40011000
 8001860:	40011400 	.word	0x40011400
 8001864:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_GPIO_Init+0x304>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	43db      	mvns	r3, r3
 8001870:	4909      	ldr	r1, [pc, #36]	@ (8001898 <HAL_GPIO_Init+0x304>)
 8001872:	4013      	ands	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	3301      	adds	r3, #1
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	f47f ae8e 	bne.w	80015a8 <HAL_GPIO_Init+0x14>
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	372c      	adds	r7, #44	@ 0x2c
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	40010400 	.word	0x40010400

0800189c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d002      	beq.n	80018ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e001      	b.n	80018be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	807b      	strh	r3, [r7, #2]
 80018d6:	4613      	mov	r3, r2
 80018d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018da:	787b      	ldrb	r3, [r7, #1]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e0:	887a      	ldrh	r2, [r7, #2]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e6:	e003      	b.n	80018f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	041a      	lsls	r2, r3, #16
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	611a      	str	r2, [r3, #16]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800190c:	887a      	ldrh	r2, [r7, #2]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	041a      	lsls	r2, r3, #16
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43d9      	mvns	r1, r3
 8001918:	887b      	ldrh	r3, [r7, #2]
 800191a:	400b      	ands	r3, r1
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e272      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 8087 	beq.w	8001a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800194c:	4b92      	ldr	r3, [pc, #584]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b04      	cmp	r3, #4
 8001956:	d00c      	beq.n	8001972 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001958:	4b8f      	ldr	r3, [pc, #572]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d112      	bne.n	800198a <HAL_RCC_OscConfig+0x5e>
 8001964:	4b8c      	ldr	r3, [pc, #560]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001970:	d10b      	bne.n	800198a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001972:	4b89      	ldr	r3, [pc, #548]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d06c      	beq.n	8001a58 <HAL_RCC_OscConfig+0x12c>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d168      	bne.n	8001a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e24c      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x76>
 8001994:	4b80      	ldr	r3, [pc, #512]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a7f      	ldr	r2, [pc, #508]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 800199a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	e02e      	b.n	8001a00 <HAL_RCC_OscConfig+0xd4>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x98>
 80019aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a7a      	ldr	r2, [pc, #488]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b78      	ldr	r3, [pc, #480]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a77      	ldr	r2, [pc, #476]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e01d      	b.n	8001a00 <HAL_RCC_OscConfig+0xd4>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0xbc>
 80019ce:	4b72      	ldr	r3, [pc, #456]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a71      	ldr	r2, [pc, #452]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b6f      	ldr	r3, [pc, #444]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a6e      	ldr	r2, [pc, #440]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0xd4>
 80019e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b68      	ldr	r3, [pc, #416]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a67      	ldr	r2, [pc, #412]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fab2 	bl	8000f70 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff faae 	bl	8000f70 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	@ 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e200      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b5d      	ldr	r3, [pc, #372]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0xe4>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fa9e 	bl	8000f70 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fa9a 	bl	8000f70 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	@ 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1ec      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	4b53      	ldr	r3, [pc, #332]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x10c>
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d063      	beq.n	8001b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a66:	4b4c      	ldr	r3, [pc, #304]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a72:	4b49      	ldr	r3, [pc, #292]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d11c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x18c>
 8001a7e:	4b46      	ldr	r3, [pc, #280]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d116      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	4b43      	ldr	r3, [pc, #268]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x176>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e1c0      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4939      	ldr	r1, [pc, #228]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab6:	e03a      	b.n	8001b2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac0:	4b36      	ldr	r3, [pc, #216]	@ (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fa53 	bl	8000f70 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff fa4f 	bl	8000f70 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1a1      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b2a      	ldr	r3, [pc, #168]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4927      	ldr	r1, [pc, #156]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]
 8001b00:	e015      	b.n	8001b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b02:	4b26      	ldr	r3, [pc, #152]	@ (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff fa32 	bl	8000f70 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b10:	f7ff fa2e 	bl	8000f70 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e180      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d03a      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d019      	beq.n	8001b76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b42:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <HAL_RCC_OscConfig+0x274>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7ff fa12 	bl	8000f70 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff fa0e 	bl	8000f70 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e160      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f000 fa9c 	bl	80020ac <RCC_Delay>
 8001b74:	e01c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_RCC_OscConfig+0x274>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7c:	f7ff f9f8 	bl	8000f70 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b82:	e00f      	b.n	8001ba4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff f9f4 	bl	8000f70 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d908      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e146      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	42420000 	.word	0x42420000
 8001ba0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	4b92      	ldr	r3, [pc, #584]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1e9      	bne.n	8001b84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80a6 	beq.w	8001d0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc2:	4b8b      	ldr	r3, [pc, #556]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10d      	bne.n	8001bea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b88      	ldr	r3, [pc, #544]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a87      	ldr	r2, [pc, #540]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	61d3      	str	r3, [r2, #28]
 8001bda:	4b85      	ldr	r3, [pc, #532]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be6:	2301      	movs	r3, #1
 8001be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bea:	4b82      	ldr	r3, [pc, #520]	@ (8001df4 <HAL_RCC_OscConfig+0x4c8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d118      	bne.n	8001c28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8001df4 <HAL_RCC_OscConfig+0x4c8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8001df4 <HAL_RCC_OscConfig+0x4c8>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c02:	f7ff f9b5 	bl	8000f70 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0a:	f7ff f9b1 	bl	8000f70 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	@ 0x64
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e103      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	4b75      	ldr	r3, [pc, #468]	@ (8001df4 <HAL_RCC_OscConfig+0x4c8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x312>
 8001c30:	4b6f      	ldr	r3, [pc, #444]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a6e      	ldr	r2, [pc, #440]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	e02d      	b.n	8001c9a <HAL_RCC_OscConfig+0x36e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x334>
 8001c46:	4b6a      	ldr	r3, [pc, #424]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	4a69      	ldr	r2, [pc, #420]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	6213      	str	r3, [r2, #32]
 8001c52:	4b67      	ldr	r3, [pc, #412]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4a66      	ldr	r2, [pc, #408]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	f023 0304 	bic.w	r3, r3, #4
 8001c5c:	6213      	str	r3, [r2, #32]
 8001c5e:	e01c      	b.n	8001c9a <HAL_RCC_OscConfig+0x36e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d10c      	bne.n	8001c82 <HAL_RCC_OscConfig+0x356>
 8001c68:	4b61      	ldr	r3, [pc, #388]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4a60      	ldr	r2, [pc, #384]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6213      	str	r3, [r2, #32]
 8001c74:	4b5e      	ldr	r3, [pc, #376]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4a5d      	ldr	r2, [pc, #372]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6213      	str	r3, [r2, #32]
 8001c80:	e00b      	b.n	8001c9a <HAL_RCC_OscConfig+0x36e>
 8001c82:	4b5b      	ldr	r3, [pc, #364]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4a5a      	ldr	r2, [pc, #360]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6213      	str	r3, [r2, #32]
 8001c8e:	4b58      	ldr	r3, [pc, #352]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4a57      	ldr	r2, [pc, #348]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d015      	beq.n	8001cce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff f965 	bl	8000f70 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff f961 	bl	8000f70 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e0b1      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0ee      	beq.n	8001caa <HAL_RCC_OscConfig+0x37e>
 8001ccc:	e014      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7ff f94f 	bl	8000f70 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7ff f94b 	bl	8000f70 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e09b      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cec:	4b40      	ldr	r3, [pc, #256]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ee      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d105      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a3b      	ldr	r2, [pc, #236]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8087 	beq.w	8001e22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d14:	4b36      	ldr	r3, [pc, #216]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d061      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d146      	bne.n	8001db6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d28:	4b33      	ldr	r3, [pc, #204]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f91f 	bl	8000f70 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7ff f91b 	bl	8000f70 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e06d      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d48:	4b29      	ldr	r3, [pc, #164]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d5c:	d108      	bne.n	8001d70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d5e:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	4921      	ldr	r1, [pc, #132]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d70:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a19      	ldr	r1, [r3, #32]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	430b      	orrs	r3, r1
 8001d82:	491b      	ldr	r1, [pc, #108]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d88:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f8ef 	bl	8000f70 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7ff f8eb 	bl	8000f70 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e03d      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x46a>
 8001db4:	e035      	b.n	8001e22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <HAL_RCC_OscConfig+0x4cc>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f8d8 	bl	8000f70 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff f8d4 	bl	8000f70 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e026      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x498>
 8001de2:	e01e      	b.n	8001e22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e019      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40007000 	.word	0x40007000
 8001df8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <HAL_RCC_OscConfig+0x500>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000

08001e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0d0      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d910      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b67      	ldr	r3, [pc, #412]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4965      	ldr	r1, [pc, #404]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b63      	ldr	r3, [pc, #396]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0b8      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e8c:	4b59      	ldr	r3, [pc, #356]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a58      	ldr	r2, [pc, #352]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea4:	4b53      	ldr	r3, [pc, #332]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a52      	ldr	r2, [pc, #328]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b50      	ldr	r3, [pc, #320]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	494d      	ldr	r1, [pc, #308]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d040      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	4b47      	ldr	r3, [pc, #284]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d115      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e07f      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	4b41      	ldr	r3, [pc, #260]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e073      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e06b      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0e:	4b39      	ldr	r3, [pc, #228]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f023 0203 	bic.w	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4936      	ldr	r1, [pc, #216]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f20:	f7ff f826 	bl	8000f70 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f28:	f7ff f822 	bl	8000f70 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e053      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 020c 	and.w	r2, r3, #12
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1eb      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f50:	4b27      	ldr	r3, [pc, #156]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d210      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0207 	bic.w	r2, r3, #7
 8001f66:	4922      	ldr	r1, [pc, #136]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e032      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4916      	ldr	r1, [pc, #88]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001faa:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	490e      	ldr	r1, [pc, #56]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fbe:	f000 f821 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	490a      	ldr	r1, [pc, #40]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd0:	5ccb      	ldrb	r3, [r1, r3]
 8001fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd6:	4a09      	ldr	r2, [pc, #36]	@ (8001ffc <HAL_RCC_ClockConfig+0x1cc>)
 8001fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_RCC_ClockConfig+0x1d0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ff84 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	080035e4 	.word	0x080035e4
 8001ffc:	20000018 	.word	0x20000018
 8002000:	2000001c 	.word	0x2000001c

08002004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x94>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b04      	cmp	r3, #4
 800202c:	d002      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x30>
 800202e:	2b08      	cmp	r3, #8
 8002030:	d003      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x36>
 8002032:	e027      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002034:	4b19      	ldr	r3, [pc, #100]	@ (800209c <HAL_RCC_GetSysClockFreq+0x98>)
 8002036:	613b      	str	r3, [r7, #16]
      break;
 8002038:	e027      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	0c9b      	lsrs	r3, r3, #18
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	4a17      	ldr	r2, [pc, #92]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x94>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	0c5b      	lsrs	r3, r3, #17
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	4a11      	ldr	r2, [pc, #68]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <HAL_RCC_GetSysClockFreq+0x98>)
 8002066:	fb03 f202 	mul.w	r2, r3, r2
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e004      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0c      	ldr	r2, [pc, #48]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	613b      	str	r3, [r7, #16]
      break;
 8002082:	e002      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <HAL_RCC_GetSysClockFreq+0x98>)
 8002086:	613b      	str	r3, [r7, #16]
      break;
 8002088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208a:	693b      	ldr	r3, [r7, #16]
}
 800208c:	4618      	mov	r0, r3
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	007a1200 	.word	0x007a1200
 80020a0:	080035f4 	.word	0x080035f4
 80020a4:	08003604 	.word	0x08003604
 80020a8:	003d0900 	.word	0x003d0900

080020ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b4:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <RCC_Delay+0x34>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <RCC_Delay+0x38>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	0a5b      	lsrs	r3, r3, #9
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020c8:	bf00      	nop
  }
  while (Delay --);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	60fa      	str	r2, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f9      	bne.n	80020c8 <RCC_Delay+0x1c>
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	20000018 	.word	0x20000018
 80020e4:	10624dd3 	.word	0x10624dd3

080020e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e076      	b.n	80021e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800210a:	d009      	beq.n	8002120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
 8002112:	e005      	b.n	8002120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe fe1e 	bl	8000d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002156:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a4:	ea42 0103 	orr.w	r1, r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	0c1a      	lsrs	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f002 0204 	and.w	r2, r2, #4
 80021c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002200:	f7fe feb6 	bl	8000f70 <HAL_GetTick>
 8002204:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d001      	beq.n	800221a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002216:	2302      	movs	r3, #2
 8002218:	e12a      	b.n	8002470 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_SPI_Transmit+0x36>
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e122      	b.n	8002470 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_SPI_Transmit+0x48>
 8002234:	2302      	movs	r3, #2
 8002236:	e11b      	b.n	8002470 <HAL_SPI_Transmit+0x280>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2203      	movs	r2, #3
 8002244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002286:	d10f      	bne.n	80022a8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002296:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b2:	2b40      	cmp	r3, #64	@ 0x40
 80022b4:	d007      	beq.n	80022c6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022ce:	d152      	bne.n	8002376 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_SPI_Transmit+0xee>
 80022d8:	8b7b      	ldrh	r3, [r7, #26]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d145      	bne.n	800236a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	881a      	ldrh	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	1c9a      	adds	r2, r3, #2
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002302:	e032      	b.n	800236a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b02      	cmp	r3, #2
 8002310:	d112      	bne.n	8002338 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	881a      	ldrh	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	1c9a      	adds	r2, r3, #2
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002336:	e018      	b.n	800236a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002338:	f7fe fe1a 	bl	8000f70 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d803      	bhi.n	8002350 <HAL_SPI_Transmit+0x160>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d102      	bne.n	8002356 <HAL_SPI_Transmit+0x166>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e082      	b.n	8002470 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1c7      	bne.n	8002304 <HAL_SPI_Transmit+0x114>
 8002374:	e053      	b.n	800241e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_SPI_Transmit+0x194>
 800237e:	8b7b      	ldrh	r3, [r7, #26]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d147      	bne.n	8002414 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	330c      	adds	r3, #12
 800238e:	7812      	ldrb	r2, [r2, #0]
 8002390:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023aa:	e033      	b.n	8002414 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d113      	bne.n	80023e2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	330c      	adds	r3, #12
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023e0:	e018      	b.n	8002414 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e2:	f7fe fdc5 	bl	8000f70 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d803      	bhi.n	80023fa <HAL_SPI_Transmit+0x20a>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d102      	bne.n	8002400 <HAL_SPI_Transmit+0x210>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e02d      	b.n	8002470 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1c6      	bne.n	80023ac <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fbc4 	bl	8002bb0 <SPI_EndRxTxTransaction>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10a      	bne.n	8002452 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800246e:	2300      	movs	r3, #0
  }
}
 8002470:	4618      	mov	r0, r3
 8002472:	3720      	adds	r7, #32
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d001      	beq.n	8002498 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002494:	2302      	movs	r3, #2
 8002496:	e104      	b.n	80026a2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024a0:	d112      	bne.n	80024c8 <HAL_SPI_Receive+0x50>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10e      	bne.n	80024c8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2204      	movs	r2, #4
 80024ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f8f3 	bl	80026aa <HAL_SPI_TransmitReceive>
 80024c4:	4603      	mov	r3, r0
 80024c6:	e0ec      	b.n	80026a2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024c8:	f7fe fd52 	bl	8000f70 <HAL_GetTick>
 80024cc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_SPI_Receive+0x62>
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0e1      	b.n	80026a2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_SPI_Receive+0x74>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e0da      	b.n	80026a2 <HAL_SPI_Receive+0x22a>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2204      	movs	r2, #4
 80024f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800253a:	d10f      	bne.n	800255c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800254a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800255a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002566:	2b40      	cmp	r3, #64	@ 0x40
 8002568:	d007      	beq.n	800257a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d170      	bne.n	8002664 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002582:	e035      	b.n	80025f0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d115      	bne.n	80025be <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f103 020c 	add.w	r2, r3, #12
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259e:	7812      	ldrb	r2, [r2, #0]
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025bc:	e018      	b.n	80025f0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025be:	f7fe fcd7 	bl	8000f70 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d803      	bhi.n	80025d6 <HAL_SPI_Receive+0x15e>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d102      	bne.n	80025dc <HAL_SPI_Receive+0x164>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e058      	b.n	80026a2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1c4      	bne.n	8002584 <HAL_SPI_Receive+0x10c>
 80025fa:	e038      	b.n	800266e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d113      	bne.n	8002632 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002614:	b292      	uxth	r2, r2
 8002616:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261c:	1c9a      	adds	r2, r3, #2
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002630:	e018      	b.n	8002664 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002632:	f7fe fc9d 	bl	8000f70 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d803      	bhi.n	800264a <HAL_SPI_Receive+0x1d2>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d102      	bne.n	8002650 <HAL_SPI_Receive+0x1d8>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e01e      	b.n	80026a2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1c6      	bne.n	80025fc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	6839      	ldr	r1, [r7, #0]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fa4a 	bl	8002b0c <SPI_EndRxTransaction>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2220      	movs	r2, #32
 8002682:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80026a0:	2300      	movs	r3, #0
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b08a      	sub	sp, #40	@ 0x28
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026b8:	2301      	movs	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026bc:	f7fe fc58 	bl	8000f70 <HAL_GetTick>
 80026c0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026c8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026d4:	7ffb      	ldrb	r3, [r7, #31]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d00c      	beq.n	80026f4 <HAL_SPI_TransmitReceive+0x4a>
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026e0:	d106      	bne.n	80026f0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_SPI_TransmitReceive+0x46>
 80026ea:	7ffb      	ldrb	r3, [r7, #31]
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d001      	beq.n	80026f4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80026f0:	2302      	movs	r3, #2
 80026f2:	e17f      	b.n	80029f4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x5c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x5c>
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e174      	b.n	80029f4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x6e>
 8002714:	2302      	movs	r3, #2
 8002716:	e16d      	b.n	80029f4 <HAL_SPI_TransmitReceive+0x34a>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b04      	cmp	r3, #4
 800272a:	d003      	beq.n	8002734 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2205      	movs	r2, #5
 8002730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	887a      	ldrh	r2, [r7, #2]
 800274a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	887a      	ldrh	r2, [r7, #2]
 8002756:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002774:	2b40      	cmp	r3, #64	@ 0x40
 8002776:	d007      	beq.n	8002788 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002786:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002790:	d17e      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0xf6>
 800279a:	8afb      	ldrh	r3, [r7, #22]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d16c      	bne.n	800287a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	881a      	ldrh	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	1c9a      	adds	r2, r3, #2
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c4:	e059      	b.n	800287a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d11b      	bne.n	800280c <HAL_SPI_TransmitReceive+0x162>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d016      	beq.n	800280c <HAL_SPI_TransmitReceive+0x162>
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d113      	bne.n	800280c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	1c9a      	adds	r2, r3, #2
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d119      	bne.n	800284e <HAL_SPI_TransmitReceive+0x1a4>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d014      	beq.n	800284e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282e:	b292      	uxth	r2, r2
 8002830:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002836:	1c9a      	adds	r2, r3, #2
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800284a:	2301      	movs	r3, #1
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800284e:	f7fe fb8f 	bl	8000f70 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800285a:	429a      	cmp	r2, r3
 800285c:	d80d      	bhi.n	800287a <HAL_SPI_TransmitReceive+0x1d0>
 800285e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d009      	beq.n	800287a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0bc      	b.n	80029f4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1a0      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x11c>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d19b      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x11c>
 800288e:	e082      	b.n	8002996 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_SPI_TransmitReceive+0x1f4>
 8002898:	8afb      	ldrh	r3, [r7, #22]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d171      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c4:	e05d      	b.n	8002982 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d11c      	bne.n	800290e <HAL_SPI_TransmitReceive+0x264>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d017      	beq.n	800290e <HAL_SPI_TransmitReceive+0x264>
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d114      	bne.n	800290e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	7812      	ldrb	r2, [r2, #0]
 80028f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d119      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x2a6>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d014      	beq.n	8002950 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800294c:	2301      	movs	r3, #1
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002950:	f7fe fb0e 	bl	8000f70 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800295c:	429a      	cmp	r2, r3
 800295e:	d803      	bhi.n	8002968 <HAL_SPI_TransmitReceive+0x2be>
 8002960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d102      	bne.n	800296e <HAL_SPI_TransmitReceive+0x2c4>
 8002968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e038      	b.n	80029f4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d19c      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x21c>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d197      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002996:	6a3a      	ldr	r2, [r7, #32]
 8002998:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f908 	bl	8002bb0 <SPI_EndRxTxTransaction>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e01d      	b.n	80029f4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80029f2:	2300      	movs	r3, #0
  }
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3728      	adds	r7, #40	@ 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a0c:	f7fe fab0 	bl	8000f70 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a1c:	f7fe faa8 	bl	8000f70 <HAL_GetTick>
 8002a20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a22:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	015b      	lsls	r3, r3, #5
 8002a28:	0d1b      	lsrs	r3, r3, #20
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a32:	e054      	b.n	8002ade <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d050      	beq.n	8002ade <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a3c:	f7fe fa98 	bl	8000f70 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d902      	bls.n	8002a52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d13d      	bne.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a6a:	d111      	bne.n	8002a90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a74:	d004      	beq.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7e:	d107      	bne.n	8002a90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a98:	d10f      	bne.n	8002aba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ab8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e017      	b.n	8002afe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	bf0c      	ite	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	2300      	movne	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d19b      	bne.n	8002a34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000018 	.word	0x20000018

08002b0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b20:	d111      	bne.n	8002b46 <SPI_EndRxTransaction+0x3a>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b2a:	d004      	beq.n	8002b36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b34:	d107      	bne.n	8002b46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b44:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b4e:	d117      	bne.n	8002b80 <SPI_EndRxTransaction+0x74>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b58:	d112      	bne.n	8002b80 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2101      	movs	r1, #1
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f7ff ff49 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01a      	beq.n	8002ba6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b74:	f043 0220 	orr.w	r2, r3, #32
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e013      	b.n	8002ba8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2200      	movs	r2, #0
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7ff ff36 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e000      	b.n	8002ba8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7ff ff18 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd6:	f043 0220 	orr.w	r2, r3, #32
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e013      	b.n	8002c0a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2200      	movs	r2, #0
 8002bea:	2180      	movs	r1, #128	@ 0x80
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff ff05 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e000      	b.n	8002c0a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <InicializoVariables>:
 * @param  None
 * @retval None
 * @note   Si no se inicializa previamente las variables se carga la configuración
 * 		   por defecto.
 */
static void InicializoVariables(void) {
 8002c14:	b490      	push	{r4, r7}
 8002c16:	af00      	add	r7, sp, #0

	if(VACIO == data_config_s.channel) {
 8002c18:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <InicializoVariables+0x50>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d11d      	bne.n	8002c5c <InicializoVariables+0x48>

		memcpy(data_config_s.security_key, default_security_key, SEC_KEY_SIZE);
 8002c20:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <InicializoVariables+0x50>)
 8002c22:	4a11      	ldr	r2, [pc, #68]	@ (8002c68 <InicializoVariables+0x54>)
 8002c24:	f103 0410 	add.w	r4, r3, #16
 8002c28:	4613      	mov	r3, r2
 8002c2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(data_config_s.mac, default_mac_address, LARGE_MAC_SIZE);
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <InicializoVariables+0x50>)
 8002c32:	4a0e      	ldr	r2, [pc, #56]	@ (8002c6c <InicializoVariables+0x58>)
 8002c34:	3308      	adds	r3, #8
 8002c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c3a:	e883 0003 	stmia.w	r3, {r0, r1}
		data_config_s.sequence_number = DEFAULT_SEC_NUMBER;
 8002c3e:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <InicializoVariables+0x50>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	705a      	strb	r2, [r3, #1]
		data_config_s.channel = DEFAULT_CHANNEL;
 8002c44:	4b07      	ldr	r3, [pc, #28]	@ (8002c64 <InicializoVariables+0x50>)
 8002c46:	2203      	movs	r2, #3
 8002c48:	701a      	strb	r2, [r3, #0]
		data_config_s.panid = MY_DEFAULT_PAN_ID;
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <InicializoVariables+0x50>)
 8002c4c:	f649 1299 	movw	r2, #39321	@ 0x9999
 8002c50:	805a      	strh	r2, [r3, #2]
		data_config_s.address = MY_DEFAULT_ADDRESS;
 8002c52:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <InicializoVariables+0x50>)
 8002c54:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002c58:	809a      	strh	r2, [r3, #4]
	}
	return;
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
}
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc90      	pop	{r4, r7}
 8002c62:	4770      	bx	lr
 8002c64:	20000114 	.word	0x20000114
 8002c68:	08003610 	.word	0x08003610
 8002c6c:	08003608 	.word	0x08003608

08002c70 <InicializoMRF24>:
/**
 * @brief  Inicialización del módulo MRF24J40MA
 * @param  None
 * @retval Estado de la operación (TIME_OUT_OCURRIDO, INICIALIZACION_OK)
 */
static mrf24_state_t InicializoMRF24(void) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0

	uint8_t lectura;
	delayNoBloqueanteData_t delay_time_out;
	DelayInit(&delay_time_out, MRF_TIME_OUT);
 8002c76:	463b      	mov	r3, r7
 8002c78:	21c8      	movs	r1, #200	@ 0xc8
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fca2 	bl	80005c4 <DelayInit>
	SetShortAddr(SOFTRST, RSTPWR | RSTBB | RSTMAC);
 8002c80:	2107      	movs	r1, #7
 8002c82:	202a      	movs	r0, #42	@ 0x2a
 8002c84:	f000 f887 	bl	8002d96 <SetShortAddr>
	DelayReset(&delay_time_out);
 8002c88:	463b      	mov	r3, r7
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fce0 	bl	8000650 <DelayReset>

	do {

		lectura = GetShortAddr(SOFTRST);
 8002c90:	202a      	movs	r0, #42	@ 0x2a
 8002c92:	f000 f8a0 	bl	8002dd6 <GetShortAddr>
 8002c96:	4603      	mov	r3, r0
 8002c98:	73fb      	strb	r3, [r7, #15]
		if(DelayRead(&delay_time_out))
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fca8 	bl	80005f2 <DelayRead>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <InicializoMRF24+0x3c>
			return TIME_OUT_OCURRED;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	e070      	b.n	8002d8e <InicializoMRF24+0x11e>
	}while(VACIO != (lectura & (RSTPWR | RSTBB | RSTMAC)));
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ec      	bne.n	8002c90 <InicializoMRF24+0x20>
	delay_t(WAIT_50_MS);
 8002cb6:	2032      	movs	r0, #50	@ 0x32
 8002cb8:	f7fe f964 	bl	8000f84 <HAL_Delay>
	SetShortAddr(RXFLUSH, RXFLUSH_RESET);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	200d      	movs	r0, #13
 8002cc0:	f000 f869 	bl	8002d96 <SetShortAddr>
	SetDeviceAddress();
 8002cc4:	f000 f906 	bl	8002ed4 <SetDeviceAddress>
	SetDeviceMACAddress();
 8002cc8:	f000 f92a 	bl	8002f20 <SetDeviceMACAddress>
	SetLongAddr(RFCON1, VCOOPT1 | VCOOPT0);
 8002ccc:	2103      	movs	r1, #3
 8002cce:	f240 2001 	movw	r0, #513	@ 0x201
 8002cd2:	f000 f8a1 	bl	8002e18 <SetLongAddr>
	SetLongAddr(RFCON2, PLLEN);
 8002cd6:	2180      	movs	r1, #128	@ 0x80
 8002cd8:	f240 2002 	movw	r0, #514	@ 0x202
 8002cdc:	f000 f89c 	bl	8002e18 <SetLongAddr>
	SetLongAddr(RFCON3, P20dBm | P0dBm);
 8002ce0:	2180      	movs	r1, #128	@ 0x80
 8002ce2:	f240 2003 	movw	r0, #515	@ 0x203
 8002ce6:	f000 f897 	bl	8002e18 <SetLongAddr>
	SetLongAddr(RFCON6, TXFIL | _20MRECVR);
 8002cea:	2190      	movs	r1, #144	@ 0x90
 8002cec:	f240 2006 	movw	r0, #518	@ 0x206
 8002cf0:	f000 f892 	bl	8002e18 <SetLongAddr>
	SetLongAddr(RFCON7, SLPCLK100KHZ);
 8002cf4:	2180      	movs	r1, #128	@ 0x80
 8002cf6:	f240 2007 	movw	r0, #519	@ 0x207
 8002cfa:	f000 f88d 	bl	8002e18 <SetLongAddr>
	SetLongAddr(RFCON8, RFVCO);
 8002cfe:	2110      	movs	r1, #16
 8002d00:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8002d04:	f000 f888 	bl	8002e18 <SetLongAddr>
	SetLongAddr(SLPCON1, CLKOUTDIS | SLPCLKDIV0);
 8002d08:	2121      	movs	r1, #33	@ 0x21
 8002d0a:	f44f 7008 	mov.w	r0, #544	@ 0x220
 8002d0e:	f000 f883 	bl	8002e18 <SetLongAddr>
	SetShortAddr(BBREG2, CCA_MODE_1);
 8002d12:	2180      	movs	r1, #128	@ 0x80
 8002d14:	203a      	movs	r0, #58	@ 0x3a
 8002d16:	f000 f83e 	bl	8002d96 <SetShortAddr>
	SetShortAddr(BBREG6, RSSIMODE2);
 8002d1a:	2140      	movs	r1, #64	@ 0x40
 8002d1c:	203e      	movs	r0, #62	@ 0x3e
 8002d1e:	f000 f83a 	bl	8002d96 <SetShortAddr>
	SetShortAddr(CCAEDTH, CCAEDTH2 | CCAEDTH1);
 8002d22:	2106      	movs	r1, #6
 8002d24:	203f      	movs	r0, #63	@ 0x3f
 8002d26:	f000 f836 	bl	8002d96 <SetShortAddr>
	SetShortAddr(PACON2, FIFOEN | TXONTS2 | TXONTS1);
 8002d2a:	2198      	movs	r1, #152	@ 0x98
 8002d2c:	2018      	movs	r0, #24
 8002d2e:	f000 f832 	bl	8002d96 <SetShortAddr>
	SetShortAddr(TXSTBL, RFSTBL3 | RFSTBL0 | MSIFS2 | MSIFS0);
 8002d32:	2195      	movs	r1, #149	@ 0x95
 8002d34:	202e      	movs	r0, #46	@ 0x2e
 8002d36:	f000 f82e 	bl	8002d96 <SetShortAddr>
	DelayReset(&delay_time_out);
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fc87 	bl	8000650 <DelayReset>

	do {

		lectura = GetLongAddr(RFSTATE) & RX;
 8002d42:	f240 200f 	movw	r0, #527	@ 0x20f
 8002d46:	f000 f88b 	bl	8002e60 <GetLongAddr>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d50:	73fb      	strb	r3, [r7, #15]
		if(DelayRead(&delay_time_out))
 8002d52:	463b      	mov	r3, r7
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fc4c 	bl	80005f2 <DelayRead>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <InicializoMRF24+0xf4>
			return TIME_OUT_OCURRED;
 8002d60:	2308      	movs	r3, #8
 8002d62:	e014      	b.n	8002d8e <InicializoMRF24+0x11e>
	}while(RX != lectura);
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d68:	d1eb      	bne.n	8002d42 <InicializoMRF24+0xd2>
	SetShortAddr(MRFINTCON, SLPIE_DIS | WAKEIE_DIS | HSYMTMRIE_DIS | SECIE_DIS
 8002d6a:	21f5      	movs	r1, #245	@ 0xf5
 8002d6c:	2032      	movs	r0, #50	@ 0x32
 8002d6e:	f000 f812 	bl	8002d96 <SetShortAddr>
					| TXG2IE_DIS | TXNIE_DIS);
	SetShortAddr(ACKTMOUT, DRPACK | MAWD5 | MAWD4 | MAWD3 | MAWD0);
 8002d72:	21b9      	movs	r1, #185	@ 0xb9
 8002d74:	2012      	movs	r0, #18
 8002d76:	f000 f80e 	bl	8002d96 <SetShortAddr>
	SetChannel();
 8002d7a:	f000 f893 	bl	8002ea4 <SetChannel>
	SetShortAddr(RXMCR, VACIO);
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2000      	movs	r0, #0
 8002d82:	f000 f808 	bl	8002d96 <SetShortAddr>
	(void)GetShortAddr(INTSTAT);
 8002d86:	2031      	movs	r0, #49	@ 0x31
 8002d88:	f000 f825 	bl	8002dd6 <GetShortAddr>
	return INITIALIZATION_OK;
 8002d8c:	2301      	movs	r3, #1
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <SetShortAddr>:
 * @retval None
 * @note   Al escribir direcciones cortas (SHORT ADDRESS REGISTER) se comienza
 *         con el MSB en 0 indicando una dirección corta, 6 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura.
 */
static void SetShortAddr(uint8_t reg_address, uint8_t valor) {
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	460a      	mov	r2, r1
 8002da0:	71fb      	strb	r3, [r7, #7]
 8002da2:	4613      	mov	r3, r2
 8002da4:	71bb      	strb	r3, [r7, #6]

	reg_address = (uint8_t) (reg_address << SHIFT_SHORT_ADDR) | WRITE_8_BITS;
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	71fb      	strb	r3, [r7, #7]
	SetCSPin(DISABLE);
 8002db2:	2000      	movs	r0, #0
 8002db4:	f000 fb0a 	bl	80033cc <SetCSPin>
	WriteByteSPIPort(reg_address);
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fb4e 	bl	800345c <WriteByteSPIPort>
	WriteByteSPIPort(valor);
 8002dc0:	79bb      	ldrb	r3, [r7, #6]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fb4a 	bl	800345c <WriteByteSPIPort>
	SetCSPin(ENABLE);
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f000 faff 	bl	80033cc <SetCSPin>
	return;
 8002dce:	bf00      	nop
}
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <GetShortAddr>:
 * @retval Valor devuelto por el módulo - 1 byte
 * @note   Al escribir direcciones cortas (SHORT ADDRESS REGISTER) se comienza
 *         con el MSB en 0 indicando una dirección corta, 6 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura.
 */
static uint8_t GetShortAddr(uint8_t reg_address) {
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]

	uint8_t leido_spi = VACIO;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]
	reg_address = (uint8_t) (reg_address << SHIFT_SHORT_ADDR) & READ_8_BITS;
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002dee:	71fb      	strb	r3, [r7, #7]
	SetCSPin(DISABLE);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f000 faeb 	bl	80033cc <SetCSPin>
	WriteByteSPIPort(reg_address);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fb2f 	bl	800345c <WriteByteSPIPort>
	leido_spi = ReadByteSPIPort();
 8002dfe:	f000 fb61 	bl	80034c4 <ReadByteSPIPort>
 8002e02:	4603      	mov	r3, r0
 8002e04:	73fb      	strb	r3, [r7, #15]
	SetCSPin(ENABLE);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f000 fae0 	bl	80033cc <SetCSPin>
	return leido_spi;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <SetLongAddr>:
 * @note   Al escribir direcciones largas (LONG ADDRESS REGISTER) se comienza
 *         con el MSB en 1 indicando una dirección larga, 10 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura. En
 *         los 4 bits restantes (LSB) no importa el valor.
 */
static void SetLongAddr(uint16_t reg_address, uint8_t valor) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	460a      	mov	r2, r1
 8002e22:	80fb      	strh	r3, [r7, #6]
 8002e24:	4613      	mov	r3, r2
 8002e26:	717b      	strb	r3, [r7, #5]

	reg_address = (reg_address << SHIFT_LONG_ADDR) | WRITE_16_BITS;
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	015b      	lsls	r3, r3, #5
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <SetLongAddr+0x44>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	80fb      	strh	r3, [r7, #6]
	SetCSPin(DISABLE);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f000 fac8 	bl	80033cc <SetCSPin>
	Write2ByteSPIPort(reg_address);
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fb1e 	bl	8003480 <Write2ByteSPIPort>
	WriteByteSPIPort(valor);
 8002e44:	797b      	ldrb	r3, [r7, #5]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fb08 	bl	800345c <WriteByteSPIPort>
	SetCSPin(ENABLE);
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f000 fabd 	bl	80033cc <SetCSPin>
	return;
 8002e52:	bf00      	nop
}
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	ffff8010 	.word	0xffff8010

08002e60 <GetLongAddr>:
 * @note   Al escribir direcciones largas (LONG ADDRESS REGISTER) se comienza
 *         con el MSB en 1 indicando una dirección larga, 10 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura. En
 *         los 4 bits restantes (LSB) no importa el valor.
 */
static uint8_t GetLongAddr(uint16_t reg_address) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	80fb      	strh	r3, [r7, #6]

	uint8_t respuesta;
	reg_address = (reg_address << SHIFT_LONG_ADDR) | READ_16_BITS;
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	015b      	lsls	r3, r3, #5
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e78:	b21b      	sxth	r3, r3
 8002e7a:	80fb      	strh	r3, [r7, #6]
	SetCSPin(DISABLE);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f000 faa5 	bl	80033cc <SetCSPin>
	Write2ByteSPIPort(reg_address);
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fafb 	bl	8003480 <Write2ByteSPIPort>
	respuesta = ReadByteSPIPort();
 8002e8a:	f000 fb1b 	bl	80034c4 <ReadByteSPIPort>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73fb      	strb	r3, [r7, #15]
	SetCSPin(ENABLE);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f000 fa9a 	bl	80033cc <SetCSPin>
	return respuesta;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <SetChannel>:
/**
 * @brief  Seteo en el módulo en canal guardado en mrf24_data_config
 * @param  None
 * @retval None
 */
static void SetChannel(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0

	SetLongAddr(RFCON0, data_config_s.channel);
 8002ea8:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <SetChannel+0x2c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4619      	mov	r1, r3
 8002eae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002eb2:	f7ff ffb1 	bl	8002e18 <SetLongAddr>
	SetShortAddr(RFCTL, RFRST_HOLD);
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	2036      	movs	r0, #54	@ 0x36
 8002eba:	f7ff ff6c 	bl	8002d96 <SetShortAddr>
	SetShortAddr(RFCTL, VACIO);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2036      	movs	r0, #54	@ 0x36
 8002ec2:	f7ff ff68 	bl	8002d96 <SetShortAddr>
	delay_t(WAIT_1_MS);
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f7fe f85c 	bl	8000f84 <HAL_Delay>
	return;
 8002ecc:	bf00      	nop
}
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000114 	.word	0x20000114

08002ed4 <SetDeviceAddress>:
/**
 * @brief  Seteo en el módulo la dirección corta guardada en mrf24_data_config
 * @param  None
 * @retval None
 */
static void SetDeviceAddress(void) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0

	SetShortAddr(SADRH, (uint8_t) (data_config_s.address >> SHIFT_BYTE));
 8002ed8:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <SetDeviceAddress+0x48>)
 8002eda:	889b      	ldrh	r3, [r3, #4]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	2004      	movs	r0, #4
 8002ee6:	f7ff ff56 	bl	8002d96 <SetShortAddr>
	SetShortAddr(SADRL, (uint8_t) (data_config_s.address));
 8002eea:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <SetDeviceAddress+0x48>)
 8002eec:	889b      	ldrh	r3, [r3, #4]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	2003      	movs	r0, #3
 8002ef4:	f7ff ff4f 	bl	8002d96 <SetShortAddr>
	SetShortAddr(PANIDH, (uint8_t) (data_config_s.panid >> SHIFT_BYTE));
 8002ef8:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <SetDeviceAddress+0x48>)
 8002efa:	885b      	ldrh	r3, [r3, #2]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	4619      	mov	r1, r3
 8002f04:	2002      	movs	r0, #2
 8002f06:	f7ff ff46 	bl	8002d96 <SetShortAddr>
	SetShortAddr(PANIDL, (uint8_t) (data_config_s.panid));
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <SetDeviceAddress+0x48>)
 8002f0c:	885b      	ldrh	r3, [r3, #2]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	4619      	mov	r1, r3
 8002f12:	2001      	movs	r0, #1
 8002f14:	f7ff ff3f 	bl	8002d96 <SetShortAddr>
	return;
 8002f18:	bf00      	nop
}
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000114 	.word	0x20000114

08002f20 <SetDeviceMACAddress>:
/**
 * @brief  Seteo en el módulo la dirección mac guardada en mrf24_data_config.
 * @param  None.
 * @retval None.
 */
static void SetDeviceMACAddress(void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < LARGE_MAC_SIZE; i++) {
 8002f26:	2300      	movs	r3, #0
 8002f28:	71fb      	strb	r3, [r7, #7]
 8002f2a:	e00d      	b.n	8002f48 <SetDeviceMACAddress+0x28>

		SetShortAddr(EADR0 + i, data_config_s.mac[i]);
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	3305      	adds	r3, #5
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	4908      	ldr	r1, [pc, #32]	@ (8002f58 <SetDeviceMACAddress+0x38>)
 8002f36:	440b      	add	r3, r1
 8002f38:	7a1b      	ldrb	r3, [r3, #8]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	f7ff ff2a 	bl	8002d96 <SetShortAddr>
	for(uint8_t i = 0; i < LARGE_MAC_SIZE; i++) {
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	3301      	adds	r3, #1
 8002f46:	71fb      	strb	r3, [r7, #7]
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	2b07      	cmp	r3, #7
 8002f4c:	d9ee      	bls.n	8002f2c <SetDeviceMACAddress+0xc>
	}
	return;
 8002f4e:	bf00      	nop
}
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000114 	.word	0x20000114

08002f5c <MRF24J40Init>:
/**
 * @brief  Inicialización del módulo MRF24J40MA.
 * @param  None.
 * @retval Estado de la operación (TIME_OUT_OCURRIDO, INICIALIZACION_OK).
 */
mrf24_state_t MRF24J40Init(void) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0

	InicializoVariables();
 8002f60:	f7ff fe58 	bl	8002c14 <InicializoVariables>
	InicializoPines();
 8002f64:	f000 fa24 	bl	80033b0 <InicializoPines>
	delay_t(WAIT_1_MS);
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f7fe f80b 	bl	8000f84 <HAL_Delay>
	SetResetPin(1);
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f000 fa50 	bl	8003414 <SetResetPin>
	delay_t(WAIT_1_MS);
 8002f74:	2001      	movs	r0, #1
 8002f76:	f7fe f805 	bl	8000f84 <HAL_Delay>
	estadoActual = InicializoMRF24();
 8002f7a:	f7ff fe79 	bl	8002c70 <InicializoMRF24>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <MRF24J40Init+0x34>)
 8002f84:	701a      	strb	r2, [r3, #0]
	return estadoActual;
 8002f86:	4b02      	ldr	r3, [pc, #8]	@ (8002f90 <MRF24J40Init+0x34>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000110 	.word	0x20000110

08002f94 <MRF24SetChannel>:
 * @brief	Actualizo el canal de trabajo.
 * @param	Nuevo canal.
 * @retval	Estado de la operación (INVALID_VALUE, OPERATION_OK).
 * @note	Se comprueba la integridad del dato.
 */
mrf24_state_t MRF24SetChannel(channel_list_t ch) {
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]

	if(0x03 > ch || 0xF3 < ch)
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d902      	bls.n	8002faa <MRF24SetChannel+0x16>
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	2bf3      	cmp	r3, #243	@ 0xf3
 8002fa8:	d901      	bls.n	8002fae <MRF24SetChannel+0x1a>
		return INVALID_VALUE;
 8002faa:	230c      	movs	r3, #12
 8002fac:	e003      	b.n	8002fb6 <MRF24SetChannel+0x22>
	data_config_s.channel = ch;
 8002fae:	4a04      	ldr	r2, [pc, #16]	@ (8002fc0 <MRF24SetChannel+0x2c>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	7013      	strb	r3, [r2, #0]
	return OPERATION_OK;
 8002fb4:	230a      	movs	r3, #10
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	20000114 	.word	0x20000114

08002fc4 <MRF24SetPanId>:
 * @brief	Actualizo el PANID de trabajo.
 * @param	Nuevo PANID (uint16_t).
 * @retval	Estado de la operación (INVALID_VALUE, OPERATION_OK).
 * @note	Se comprueba la integridad del dato.
 */
mrf24_state_t MRF24SetPanId(uint16_t pan_id) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	80fb      	strh	r3, [r7, #6]

	if(BROADCAST == pan_id)
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <MRF24SetPanId+0x18>
		return INVALID_VALUE;
 8002fd8:	230c      	movs	r3, #12
 8002fda:	e003      	b.n	8002fe4 <MRF24SetPanId+0x20>
	data_config_s.panid = pan_id;
 8002fdc:	4a04      	ldr	r2, [pc, #16]	@ (8002ff0 <MRF24SetPanId+0x2c>)
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	8053      	strh	r3, [r2, #2]
	return OPERATION_OK;
 8002fe2:	230a      	movs	r3, #10
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000114 	.word	0x20000114

08002ff4 <MRF24SetAdd>:
 * @brief	Actualizo la dirección corta del dispositivo.
 * @param	Nueva dirección (uint16_t).
 * @retval	Estado de la operación (INVALID_VALUE, OPERATION_OK).
 * @note	Se comprueba la integridad del dato.
 */
mrf24_state_t MRF24SetAdd(uint16_t add) {
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	80fb      	strh	r3, [r7, #6]

	if(BROADCAST == add)
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003004:	4293      	cmp	r3, r2
 8003006:	d101      	bne.n	800300c <MRF24SetAdd+0x18>
		return INVALID_VALUE;
 8003008:	230c      	movs	r3, #12
 800300a:	e003      	b.n	8003014 <MRF24SetAdd+0x20>
	data_config_s.address = add;
 800300c:	4a04      	ldr	r2, [pc, #16]	@ (8003020 <MRF24SetAdd+0x2c>)
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	8093      	strh	r3, [r2, #4]
	return OPERATION_OK;
 8003012:	230a      	movs	r3, #10
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000114 	.word	0x20000114

08003024 <MRF24SetInter>:
/**
 * @brief	Actualizo el número de secuancia de las comunicaciones salientes.
 * @param	Nuevo número de secuencia (uint16_t).
 * @retval	Estado de la operación (OPERATION_OK).
 */
mrf24_state_t MRF24SetInter(uint16_t sec) {
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	80fb      	strh	r3, [r7, #6]

	data_config_s.sequence_number = sec;
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <MRF24SetInter+0x20>)
 8003034:	705a      	strb	r2, [r3, #1]
	return OPERATION_OK;
 8003036:	230a      	movs	r3, #10
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000114 	.word	0x20000114

08003048 <MRF24SetMAC>:
 * @brief	Actualizo la dirección larga del dispositivo.
 * @param	Nueva dirección (8 bytes).
 * @retval	Estado de la operación (INVALID_VALUE, OPERATION_OK).
 * @note	Se comprueba la integridad del dato.
 */
mrf24_state_t MRF24SetMAC(uint8_t mac[8]) {
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

	bool_t dif_cero = false;
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i =0; i < LARGE_MAC_SIZE; i++) {
 8003054:	2300      	movs	r3, #0
 8003056:	73bb      	strb	r3, [r7, #14]
 8003058:	e00b      	b.n	8003072 <MRF24SetMAC+0x2a>

		if(VACIO != mac[i]) {
 800305a:	7bbb      	ldrb	r3, [r7, #14]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <MRF24SetMAC+0x24>

			dif_cero = true;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
			break;
 800306a:	e005      	b.n	8003078 <MRF24SetMAC+0x30>
	for(uint8_t i =0; i < LARGE_MAC_SIZE; i++) {
 800306c:	7bbb      	ldrb	r3, [r7, #14]
 800306e:	3301      	adds	r3, #1
 8003070:	73bb      	strb	r3, [r7, #14]
 8003072:	7bbb      	ldrb	r3, [r7, #14]
 8003074:	2b07      	cmp	r3, #7
 8003076:	d9f0      	bls.n	800305a <MRF24SetMAC+0x12>
		}
	}

	if(!dif_cero)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	f083 0301 	eor.w	r3, r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MRF24SetMAC+0x40>
		return INVALID_VALUE;
 8003084:	230c      	movs	r3, #12
 8003086:	e006      	b.n	8003096 <MRF24SetMAC+0x4e>
	memcpy(data_config_s.mac, mac, sizeof(data_config_s.mac));
 8003088:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <MRF24SetMAC+0x58>)
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	3308      	adds	r3, #8
 800308e:	6810      	ldr	r0, [r2, #0]
 8003090:	6851      	ldr	r1, [r2, #4]
 8003092:	c303      	stmia	r3!, {r0, r1}
	return OPERATION_OK;
 8003094:	230a      	movs	r3, #10
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	20000114 	.word	0x20000114

080030a4 <MRF24SetSecurityKey>:
 * @brief	Actualizo la llave de seguridad para la encriptación.
 * @param	Nueva llave (16 bytes).
 * @retval	Estado de la operación (INVALID_VALUE, OPERATION_OK).
 * @note	Se comprueba la integridad del dato.
 */
mrf24_state_t MRF24SetSecurityKey(uint8_t security_key[16]) {
 80030a4:	b490      	push	{r4, r7}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

	bool_t dif_cero = false;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i =0; i < SEC_KEY_SIZE; i++) {
 80030b0:	2300      	movs	r3, #0
 80030b2:	73bb      	strb	r3, [r7, #14]
 80030b4:	e00b      	b.n	80030ce <MRF24SetSecurityKey+0x2a>

		if(VACIO != security_key[i]) {
 80030b6:	7bbb      	ldrb	r3, [r7, #14]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <MRF24SetSecurityKey+0x24>

			dif_cero = true;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
			break;
 80030c6:	e005      	b.n	80030d4 <MRF24SetSecurityKey+0x30>
	for(uint8_t i =0; i < SEC_KEY_SIZE; i++) {
 80030c8:	7bbb      	ldrb	r3, [r7, #14]
 80030ca:	3301      	adds	r3, #1
 80030cc:	73bb      	strb	r3, [r7, #14]
 80030ce:	7bbb      	ldrb	r3, [r7, #14]
 80030d0:	2b0f      	cmp	r3, #15
 80030d2:	d9f0      	bls.n	80030b6 <MRF24SetSecurityKey+0x12>
		}
	}

	if(!dif_cero)
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	f083 0301 	eor.w	r3, r3, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MRF24SetSecurityKey+0x40>
		return INVALID_VALUE;
 80030e0:	230c      	movs	r3, #12
 80030e2:	e00a      	b.n	80030fa <MRF24SetSecurityKey+0x56>
	memcpy(data_config_s.security_key, security_key, sizeof(data_config_s.security_key));
 80030e4:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <MRF24SetSecurityKey+0x60>)
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	f103 0410 	add.w	r4, r3, #16
 80030ec:	4613      	mov	r3, r2
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	return OPERATION_OK;
 80030f8:	230a      	movs	r3, #10
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc90      	pop	{r4, r7}
 8003102:	4770      	bx	lr
 8003104:	20000114 	.word	0x20000114

08003108 <MRF24TransmitirDato>:
 * @brief   Envío la información almacenada en la estructura de salida.
 * @param   None.
 * @retval  Estado de la operación (OPERACION_NO_REALIZADA,
 * 			TRANSMISION_REALIZADA, NO_DIRECCION, MSG_NO_PRESENTE).
 */
mrf24_state_t MRF24TransmitirDato(mrf24_data_out_t * p_info_out_s) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

	if(INITIALIZATION_OK != estadoActual)
 8003110:	4b67      	ldr	r3, [pc, #412]	@ (80032b0 <MRF24TransmitirDato+0x1a8>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d001      	beq.n	800311c <MRF24TransmitirDato+0x14>
		return OPERATION_FAIL;
 8003118:	2309      	movs	r3, #9
 800311a:	e0c4      	b.n	80032a6 <MRF24TransmitirDato+0x19e>

	if(VACIO == p_info_out_s->dest_address)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	885b      	ldrh	r3, [r3, #2]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <MRF24TransmitirDato+0x20>
		return DIRECTION_EMPTY;
 8003124:	2303      	movs	r3, #3
 8003126:	e0be      	b.n	80032a6 <MRF24TransmitirDato+0x19e>

	if(VACIO == p_info_out_s->buffer_size)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <MRF24TransmitirDato+0x2e>
		return BUFFER_EMPTY;
 8003132:	2307      	movs	r3, #7
 8003134:	e0b7      	b.n	80032a6 <MRF24TransmitirDato+0x19e>

	if(BUFFER_SIZE < p_info_out_s->buffer_size)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800313c:	2b80      	cmp	r3, #128	@ 0x80
 800313e:	d901      	bls.n	8003144 <MRF24TransmitirDato+0x3c>
		return TO_LONG_MSG;
 8003140:	2306      	movs	r3, #6
 8003142:	e0b0      	b.n	80032a6 <MRF24TransmitirDato+0x19e>
	uint8_t pos_mem = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
	SetLongAddr(pos_mem++, HEAD_LENGTH);
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	73fa      	strb	r2, [r7, #15]
 800314e:	210b      	movs	r1, #11
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fe61 	bl	8002e18 <SetLongAddr>
	SetLongAddr(pos_mem++, p_info_out_s->buffer_size + HEAD_LENGTH);
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	73fa      	strb	r2, [r7, #15]
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8003164:	330b      	adds	r3, #11
 8003166:	b2db      	uxtb	r3, r3
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f7ff fe54 	bl	8002e18 <SetLongAddr>
	SetLongAddr(pos_mem++, DATA | ACK_REQ | INTRA_PAN);			// LSB.
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	73fa      	strb	r2, [r7, #15]
 8003176:	2161      	movs	r1, #97	@ 0x61
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fe4d 	bl	8002e18 <SetLongAddr>
	SetLongAddr(pos_mem++, SHORT_S_ADD | SHORT_D_ADD);			// MSB.
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	73fa      	strb	r2, [r7, #15]
 8003184:	2188      	movs	r1, #136	@ 0x88
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fe46 	bl	8002e18 <SetLongAddr>
	SetLongAddr(pos_mem++, data_config_s.sequence_number++);
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	73fa      	strb	r2, [r7, #15]
 8003192:	4618      	mov	r0, r3
 8003194:	4b47      	ldr	r3, [pc, #284]	@ (80032b4 <MRF24TransmitirDato+0x1ac>)
 8003196:	785b      	ldrb	r3, [r3, #1]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	b2d1      	uxtb	r1, r2
 800319c:	4a45      	ldr	r2, [pc, #276]	@ (80032b4 <MRF24TransmitirDato+0x1ac>)
 800319e:	7051      	strb	r1, [r2, #1]
 80031a0:	4619      	mov	r1, r3
 80031a2:	f7ff fe39 	bl	8002e18 <SetLongAddr>

	if(VACIO == p_info_out_s->dest_panid)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <MRF24TransmitirDato+0xae>
		p_info_out_s->dest_panid = data_config_s.panid;
 80031ae:	4b41      	ldr	r3, [pc, #260]	@ (80032b4 <MRF24TransmitirDato+0x1ac>)
 80031b0:	885a      	ldrh	r2, [r3, #2]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	801a      	strh	r2, [r3, #0]
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_panid);
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	73fa      	strb	r2, [r7, #15]
 80031bc:	461a      	mov	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f7ff fe26 	bl	8002e18 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_panid >> SHIFT_BYTE));
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	73fa      	strb	r2, [r7, #15]
 80031d2:	461a      	mov	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	b29b      	uxth	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	4619      	mov	r1, r3
 80031e0:	4610      	mov	r0, r2
 80031e2:	f7ff fe19 	bl	8002e18 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_address);
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	73fa      	strb	r2, [r7, #15]
 80031ec:	461a      	mov	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	885b      	ldrh	r3, [r3, #2]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f7ff fe0e 	bl	8002e18 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_address >> SHIFT_BYTE));
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	73fa      	strb	r2, [r7, #15]
 8003202:	461a      	mov	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	885b      	ldrh	r3, [r3, #2]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	b29b      	uxth	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f7ff fe01 	bl	8002e18 <SetLongAddr>

	if(VACIO == p_info_out_s->origin_address)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	889b      	ldrh	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <MRF24TransmitirDato+0x11e>
		p_info_out_s->origin_address = data_config_s.address;
 800321e:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <MRF24TransmitirDato+0x1ac>)
 8003220:	889a      	ldrh	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	809a      	strh	r2, [r3, #4]
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->origin_address);
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	73fa      	strb	r2, [r7, #15]
 800322c:	461a      	mov	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	889b      	ldrh	r3, [r3, #4]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f7ff fdee 	bl	8002e18 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->origin_address >> SHIFT_BYTE));
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	73fa      	strb	r2, [r7, #15]
 8003242:	461a      	mov	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	889b      	ldrh	r3, [r3, #4]
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	b29b      	uxth	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7ff fde1 	bl	8002e18 <SetLongAddr>

	for(int8_t i = 0; i < p_info_out_s->buffer_size; i++) {
 8003256:	2300      	movs	r3, #0
 8003258:	73bb      	strb	r3, [r7, #14]
 800325a:	e011      	b.n	8003280 <MRF24TransmitirDato+0x178>

		SetLongAddr(pos_mem++, p_info_out_s->buffer[i]);
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	73fa      	strb	r2, [r7, #15]
 8003262:	4618      	mov	r0, r3
 8003264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	799b      	ldrb	r3, [r3, #6]
 800326e:	4619      	mov	r1, r3
 8003270:	f7ff fdd2 	bl	8002e18 <SetLongAddr>
	for(int8_t i = 0; i < p_info_out_s->buffer_size; i++) {
 8003274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	3301      	adds	r3, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	73bb      	strb	r3, [r7, #14]
 8003280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	f892 2086 	ldrb.w	r2, [r2, #134]	@ 0x86
 800328a:	4293      	cmp	r3, r2
 800328c:	dbe6      	blt.n	800325c <MRF24TransmitirDato+0x154>
	}
	SetLongAddr(pos_mem++, VACIO);
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	73fa      	strb	r2, [r7, #15]
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fdbe 	bl	8002e18 <SetLongAddr>
	SetShortAddr(TXNCON, TXNACKREQ | TXNTRIG);
 800329c:	2105      	movs	r1, #5
 800329e:	201b      	movs	r0, #27
 80032a0:	f7ff fd79 	bl	8002d96 <SetShortAddr>
	return TRANSMISSION_COMPLETED;
 80032a4:	2302      	movs	r3, #2
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000110 	.word	0x20000110
 80032b4:	20000114 	.word	0x20000114

080032b8 <MRF24IsNewMsg>:
 * @brief   Se levantó la bandera indicando la llegada de un mensaje.
 * @param   None.
 * @retval  Estado de la operación (ERROR_INESPERADO, MSG_PRESENTE,
 *          MSG_NO_PRESENTE).
 */
volatile mrf24_state_t MRF24IsNewMsg(void) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0

	if(INITIALIZATION_OK != estadoActual)
 80032bc:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <MRF24IsNewMsg+0x2c>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d001      	beq.n	80032c8 <MRF24IsNewMsg+0x10>
		return UNEXPECTED_ERROR;
 80032c4:	230b      	movs	r3, #11
 80032c6:	e00a      	b.n	80032de <MRF24IsNewMsg+0x26>

	if(!IsMRF24Interrup())
 80032c8:	f000 f8b6 	bl	8003438 <IsMRF24Interrup>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f083 0301 	eor.w	r3, r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MRF24IsNewMsg+0x24>
		return MSG_PRESENT;
 80032d8:	2304      	movs	r3, #4
 80032da:	e000      	b.n	80032de <MRF24IsNewMsg+0x26>
	return BUFFER_EMPTY;
 80032dc:	2307      	movs	r3, #7
}
 80032de:	4618      	mov	r0, r3
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000110 	.word	0x20000110

080032e8 <MRF24ReciboPaquete>:
 * @brief   Recibir un paquete y dejarlo en el bufer de entrada en
 *          la estructura data_in_s.
 * @param   None.
 * @retval  Estado de la operación (OPERACION_NO_REALIZADA, MSG_LEIDO).
 */
mrf24_state_t MRF24ReciboPaquete(void) {
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
	/*
	 * agregar la lectura del rssi y del lq, vienen en el paquete del mensaje.
	 */


	if(INITIALIZATION_OK != estadoActual)
 80032ee:	4b29      	ldr	r3, [pc, #164]	@ (8003394 <MRF24ReciboPaquete+0xac>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d001      	beq.n	80032fa <MRF24ReciboPaquete+0x12>
		return OPERATION_FAIL;
 80032f6:	2309      	movs	r3, #9
 80032f8:	e048      	b.n	800338c <MRF24ReciboPaquete+0xa4>
	SetLongAddr(BBREG1, RXDECINV);
 80032fa:	2104      	movs	r1, #4
 80032fc:	2039      	movs	r0, #57	@ 0x39
 80032fe:	f7ff fd8b 	bl	8002e18 <SetLongAddr>
	SetShortAddr(RXFLUSH, DATAONLY);
 8003302:	2104      	movs	r1, #4
 8003304:	200d      	movs	r0, #13
 8003306:	f7ff fd46 	bl	8002d96 <SetShortAddr>
	data_in_s.buffer_size = GetLongAddr(RX_FIFO);
 800330a:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800330e:	f7ff fda7 	bl	8002e60 <GetLongAddr>
 8003312:	4603      	mov	r3, r0
 8003314:	461a      	mov	r2, r3
 8003316:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <MRF24ReciboPaquete+0xb0>)
 8003318:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	uint16_t add = GetLongAddr(RX_FIFO + 9);
 800331c:	f240 3009 	movw	r0, #777	@ 0x309
 8003320:	f7ff fd9e 	bl	8002e60 <GetLongAddr>
 8003324:	4603      	mov	r3, r0
 8003326:	80bb      	strh	r3, [r7, #4]
	add = (add << SHIFT_BYTE) | GetLongAddr(RX_FIFO + 8);
 8003328:	88bb      	ldrh	r3, [r7, #4]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	b21c      	sxth	r4, r3
 800332e:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8003332:	f7ff fd95 	bl	8002e60 <GetLongAddr>
 8003336:	4603      	mov	r3, r0
 8003338:	b21b      	sxth	r3, r3
 800333a:	4323      	orrs	r3, r4
 800333c:	b21b      	sxth	r3, r3
 800333e:	80bb      	strh	r3, [r7, #4]
	data_in_s.address = add;
 8003340:	4a15      	ldr	r2, [pc, #84]	@ (8003398 <MRF24ReciboPaquete+0xb0>)
 8003342:	88bb      	ldrh	r3, [r7, #4]
 8003344:	8053      	strh	r3, [r2, #2]

	for(uint8_t i = 0; i < data_in_s.buffer_size - FCS_LQI_RSSI; i++) {
 8003346:	2300      	movs	r3, #0
 8003348:	71fb      	strb	r3, [r7, #7]
 800334a:	e010      	b.n	800336e <MRF24ReciboPaquete+0x86>

		data_in_s.buffer[i] = GetLongAddr(RX_FIFO + HEAD_LENGTH + i - 1);
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f203 330a 	addw	r3, r3, #778	@ 0x30a
 8003354:	b29b      	uxth	r3, r3
 8003356:	79fc      	ldrb	r4, [r7, #7]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fd81 	bl	8002e60 <GetLongAddr>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <MRF24ReciboPaquete+0xb0>)
 8003364:	4423      	add	r3, r4
 8003366:	715a      	strb	r2, [r3, #5]
	for(uint8_t i = 0; i < data_in_s.buffer_size - FCS_LQI_RSSI; i++) {
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	3301      	adds	r3, #1
 800336c:	71fb      	strb	r3, [r7, #7]
 800336e:	79fa      	ldrb	r2, [r7, #7]
 8003370:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <MRF24ReciboPaquete+0xb0>)
 8003372:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8003376:	3b04      	subs	r3, #4
 8003378:	429a      	cmp	r2, r3
 800337a:	dbe7      	blt.n	800334c <MRF24ReciboPaquete+0x64>
	}
	SetLongAddr(BBREG1, VACIO);
 800337c:	2100      	movs	r1, #0
 800337e:	2039      	movs	r0, #57	@ 0x39
 8003380:	f7ff fd4a 	bl	8002e18 <SetLongAddr>
	(void)GetShortAddr(INTSTAT);
 8003384:	2031      	movs	r0, #49	@ 0x31
 8003386:	f7ff fd26 	bl	8002dd6 <GetShortAddr>
	return MSG_READ;
 800338a:	2305      	movs	r3, #5
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bd90      	pop	{r4, r7, pc}
 8003394:	20000110 	.word	0x20000110
 8003398:	20000134 	.word	0x20000134

0800339c <MRF24GetDataIn>:
 * @brief   Devuelvo el puntero a la estructura que contiene la información del
 * 			mensaje de entrada.
 * @param   None.
 * @retval  Puntero a la estructura tipo mrf24_data_in_t.
 */
mrf24_data_in_t * MRF24GetDataIn(void) {
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0

	return &data_in_s;
 80033a0:	4b02      	ldr	r3, [pc, #8]	@ (80033ac <MRF24GetDataIn+0x10>)
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000134 	.word	0x20000134

080033b0 <InicializoPines>:
/**
 * @brief  Inicialización del hardware relacionado con el módulo
 * @param  None
 * @retval None
 */
void InicializoPines(void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0

    SetCSPin(1);
 80033b4:	2001      	movs	r0, #1
 80033b6:	f000 f809 	bl	80033cc <SetCSPin>
    SetWakePin(1);
 80033ba:	2001      	movs	r0, #1
 80033bc:	f000 f818 	bl	80033f0 <SetWakePin>
    SetResetPin(0);
 80033c0:	2000      	movs	r0, #0
 80033c2:	f000 f827 	bl	8003414 <SetResetPin>
    return;
 80033c6:	bf00      	nop
}
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <SetCSPin>:
/**
 * @brief  Escribo en el pin destinado a CS
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetCSPin(bool_t estado) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_CS_GPIO_Port, MRF24_CS_Pin, estado);
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	461a      	mov	r2, r3
 80033da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033de:	4803      	ldr	r0, [pc, #12]	@ (80033ec <SetCSPin+0x20>)
 80033e0:	f7fe fa73 	bl	80018ca <HAL_GPIO_WritePin>
    return;
 80033e4:	bf00      	nop
}
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40010800 	.word	0x40010800

080033f0 <SetWakePin>:
/**
 * @brief  Escribo en el pin destinado a Wake
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetWakePin(bool_t estado) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_WAKE_GPIO_Port, MRF24_WAKE_Pin, estado);
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003402:	4803      	ldr	r0, [pc, #12]	@ (8003410 <SetWakePin+0x20>)
 8003404:	f7fe fa61 	bl	80018ca <HAL_GPIO_WritePin>
    return;
 8003408:	bf00      	nop
}
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40010800 	.word	0x40010800

08003414 <SetResetPin>:
/**
 * @brief  Escribo en el pin destinado a Reset
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetResetPin(bool_t estado) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_RESET_GPIO_Port, MRF24_RESET_Pin, estado);
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	461a      	mov	r2, r3
 8003422:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003426:	4803      	ldr	r0, [pc, #12]	@ (8003434 <SetResetPin+0x20>)
 8003428:	f7fe fa4f 	bl	80018ca <HAL_GPIO_WritePin>
    return;
 800342c:	bf00      	nop
}
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40010800 	.word	0x40010800

08003438 <IsMRF24Interrup>:

/**
 * @brief  Devuelvo el estado del pin interrup del módulo
 * @retval Booleano
 */
volatile bool_t IsMRF24Interrup(void) {
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0

	return HAL_GPIO_ReadPin(MRF24_INT_GPIO_Port, MRF24_INT_Pin);
 800343c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003440:	4805      	ldr	r0, [pc, #20]	@ (8003458 <IsMRF24Interrup+0x20>)
 8003442:	f7fe fa2b 	bl	800189c <HAL_GPIO_ReadPin>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
}
 8003452:	4618      	mov	r0, r3
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40010800 	.word	0x40010800

0800345c <WriteByteSPIPort>:
/**
 * @brief  Escribo en el puerto SPI
 * @param  Dato - 1 byte
 * @retval None
 */
void WriteByteSPIPort(uint8_t dato) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &dato, _1_BYTE, TIME_OUT_SPI);
 8003466:	1df9      	adds	r1, r7, #7
 8003468:	2364      	movs	r3, #100	@ 0x64
 800346a:	2201      	movs	r2, #1
 800346c:	4803      	ldr	r0, [pc, #12]	@ (800347c <WriteByteSPIPort+0x20>)
 800346e:	f7fe febf 	bl	80021f0 <HAL_SPI_Transmit>
    return;
 8003472:	bf00      	nop
}
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000090 	.word	0x20000090

08003480 <Write2ByteSPIPort>:
/**
 * @brief  Escribo en el puerto SPI
 * @param  Dato - 1 byte
 * @retval None
 */
void Write2ByteSPIPort(uint16_t dato) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	80fb      	strh	r3, [r7, #6]

	uint8_t dato_partido = (uint8_t) (dato >> SHIFT_BYTE);
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	0a1b      	lsrs	r3, r3, #8
 800348e:	b29b      	uxth	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &dato_partido, _1_BYTE, TIME_OUT_SPI);
 8003494:	f107 010f 	add.w	r1, r7, #15
 8003498:	2364      	movs	r3, #100	@ 0x64
 800349a:	2201      	movs	r2, #1
 800349c:	4808      	ldr	r0, [pc, #32]	@ (80034c0 <Write2ByteSPIPort+0x40>)
 800349e:	f7fe fea7 	bl	80021f0 <HAL_SPI_Transmit>
	dato_partido = (uint8_t) dato;
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &dato_partido, _1_BYTE, TIME_OUT_SPI);
 80034a8:	f107 010f 	add.w	r1, r7, #15
 80034ac:	2364      	movs	r3, #100	@ 0x64
 80034ae:	2201      	movs	r2, #1
 80034b0:	4803      	ldr	r0, [pc, #12]	@ (80034c0 <Write2ByteSPIPort+0x40>)
 80034b2:	f7fe fe9d 	bl	80021f0 <HAL_SPI_Transmit>
    return;
 80034b6:	bf00      	nop
}
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000090 	.word	0x20000090

080034c4 <ReadByteSPIPort>:
/**
 * @brief  Leo en el puerto SPI
 * @param  None
 * @retval Dato - 1 byte
 */
uint8_t ReadByteSPIPort(void) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0

	uint8_t dato = 0x01;
 80034ca:	2301      	movs	r3, #1
 80034cc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &dato, _1_BYTE, TIME_OUT_SPI);
 80034ce:	1df9      	adds	r1, r7, #7
 80034d0:	2364      	movs	r3, #100	@ 0x64
 80034d2:	2201      	movs	r2, #1
 80034d4:	4803      	ldr	r0, [pc, #12]	@ (80034e4 <ReadByteSPIPort+0x20>)
 80034d6:	f7fe ffcf 	bl	8002478 <HAL_SPI_Receive>
	return dato;
 80034da:	79fb      	ldrb	r3, [r7, #7]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000090 	.word	0x20000090

080034e8 <memcmp>:
 80034e8:	b510      	push	{r4, lr}
 80034ea:	3901      	subs	r1, #1
 80034ec:	4402      	add	r2, r0
 80034ee:	4290      	cmp	r0, r2
 80034f0:	d101      	bne.n	80034f6 <memcmp+0xe>
 80034f2:	2000      	movs	r0, #0
 80034f4:	e005      	b.n	8003502 <memcmp+0x1a>
 80034f6:	7803      	ldrb	r3, [r0, #0]
 80034f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80034fc:	42a3      	cmp	r3, r4
 80034fe:	d001      	beq.n	8003504 <memcmp+0x1c>
 8003500:	1b18      	subs	r0, r3, r4
 8003502:	bd10      	pop	{r4, pc}
 8003504:	3001      	adds	r0, #1
 8003506:	e7f2      	b.n	80034ee <memcmp+0x6>

08003508 <memset>:
 8003508:	4603      	mov	r3, r0
 800350a:	4402      	add	r2, r0
 800350c:	4293      	cmp	r3, r2
 800350e:	d100      	bne.n	8003512 <memset+0xa>
 8003510:	4770      	bx	lr
 8003512:	f803 1b01 	strb.w	r1, [r3], #1
 8003516:	e7f9      	b.n	800350c <memset+0x4>

08003518 <__libc_init_array>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	2600      	movs	r6, #0
 800351c:	4d0c      	ldr	r5, [pc, #48]	@ (8003550 <__libc_init_array+0x38>)
 800351e:	4c0d      	ldr	r4, [pc, #52]	@ (8003554 <__libc_init_array+0x3c>)
 8003520:	1b64      	subs	r4, r4, r5
 8003522:	10a4      	asrs	r4, r4, #2
 8003524:	42a6      	cmp	r6, r4
 8003526:	d109      	bne.n	800353c <__libc_init_array+0x24>
 8003528:	f000 f828 	bl	800357c <_init>
 800352c:	2600      	movs	r6, #0
 800352e:	4d0a      	ldr	r5, [pc, #40]	@ (8003558 <__libc_init_array+0x40>)
 8003530:	4c0a      	ldr	r4, [pc, #40]	@ (800355c <__libc_init_array+0x44>)
 8003532:	1b64      	subs	r4, r4, r5
 8003534:	10a4      	asrs	r4, r4, #2
 8003536:	42a6      	cmp	r6, r4
 8003538:	d105      	bne.n	8003546 <__libc_init_array+0x2e>
 800353a:	bd70      	pop	{r4, r5, r6, pc}
 800353c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003540:	4798      	blx	r3
 8003542:	3601      	adds	r6, #1
 8003544:	e7ee      	b.n	8003524 <__libc_init_array+0xc>
 8003546:	f855 3b04 	ldr.w	r3, [r5], #4
 800354a:	4798      	blx	r3
 800354c:	3601      	adds	r6, #1
 800354e:	e7f2      	b.n	8003536 <__libc_init_array+0x1e>
 8003550:	08003620 	.word	0x08003620
 8003554:	08003620 	.word	0x08003620
 8003558:	08003620 	.word	0x08003620
 800355c:	08003624 	.word	0x08003624

08003560 <memcpy>:
 8003560:	440a      	add	r2, r1
 8003562:	4291      	cmp	r1, r2
 8003564:	f100 33ff 	add.w	r3, r0, #4294967295
 8003568:	d100      	bne.n	800356c <memcpy+0xc>
 800356a:	4770      	bx	lr
 800356c:	b510      	push	{r4, lr}
 800356e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003572:	4291      	cmp	r1, r2
 8003574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003578:	d1f9      	bne.n	800356e <memcpy+0xe>
 800357a:	bd10      	pop	{r4, pc}

0800357c <_init>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	bf00      	nop
 8003580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003582:	bc08      	pop	{r3}
 8003584:	469e      	mov	lr, r3
 8003586:	4770      	bx	lr

08003588 <_fini>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	bf00      	nop
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr

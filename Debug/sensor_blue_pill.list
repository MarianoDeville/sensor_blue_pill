
sensor_blue_pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a60  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002b6c  08002b6c  00003b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc8  08002bc8  00004024  2**0
                  CONTENTS
  4 .ARM          00000008  08002bc8  08002bc8  00003bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bd0  08002bd0  00004024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd0  08002bd0  00003bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bd4  08002bd4  00003bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08002bd8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000024  08002bfc  00004024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002bfc  00004144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000693a  00000000  00000000  0000404d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf4  00000000  00000000  0000a987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0000c680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058c  00000000  00000000  0000ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001816c  00000000  00000000  0000d3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a766  00000000  00000000  00025518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083289  00000000  00000000  0002fc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2f07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bf4  00000000  00000000  000b2f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000b4b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b54 	.word	0x08002b54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002b54 	.word	0x08002b54

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <DebounceFSMInit>:
/**
  * @brief  Inicializa las variables de la máuina de estado para la función anti rebote.
  * @param  Puntero a la estructura que contiene las variabes.
  * @retval None
  */
void DebounceFSMInit(debounce_data_t * antirrebote_boton_n) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

	assert_param(antirrebote_boton_n);
	antirrebote_boton_n->estadoActual = BOTON_SIN_CAMBIOS;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2203      	movs	r2, #3
 800017c:	701a      	strb	r2, [r3, #0]
	DelayInit(&antirrebote_boton_n->delay_anti_rebote, TIEMPO_ANTI_REBOTE);
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	3304      	adds	r3, #4
 8000182:	2128      	movs	r1, #40	@ 0x28
 8000184:	4618      	mov	r0, r3
 8000186:	f000 f86b 	bl	8000260 <DelayInit>
}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
	...

08000194 <DebounceFSMUpdate>:
  * @param  Estado actual - booleano.
  * @retval Devuelvo la información si el botón fue presionado, soltado, sin cambios o si hubo un error.
  * @note	En el enunciado la función no posee parámetros, pero de esta forma independizo totalmente
  * 		el driver del hardware en donde lo implemento.
  */
estado_pulsador_t DebounceFSMUpdate(debounce_data_t * antirrebote_boton_n, bool_t estado_pin) {
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
 800019c:	460b      	mov	r3, r1
 800019e:	70fb      	strb	r3, [r7, #3]

	assert_param(antirrebote_boton_n);

	switch(antirrebote_boton_n->estadoActual) {
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	2b03      	cmp	r3, #3
 80001a6:	d849      	bhi.n	800023c <DebounceFSMUpdate+0xa8>
 80001a8:	a201      	add	r2, pc, #4	@ (adr r2, 80001b0 <DebounceFSMUpdate+0x1c>)
 80001aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ae:	bf00      	nop
 80001b0:	080001c1 	.word	0x080001c1
 80001b4:	080001d5 	.word	0x080001d5
 80001b8:	0800022f 	.word	0x0800022f
 80001bc:	08000205 	.word	0x08000205

		case BUTTON_UP:

			if(!estado_pin)
 80001c0:	78fb      	ldrb	r3, [r7, #3]
 80001c2:	f083 0301 	eor.w	r3, r3, #1
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d03c      	beq.n	8000246 <DebounceFSMUpdate+0xb2>
				antirrebote_boton_n->estadoActual = BUTTON_FALLING;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]
			break;
 80001d2:	e038      	b.n	8000246 <DebounceFSMUpdate+0xb2>

		case BUTTON_FALLING:

			if(DelayRead(&antirrebote_boton_n->delay_anti_rebote)) {
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3304      	adds	r3, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 f858 	bl	800028e <DelayRead>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d032      	beq.n	800024a <DebounceFSMUpdate+0xb6>

				if(!estado_pin) {
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	f083 0301 	eor.w	r3, r3, #1
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d004      	beq.n	80001fa <DebounceFSMUpdate+0x66>

					antirrebote_boton_n->estadoActual = BUTTON_DOWN;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2202      	movs	r2, #2
 80001f4:	701a      	strb	r2, [r3, #0]
					return PRESIONO_BOTON;
 80001f6:	2301      	movs	r3, #1
 80001f8:	e02d      	b.n	8000256 <DebounceFSMUpdate+0xc2>
				} else {

					antirrebote_boton_n->estadoActual = BUTTON_UP;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2200      	movs	r2, #0
 80001fe:	701a      	strb	r2, [r3, #0]
					return RUIDO;
 8000200:	2304      	movs	r3, #4
 8000202:	e028      	b.n	8000256 <DebounceFSMUpdate+0xc2>
			}
			break;

		case BUTTON_RAISING:

			if(DelayRead(&antirrebote_boton_n->delay_anti_rebote)) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3304      	adds	r3, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f840 	bl	800028e <DelayRead>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d01c      	beq.n	800024e <DebounceFSMUpdate+0xba>

				if(estado_pin) {
 8000214:	78fb      	ldrb	r3, [r7, #3]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d004      	beq.n	8000224 <DebounceFSMUpdate+0x90>

					antirrebote_boton_n->estadoActual = BUTTON_UP;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2200      	movs	r2, #0
 800021e:	701a      	strb	r2, [r3, #0]
					return SUELTO_BOTON;
 8000220:	2302      	movs	r3, #2
 8000222:	e018      	b.n	8000256 <DebounceFSMUpdate+0xc2>
				} else {

					antirrebote_boton_n->estadoActual = BUTTON_DOWN;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2202      	movs	r2, #2
 8000228:	701a      	strb	r2, [r3, #0]
					return RUIDO;
 800022a:	2304      	movs	r3, #4
 800022c:	e013      	b.n	8000256 <DebounceFSMUpdate+0xc2>
			}
			break;

		case BUTTON_DOWN:

			if(estado_pin)
 800022e:	78fb      	ldrb	r3, [r7, #3]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d00e      	beq.n	8000252 <DebounceFSMUpdate+0xbe>
				antirrebote_boton_n->estadoActual = BUTTON_RAISING;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2203      	movs	r2, #3
 8000238:	701a      	strb	r2, [r3, #0]
			break;
 800023a:	e00a      	b.n	8000252 <DebounceFSMUpdate+0xbe>

		default:

			DebounceFSMInit(antirrebote_boton_n);
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f7ff ff97 	bl	8000170 <DebounceFSMInit>
			return ERROR_ANTI_REBOTE;
 8000242:	2300      	movs	r3, #0
 8000244:	e007      	b.n	8000256 <DebounceFSMUpdate+0xc2>
			break;
 8000246:	bf00      	nop
 8000248:	e004      	b.n	8000254 <DebounceFSMUpdate+0xc0>
			break;
 800024a:	bf00      	nop
 800024c:	e002      	b.n	8000254 <DebounceFSMUpdate+0xc0>
			break;
 800024e:	bf00      	nop
 8000250:	e000      	b.n	8000254 <DebounceFSMUpdate+0xc0>
			break;
 8000252:	bf00      	nop
	}
	return BOTON_SIN_CAMBIOS;
 8000254:	2303      	movs	r3, #3
}
 8000256:	4618      	mov	r0, r3
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop

08000260 <DelayInit>:
  * @brief  Inicializa el delay no bloqueante.
  * @param  Puntero a la estructura con las variables.
  * @param  Duración del delay.
  * @retval None
  */
void DelayInit(delayNoBloqueanteData_t * delay, tick_t duration) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]

	if(delay == NULL || duration == 0)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d002      	beq.n	8000276 <DelayInit+0x16>
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d101      	bne.n	800027a <DelayInit+0x1a>
		Error_Handler();
 8000276:	f000 fae1 	bl	800083c <Error_Handler>
	delay->duration = duration;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2200      	movs	r2, #0
 8000284:	721a      	strb	r2, [r3, #8]
	return;
 8000286:	bf00      	nop
}
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}

0800028e <DelayRead>:
/**
  * @brief  Obtengo el estado del delay.
  * @param  Puntero a la estructura con las variables.
  * @retval Estado del delay (contando / tiempo cumplido).
  */
bool_t DelayRead(delayNoBloqueanteData_t * delay) {
 800028e:	b580      	push	{r7, lr}
 8000290:	b082      	sub	sp, #8
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]

	if(delay == NULL)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d101      	bne.n	80002a0 <DelayRead+0x12>
		Error_Handler();
 800029c:	f000 face 	bl	800083c <Error_Handler>

	if(DelayIsRunning(delay) == false) {
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f000 f833 	bl	800030c <DelayIsRunning>
 80002a6:	4603      	mov	r3, r0
 80002a8:	f083 0301 	eor.w	r3, r3, #1
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d008      	beq.n	80002c4 <DelayRead+0x36>

		delay->startTime = HAL_GetTick();
 80002b2:	f000 fbfd 	bl	8000ab0 <HAL_GetTick>
 80002b6:	4602      	mov	r2, r0
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2201      	movs	r2, #1
 80002c0:	721a      	strb	r2, [r3, #8]
 80002c2:	e00e      	b.n	80002e2 <DelayRead+0x54>
	} else {

		if((HAL_GetTick() - delay->startTime) >= delay->duration) {
 80002c4:	f000 fbf4 	bl	8000ab0 <HAL_GetTick>
 80002c8:	4602      	mov	r2, r0
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	1ad2      	subs	r2, r2, r3
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d304      	bcc.n	80002e2 <DelayRead+0x54>

			delay->running = false;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	721a      	strb	r2, [r3, #8]
			return true;
 80002de:	2301      	movs	r3, #1
 80002e0:	e000      	b.n	80002e4 <DelayRead+0x56>
		}
	}
	return false;
 80002e2:	2300      	movs	r3, #0
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <DelayReset>:
/**
  * @brief  Reseteo la cuenta del tiempo.
  * @param  Puntero a la estructura con las variables.
  * @retval None
  */
void DelayReset( delayNoBloqueanteData_t * delay) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]

	delay->startTime = HAL_GetTick();
 80002f4:	f000 fbdc 	bl	8000ab0 <HAL_GetTick>
 80002f8:	4602      	mov	r2, r0
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	601a      	str	r2, [r3, #0]
	delay->running = true;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2201      	movs	r2, #1
 8000302:	721a      	strb	r2, [r3, #8]
	return;
 8000304:	bf00      	nop
}
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <DelayIsRunning>:
  * @retval Estado del delay (contando / tiempo cumplido).
  * @note	En el trabajo práctico la define como función pública, pero para mejorar
  * 		el encapsulamiento la defino como privada ya que solo se utiliza en el
  * 		ámbito de este archivo.
  */
static bool_t DelayIsRunning(delayNoBloqueanteData_t * delay) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]

	if(delay == NULL)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d101      	bne.n	800031e <DelayIsRunning+0x12>
		Error_Handler();
 800031a:	f000 fa8f 	bl	800083c <Error_Handler>
	return delay->running;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	7a1b      	ldrb	r3, [r3, #8]
}
 8000322:	4618      	mov	r0, r3
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <EEPROMLoadStruct>:
 * @retval
 * @note
 */
eeprom_state_t EEPROMLoadStruct(eeprom_mem_t mem_addr,
						  	  	void * p_info_s,
								size_t struct_size) {
 800032a:	b580      	push	{r7, lr}
 800032c:	b084      	sub	sp, #16
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]

	if(p_info_s == NULL || struct_size == 0)
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d002      	beq.n	8000342 <EEPROMLoadStruct+0x18>
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d101      	bne.n	8000346 <EEPROMLoadStruct+0x1c>
		return LOAD_ERR;
 8000342:	2303      	movs	r3, #3
 8000344:	e006      	b.n	8000354 <EEPROMLoadStruct+0x2a>
	memcpy(p_info_s, (const void*)mem_addr, struct_size);
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	4619      	mov	r1, r3
 800034c:	68b8      	ldr	r0, [r7, #8]
 800034e:	f002 fbf3 	bl	8002b38 <memcpy>
	return LOAD_OK;
 8000352:	2302      	movs	r3, #2
}
 8000354:	4618      	mov	r0, r3
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <set_led>:
 * @brief   Wrapper para escribir en el GPIO.
 * @param   Led al que voy a escribir.
 * @param   Valor a escribir.
 * @retval  None.
 */
void set_led(color_leds color, estado_leds_t estado) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	460a      	mov	r2, r1
 8000366:	71fb      	strb	r3, [r7, #7]
 8000368:	4613      	mov	r3, r2
 800036a:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(led[color].puerto, led[color].pin, estado);
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4a08      	ldr	r2, [pc, #32]	@ (8000390 <set_led+0x34>)
 8000370:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	4a06      	ldr	r2, [pc, #24]	@ (8000390 <set_led+0x34>)
 8000378:	00db      	lsls	r3, r3, #3
 800037a:	4413      	add	r3, r2
 800037c:	889b      	ldrh	r3, [r3, #4]
 800037e:	79ba      	ldrb	r2, [r7, #6]
 8000380:	4619      	mov	r1, r3
 8000382:	f000 fe42 	bl	800100a <HAL_GPIO_WritePin>
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000000 	.word	0x20000000

08000394 <toggle_led>:
/**
 * @brief   Wrapper para hacer un toggle en el GPIO.
 * @param   Led al que voy a escribir.
 * @retval  None.
 */
void toggle_led(color_leds color) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_TogglePin(led[color].puerto, led[color].pin);
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4a07      	ldr	r2, [pc, #28]	@ (80003c0 <toggle_led+0x2c>)
 80003a2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	4905      	ldr	r1, [pc, #20]	@ (80003c0 <toggle_led+0x2c>)
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	440b      	add	r3, r1
 80003ae:	889b      	ldrh	r3, [r3, #4]
 80003b0:	4619      	mov	r1, r3
 80003b2:	4610      	mov	r0, r2
 80003b4:	f000 fe41 	bl	800103a <HAL_GPIO_TogglePin>
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000000 	.word	0x20000000

080003c4 <bucle>:
/* Prototipo de funciones privadas -------------------------------------------*/
static void CheckBoton(void);
static void GetEEPROMtoMRF24Config(void);
static void ModoSetup(void);

void bucle(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0

	set_led(VERDE, LED_APAGADO);
 80003ca:	2101      	movs	r1, #1
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff ffc5 	bl	800035c <set_led>
	set_led(AMARILLO, LED_APAGADO);
 80003d2:	2101      	movs	r1, #1
 80003d4:	2001      	movs	r0, #1
 80003d6:	f7ff ffc1 	bl	800035c <set_led>
	set_led(ROJO, LED_APAGADO);
 80003da:	2101      	movs	r1, #1
 80003dc:	2002      	movs	r0, #2
 80003de:	f7ff ffbd 	bl	800035c <set_led>

	// Cargo de la memoria no volatil la configuración del sistema.
	EEPROMLoadStruct(EEPROM_CONFIG_ADDR, &system_config_s, sizeof(system_config_t));
 80003e2:	223c      	movs	r2, #60	@ 0x3c
 80003e4:	491f      	ldr	r1, [pc, #124]	@ (8000464 <bucle+0xa0>)
 80003e6:	4820      	ldr	r0, [pc, #128]	@ (8000468 <bucle+0xa4>)
 80003e8:	f7ff ff9f 	bl	800032a <EEPROMLoadStruct>

	// Cargo de la memoria no volatil la configuración de red e inicializo el módulo.
	GetEEPROMtoMRF24Config();
 80003ec:	f000 f844 	bl	8000478 <GetEEPROMtoMRF24Config>
	if(MRF24J40Init() != INICIALIZACION_OK)
 80003f0:	f002 f956 	bl	80026a0 <MRF24J40Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <bucle+0x3a>
		Error_Handler();
 80003fa:	f000 fa1f 	bl	800083c <Error_Handler>

	// Entro al modo configuración del sistema?
	ModoSetup();
 80003fe:	f000 f859 	bl	80004b4 <ModoSetup>

	DebounceFSMInit(&boton1);
 8000402:	481a      	ldr	r0, [pc, #104]	@ (800046c <bucle+0xa8>)
 8000404:	f7ff feb4 	bl	8000170 <DebounceFSMInit>

	mrf24_data_in_t * mrf24_data_in;

	while(1) {

		CheckBoton();
 8000408:	f000 f8ac 	bl	8000564 <CheckBoton>

		if(MRF24IsNewMsg() == MSG_PRESENTE) {
 800040c:	f002 fa40 	bl	8002890 <MRF24IsNewMsg>
 8000410:	4603      	mov	r3, r0
 8000412:	2b02      	cmp	r3, #2
 8000414:	d1f8      	bne.n	8000408 <bucle+0x44>

			if(MRF24ReciboPaquete() == MSG_LEIDO) {
 8000416:	f002 fa53 	bl	80028c0 <MRF24ReciboPaquete>
 800041a:	4603      	mov	r3, r0
 800041c:	2b04      	cmp	r3, #4
 800041e:	d11d      	bne.n	800045c <bucle+0x98>

				mrf24_data_in = MRF24GetDataIn();
 8000420:	f002 faa4 	bl	800296c <MRF24GetDataIn>
 8000424:	6078      	str	r0, [r7, #4]

				if(!strcmp(mrf24_data_in->buffer, "CMD:PLV"))
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	3306      	adds	r3, #6
 800042a:	4911      	ldr	r1, [pc, #68]	@ (8000470 <bucle+0xac>)
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff fe8d 	bl	800014c <strcmp>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d103      	bne.n	8000440 <bucle+0x7c>
					set_led(VERDE, LED_PRENDIDO);
 8000438:	2100      	movs	r1, #0
 800043a:	2000      	movs	r0, #0
 800043c:	f7ff ff8e 	bl	800035c <set_led>
				if(!strcmp(mrf24_data_in->buffer, "CMD:ALV"))
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	3306      	adds	r3, #6
 8000444:	490b      	ldr	r1, [pc, #44]	@ (8000474 <bucle+0xb0>)
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff fe80 	bl	800014c <strcmp>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d1da      	bne.n	8000408 <bucle+0x44>
					set_led(VERDE, LED_APAGADO);
 8000452:	2101      	movs	r1, #1
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff ff81 	bl	800035c <set_led>
 800045a:	e7d5      	b.n	8000408 <bucle+0x44>
			} else {

				toggle_led(AMARILLO);
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff ff99 	bl	8000394 <toggle_led>
		CheckBoton();
 8000462:	e7d1      	b.n	8000408 <bucle+0x44>
 8000464:	20000050 	.word	0x20000050
 8000468:	0800fc40 	.word	0x0800fc40
 800046c:	20000040 	.word	0x20000040
 8000470:	08002b6c 	.word	0x08002b6c
 8000474:	08002b74 	.word	0x08002b74

08000478 <GetEEPROMtoMRF24Config>:
 * @brief	Recupero de la memória no volatil la configuración de red.
 * @param	None.
 * @retval	None.
 * @note
 */
static void GetEEPROMtoMRF24Config(void) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0

	mrf24_data_config_t mrf24_config_s;
	if(EEPROMLoadStruct(EEPROM_MRF24_ADDR, &mrf24_config_s, sizeof(mrf24_config_s)) == LOAD_OK) {
 800047e:	463b      	mov	r3, r7
 8000480:	2220      	movs	r2, #32
 8000482:	4619      	mov	r1, r3
 8000484:	480a      	ldr	r0, [pc, #40]	@ (80004b0 <GetEEPROMtoMRF24Config+0x38>)
 8000486:	f7ff ff50 	bl	800032a <EEPROMLoadStruct>
 800048a:	4603      	mov	r3, r0
 800048c:	2b02      	cmp	r3, #2
 800048e:	d10a      	bne.n	80004a6 <GetEEPROMtoMRF24Config+0x2e>

		if(mrf24_config_s.my_channel != 0xFF)
 8000490:	787b      	ldrb	r3, [r7, #1]
 8000492:	2bff      	cmp	r3, #255	@ 0xff
 8000494:	d007      	beq.n	80004a6 <GetEEPROMtoMRF24Config+0x2e>
			memcpy(MRF24GetConfig(), &mrf24_config_s, sizeof(mrf24_config_s));
 8000496:	f002 f91f 	bl	80026d8 <MRF24GetConfig>
 800049a:	463b      	mov	r3, r7
 800049c:	2220      	movs	r2, #32
 800049e:	4619      	mov	r1, r3
 80004a0:	f002 fb4a 	bl	8002b38 <memcpy>
	}
	return;
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
}
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	0800fc00 	.word	0x0800fc00

080004b4 <ModoSetup>:
 * @param
 * @param
 * @retval
 * @note
 */
static void ModoSetup(void) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0

	int32_t tiempo = HAL_GetTick();
 80004ba:	f000 faf9 	bl	8000ab0 <HAL_GetTick>
 80004be:	4603      	mov	r3, r0
 80004c0:	613b      	str	r3, [r7, #16]
	bool_t config_enable = false;
 80004c2:	2300      	movs	r3, #0
 80004c4:	75fb      	strb	r3, [r7, #23]

	while(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 80004c6:	e009      	b.n	80004dc <ModoSetup+0x28>

		if((HAL_GetTick() - tiempo) >= SETUP_TIME_SEG) {
 80004c8:	f000 faf2 	bl	8000ab0 <HAL_GetTick>
 80004cc:	4602      	mov	r2, r0
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	2b77      	cmp	r3, #119	@ 0x77
 80004d4:	d902      	bls.n	80004dc <ModoSetup+0x28>

			config_enable = true;
 80004d6:	2301      	movs	r3, #1
 80004d8:	75fb      	strb	r3, [r7, #23]
			break;
 80004da:	e007      	b.n	80004ec <ModoSetup+0x38>
	while(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 80004dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004e0:	481d      	ldr	r0, [pc, #116]	@ (8000558 <ModoSetup+0xa4>)
 80004e2:	f000 fd7b 	bl	8000fdc <HAL_GPIO_ReadPin>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d1ed      	bne.n	80004c8 <ModoSetup+0x14>
		}
	}
	delayNoBloqueanteData_t delay_time_out;
	DelayInit(&delay_time_out, MRF_TIME_OUT);
 80004ec:	463b      	mov	r3, r7
 80004ee:	21c8      	movs	r1, #200	@ 0xc8
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff feb5 	bl	8000260 <DelayInit>
	mrf24_data_in_t * mrf24_data_in;

	while(config_enable) {
 80004f6:	e019      	b.n	800052c <ModoSetup+0x78>

		if(DelayRead(&delay_time_out)) {
 80004f8:	463b      	mov	r3, r7
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fec7 	bl	800028e <DelayRead>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d005      	beq.n	8000512 <ModoSetup+0x5e>

			toggle_led(ROJO);
 8000506:	2002      	movs	r0, #2
 8000508:	f7ff ff44 	bl	8000394 <toggle_led>
			toggle_led(VERDE);
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff ff41 	bl	8000394 <toggle_led>
		}

		// Acá recibo por IEEE 802.15.2 la configuración del sistema y de la red
		//
		if(MRF24IsNewMsg() == MSG_PRESENTE) {
 8000512:	f002 f9bd 	bl	8002890 <MRF24IsNewMsg>
 8000516:	4603      	mov	r3, r0
 8000518:	2b02      	cmp	r3, #2
 800051a:	d107      	bne.n	800052c <ModoSetup+0x78>

			if(MRF24ReciboPaquete() == MSG_LEIDO) {
 800051c:	f002 f9d0 	bl	80028c0 <MRF24ReciboPaquete>
 8000520:	4603      	mov	r3, r0
 8000522:	2b04      	cmp	r3, #4
 8000524:	d102      	bne.n	800052c <ModoSetup+0x78>

				mrf24_data_in = MRF24GetDataIn();
 8000526:	f002 fa21 	bl	800296c <MRF24GetDataIn>
 800052a:	60f8      	str	r0, [r7, #12]
	while(config_enable) {
 800052c:	7dfb      	ldrb	r3, [r7, #23]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1e2      	bne.n	80004f8 <ModoSetup+0x44>


	}
	// Inicializo la red con la nueva configuración y el sistema
	// Cargo de la memoria no volatil la configuración del sistema.
	EEPROMLoadStruct(EEPROM_CONFIG_ADDR, &system_config_s, sizeof(system_config_t));
 8000532:	223c      	movs	r2, #60	@ 0x3c
 8000534:	4909      	ldr	r1, [pc, #36]	@ (800055c <ModoSetup+0xa8>)
 8000536:	480a      	ldr	r0, [pc, #40]	@ (8000560 <ModoSetup+0xac>)
 8000538:	f7ff fef7 	bl	800032a <EEPROMLoadStruct>

	// Cargo de la memoria no volatil la configuración de red e inicializo el módulo.
	GetEEPROMtoMRF24Config();
 800053c:	f7ff ff9c 	bl	8000478 <GetEEPROMtoMRF24Config>
	if(MRF24J40Init() != INICIALIZACION_OK)
 8000540:	f002 f8ae 	bl	80026a0 <MRF24J40Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d002      	beq.n	8000550 <ModoSetup+0x9c>
		Error_Handler();
 800054a:	f000 f977 	bl	800083c <Error_Handler>

	return;
 800054e:	bf00      	nop
 8000550:	bf00      	nop
}
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40010c00 	.word	0x40010c00
 800055c:	20000050 	.word	0x20000050
 8000560:	0800fc40 	.word	0x0800fc40

08000564 <CheckBoton>:

/**
  * @brief  Manejo de las pulsaciones del botón
  * @retval
  */
static void CheckBoton(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b08e      	sub	sp, #56	@ 0x38
 8000568:	af00      	add	r7, sp, #0

	mrf24_data_out_t data_out_s;
	data_out_s.dest_address = LOW_END_ADDR;
 800056a:	f241 1312 	movw	r3, #4370	@ 0x1112
 800056e:	807b      	strh	r3, [r7, #2]
	data_out_s.dest_panid = 0x1234;
 8000570:	f241 2334 	movw	r3, #4660	@ 0x1234
 8000574:	803b      	strh	r3, [r7, #0]
	data_out_s.origin_address = 0x1111;
 8000576:	f241 1311 	movw	r3, #4369	@ 0x1111
 800057a:	80bb      	strh	r3, [r7, #4]

	switch(DebounceFSMUpdate(&boton1, HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin))) {
 800057c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000580:	481b      	ldr	r0, [pc, #108]	@ (80005f0 <CheckBoton+0x8c>)
 8000582:	f000 fd2b 	bl	8000fdc <HAL_GPIO_ReadPin>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	bf14      	ite	ne
 800058c:	2301      	movne	r3, #1
 800058e:	2300      	moveq	r3, #0
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4619      	mov	r1, r3
 8000594:	4817      	ldr	r0, [pc, #92]	@ (80005f4 <CheckBoton+0x90>)
 8000596:	f7ff fdfd 	bl	8000194 <DebounceFSMUpdate>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d002      	beq.n	80005a6 <CheckBoton+0x42>
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d010      	beq.n	80005c6 <CheckBoton+0x62>
			strcpy(data_out_s.buffer, "CMD:PLA");
			MRF24TransmitirDato(&data_out_s);
			break;
		default:
	}
}
 80005a4:	e01f      	b.n	80005e6 <CheckBoton+0x82>
			toggle_led(ROJO);
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff fef4 	bl	8000394 <toggle_led>
			strcpy(data_out_s.buffer, "CMD:ALA");
 80005ac:	463b      	mov	r3, r7
 80005ae:	3306      	adds	r3, #6
 80005b0:	4911      	ldr	r1, [pc, #68]	@ (80005f8 <CheckBoton+0x94>)
 80005b2:	461a      	mov	r2, r3
 80005b4:	460b      	mov	r3, r1
 80005b6:	cb03      	ldmia	r3!, {r0, r1}
 80005b8:	6010      	str	r0, [r2, #0]
 80005ba:	6051      	str	r1, [r2, #4]
			MRF24TransmitirDato(&data_out_s);
 80005bc:	463b      	mov	r3, r7
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 f894 	bl	80026ec <MRF24TransmitirDato>
			break;
 80005c4:	e00f      	b.n	80005e6 <CheckBoton+0x82>
			toggle_led(ROJO);
 80005c6:	2002      	movs	r0, #2
 80005c8:	f7ff fee4 	bl	8000394 <toggle_led>
			strcpy(data_out_s.buffer, "CMD:PLA");
 80005cc:	463b      	mov	r3, r7
 80005ce:	3306      	adds	r3, #6
 80005d0:	490a      	ldr	r1, [pc, #40]	@ (80005fc <CheckBoton+0x98>)
 80005d2:	461a      	mov	r2, r3
 80005d4:	460b      	mov	r3, r1
 80005d6:	cb03      	ldmia	r3!, {r0, r1}
 80005d8:	6010      	str	r0, [r2, #0]
 80005da:	6051      	str	r1, [r2, #4]
			MRF24TransmitirDato(&data_out_s);
 80005dc:	463b      	mov	r3, r7
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 f884 	bl	80026ec <MRF24TransmitirDato>
			break;
 80005e4:	bf00      	nop
}
 80005e6:	bf00      	nop
 80005e8:	3738      	adds	r7, #56	@ 0x38
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	20000040 	.word	0x20000040
 80005f8:	08002b7c 	.word	0x08002b7c
 80005fc:	08002b84 	.word	0x08002b84

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 f9fc 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f808 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f876 	bl	80006fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000610:	f000 f83e 	bl	8000690 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  bucle();
 8000614:	f7ff fed6 	bl	80003c4 <bucle>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0x18>

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b090      	sub	sp, #64	@ 0x40
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	2228      	movs	r2, #40	@ 0x28
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fa44 	bl	8002ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000642:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fd0b 	bl	800106c <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x44>
  {
    Error_Handler();
 800065c:	f000 f8ee 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f000 ff79 	bl	8001570 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000684:	f000 f8da 	bl	800083c <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3740      	adds	r7, #64	@ 0x40
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_SPI1_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <MX_SPI1_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006c4:	2220      	movs	r2, #32
 80006c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006dc:	220a      	movs	r2, #10
 80006de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <MX_SPI1_Init+0x64>)
 80006e2:	f001 f8a1 	bl	8001828 <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f8a6 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000710:	4b46      	ldr	r3, [pc, #280]	@ (800082c <MX_GPIO_Init+0x130>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a45      	ldr	r2, [pc, #276]	@ (800082c <MX_GPIO_Init+0x130>)
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b43      	ldr	r3, [pc, #268]	@ (800082c <MX_GPIO_Init+0x130>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0310 	and.w	r3, r3, #16
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000728:	4b40      	ldr	r3, [pc, #256]	@ (800082c <MX_GPIO_Init+0x130>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a3f      	ldr	r2, [pc, #252]	@ (800082c <MX_GPIO_Init+0x130>)
 800072e:	f043 0320 	orr.w	r3, r3, #32
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b3d      	ldr	r3, [pc, #244]	@ (800082c <MX_GPIO_Init+0x130>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0320 	and.w	r3, r3, #32
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b3a      	ldr	r3, [pc, #232]	@ (800082c <MX_GPIO_Init+0x130>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a39      	ldr	r2, [pc, #228]	@ (800082c <MX_GPIO_Init+0x130>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b37      	ldr	r3, [pc, #220]	@ (800082c <MX_GPIO_Init+0x130>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	4b34      	ldr	r3, [pc, #208]	@ (800082c <MX_GPIO_Init+0x130>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a33      	ldr	r2, [pc, #204]	@ (800082c <MX_GPIO_Init+0x130>)
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b31      	ldr	r3, [pc, #196]	@ (800082c <MX_GPIO_Init+0x130>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000776:	482e      	ldr	r0, [pc, #184]	@ (8000830 <MX_GPIO_Init+0x134>)
 8000778:	f000 fc47 	bl	800100a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000782:	482c      	ldr	r0, [pc, #176]	@ (8000834 <MX_GPIO_Init+0x138>)
 8000784:	f000 fc41 	bl	800100a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MRF24_CS_Pin|MRF24_RESET_Pin|MRF24_WAKE_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 800078e:	482a      	ldr	r0, [pc, #168]	@ (8000838 <MX_GPIO_Init+0x13c>)
 8000790:	f000 fc3b 	bl	800100a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BOARD_Pin */
  GPIO_InitStruct.Pin = LED_BOARD_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BOARD_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	4820      	ldr	r0, [pc, #128]	@ (8000830 <MX_GPIO_Init+0x134>)
 80007ae:	f000 fa91 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_VERDE_Pin LED_AMARILLO_Pin LED_ROJO_Pin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin;
 80007b2:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	481a      	ldr	r0, [pc, #104]	@ (8000834 <MX_GPIO_Init+0x138>)
 80007cc:	f000 fa82 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80007d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	4813      	ldr	r0, [pc, #76]	@ (8000834 <MX_GPIO_Init+0x138>)
 80007e6:	f000 fa75 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MRF24_CS_Pin MRF24_RESET_Pin MRF24_WAKE_Pin */
  GPIO_InitStruct.Pin = MRF24_CS_Pin|MRF24_RESET_Pin|MRF24_WAKE_Pin;
 80007ea:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	480d      	ldr	r0, [pc, #52]	@ (8000838 <MX_GPIO_Init+0x13c>)
 8000804:	f000 fa66 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MRF24_INTERRUP_Pin */
  GPIO_InitStruct.Pin = MRF24_INTERRUP_Pin;
 8000808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MRF24_INTERRUP_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4619      	mov	r1, r3
 800081c:	4806      	ldr	r0, [pc, #24]	@ (8000838 <MX_GPIO_Init+0x13c>)
 800081e:	f000 fa59 	bl	8000cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	40011000 	.word	0x40011000
 8000834:	40010c00 	.word	0x40010c00
 8000838:	40010800 	.word	0x40010800

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800084a:	4802      	ldr	r0, [pc, #8]	@ (8000854 <Error_Handler+0x18>)
 800084c:	f000 fbdd 	bl	800100a <HAL_GPIO_WritePin>
 8000850:	e7f8      	b.n	8000844 <Error_Handler+0x8>
 8000852:	bf00      	nop
 8000854:	40011000 	.word	0x40011000

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_MspInit+0x5c>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a14      	ldr	r2, [pc, #80]	@ (80008b4 <HAL_MspInit+0x5c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_MspInit+0x5c>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <HAL_MspInit+0x5c>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a0e      	ldr	r2, [pc, #56]	@ (80008b4 <HAL_MspInit+0x5c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <HAL_MspInit+0x5c>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800088e:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <HAL_MspInit+0x60>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4a04      	ldr	r2, [pc, #16]	@ (80008b8 <HAL_MspInit+0x60>)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010000 	.word	0x40010000

080008bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000944 <HAL_SPI_MspInit+0x88>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d12f      	bne.n	800093c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <HAL_SPI_MspInit+0x8c>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a19      	ldr	r2, [pc, #100]	@ (8000948 <HAL_SPI_MspInit+0x8c>)
 80008e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <HAL_SPI_MspInit+0x8c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <HAL_SPI_MspInit+0x8c>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a13      	ldr	r2, [pc, #76]	@ (8000948 <HAL_SPI_MspInit+0x8c>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <HAL_SPI_MspInit+0x8c>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800090c:	23a0      	movs	r3, #160	@ 0xa0
 800090e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000914:	2301      	movs	r3, #1
 8000916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	480b      	ldr	r0, [pc, #44]	@ (800094c <HAL_SPI_MspInit+0x90>)
 8000920:	f000 f9d8 	bl	8000cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000924:	2340      	movs	r3, #64	@ 0x40
 8000926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4619      	mov	r1, r3
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <HAL_SPI_MspInit+0x90>)
 8000938:	f000 f9cc 	bl	8000cd4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800093c:	bf00      	nop
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40013000 	.word	0x40013000
 8000948:	40021000 	.word	0x40021000
 800094c:	40010800 	.word	0x40010800

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <NMI_Handler+0x4>

08000958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <MemManage_Handler+0x4>

08000968 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <UsageFault_Handler+0x4>

08000978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f874 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b4:	f7ff fff8 	bl	80009a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ba:	490c      	ldr	r1, [pc, #48]	@ (80009ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009bc:	4a0c      	ldr	r2, [pc, #48]	@ (80009f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a09      	ldr	r2, [pc, #36]	@ (80009f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009d0:	4c09      	ldr	r4, [pc, #36]	@ (80009f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009de:	f002 f887 	bl	8002af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e2:	f7ff fe0d 	bl	8000600 <main>
  bx lr
 80009e6:	4770      	bx	lr
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80009f0:	08002bd8 	.word	0x08002bd8
  ldr r2, =_sbss
 80009f4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80009f8:	20000144 	.word	0x20000144

080009fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_2_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <HAL_Init+0x28>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <HAL_Init+0x28>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f92b 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f000 f808 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff ff1c 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_InitTick+0x54>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_InitTick+0x58>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f935 	bl	8000cba <HAL_SYSTICK_Config>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00e      	b.n	8000a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d80a      	bhi.n	8000a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f000 f90b 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4a06      	ldr	r2, [pc, #24]	@ (8000a88 <HAL_InitTick+0x5c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000018 	.word	0x20000018
 8000a84:	20000020 	.word	0x20000020
 8000a88:	2000001c 	.word	0x2000001c

08000a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <HAL_IncTick+0x1c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <HAL_IncTick+0x20>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a03      	ldr	r2, [pc, #12]	@ (8000aac <HAL_IncTick+0x20>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	20000020 	.word	0x20000020
 8000aac:	200000e4 	.word	0x200000e4

08000ab0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b02      	ldr	r3, [pc, #8]	@ (8000ac0 <HAL_GetTick+0x10>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	200000e4 	.word	0x200000e4

08000ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff fff0 	bl	8000ab0 <HAL_GetTick>
 8000ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000adc:	d005      	beq.n	8000aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ade:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <HAL_Delay+0x44>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aea:	bf00      	nop
 8000aec:	f7ff ffe0 	bl	8000ab0 <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d8f7      	bhi.n	8000aec <HAL_Delay+0x28>
  {
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000020 	.word	0x20000020

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	@ (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	@ (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	@ (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	@ 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	@ 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff90 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff49 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff5e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff90 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5f 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffb0 	bl	8000c28 <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b08b      	sub	sp, #44	@ 0x2c
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce6:	e169      	b.n	8000fbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f040 8158 	bne.w	8000fb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	4a9a      	ldr	r2, [pc, #616]	@ (8000f74 <HAL_GPIO_Init+0x2a0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d05e      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
 8000d10:	4a98      	ldr	r2, [pc, #608]	@ (8000f74 <HAL_GPIO_Init+0x2a0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d875      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d16:	4a98      	ldr	r2, [pc, #608]	@ (8000f78 <HAL_GPIO_Init+0x2a4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d058      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
 8000d1c:	4a96      	ldr	r2, [pc, #600]	@ (8000f78 <HAL_GPIO_Init+0x2a4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d86f      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d22:	4a96      	ldr	r2, [pc, #600]	@ (8000f7c <HAL_GPIO_Init+0x2a8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d052      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
 8000d28:	4a94      	ldr	r2, [pc, #592]	@ (8000f7c <HAL_GPIO_Init+0x2a8>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d869      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d2e:	4a94      	ldr	r2, [pc, #592]	@ (8000f80 <HAL_GPIO_Init+0x2ac>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d04c      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
 8000d34:	4a92      	ldr	r2, [pc, #584]	@ (8000f80 <HAL_GPIO_Init+0x2ac>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d863      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d3a:	4a92      	ldr	r2, [pc, #584]	@ (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d046      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
 8000d40:	4a90      	ldr	r2, [pc, #576]	@ (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d85d      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d46:	2b12      	cmp	r3, #18
 8000d48:	d82a      	bhi.n	8000da0 <HAL_GPIO_Init+0xcc>
 8000d4a:	2b12      	cmp	r3, #18
 8000d4c:	d859      	bhi.n	8000e02 <HAL_GPIO_Init+0x12e>
 8000d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d54 <HAL_GPIO_Init+0x80>)
 8000d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d54:	08000dcf 	.word	0x08000dcf
 8000d58:	08000da9 	.word	0x08000da9
 8000d5c:	08000dbb 	.word	0x08000dbb
 8000d60:	08000dfd 	.word	0x08000dfd
 8000d64:	08000e03 	.word	0x08000e03
 8000d68:	08000e03 	.word	0x08000e03
 8000d6c:	08000e03 	.word	0x08000e03
 8000d70:	08000e03 	.word	0x08000e03
 8000d74:	08000e03 	.word	0x08000e03
 8000d78:	08000e03 	.word	0x08000e03
 8000d7c:	08000e03 	.word	0x08000e03
 8000d80:	08000e03 	.word	0x08000e03
 8000d84:	08000e03 	.word	0x08000e03
 8000d88:	08000e03 	.word	0x08000e03
 8000d8c:	08000e03 	.word	0x08000e03
 8000d90:	08000e03 	.word	0x08000e03
 8000d94:	08000e03 	.word	0x08000e03
 8000d98:	08000db1 	.word	0x08000db1
 8000d9c:	08000dc5 	.word	0x08000dc5
 8000da0:	4a79      	ldr	r2, [pc, #484]	@ (8000f88 <HAL_GPIO_Init+0x2b4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000da6:	e02c      	b.n	8000e02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e029      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	3304      	adds	r3, #4
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	e024      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	3308      	adds	r3, #8
 8000dc0:	623b      	str	r3, [r7, #32]
          break;
 8000dc2:	e01f      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	330c      	adds	r3, #12
 8000dca:	623b      	str	r3, [r7, #32]
          break;
 8000dcc:	e01a      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	623b      	str	r3, [r7, #32]
          break;
 8000dda:	e013      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d105      	bne.n	8000df0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de4:	2308      	movs	r3, #8
 8000de6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	611a      	str	r2, [r3, #16]
          break;
 8000dee:	e009      	b.n	8000e04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df0:	2308      	movs	r3, #8
 8000df2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	615a      	str	r2, [r3, #20]
          break;
 8000dfa:	e003      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
          break;
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_Init+0x130>
          break;
 8000e02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	2bff      	cmp	r3, #255	@ 0xff
 8000e08:	d801      	bhi.n	8000e0e <HAL_GPIO_Init+0x13a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	e001      	b.n	8000e12 <HAL_GPIO_Init+0x13e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3304      	adds	r3, #4
 8000e12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	2bff      	cmp	r3, #255	@ 0xff
 8000e18:	d802      	bhi.n	8000e20 <HAL_GPIO_Init+0x14c>
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	e002      	b.n	8000e26 <HAL_GPIO_Init+0x152>
 8000e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e22:	3b08      	subs	r3, #8
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	210f      	movs	r1, #15
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	401a      	ands	r2, r3
 8000e38:	6a39      	ldr	r1, [r7, #32]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	431a      	orrs	r2, r3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e54:	4b4d      	ldr	r3, [pc, #308]	@ (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a4c      	ldr	r2, [pc, #304]	@ (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b4a      	ldr	r3, [pc, #296]	@ (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e6c:	4a48      	ldr	r2, [pc, #288]	@ (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3302      	adds	r3, #2
 8000e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a40      	ldr	r2, [pc, #256]	@ (8000f94 <HAL_GPIO_Init+0x2c0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d013      	beq.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f98 <HAL_GPIO_Init+0x2c4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d00d      	beq.n	8000ebc <HAL_GPIO_Init+0x1e8>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a3e      	ldr	r2, [pc, #248]	@ (8000f9c <HAL_GPIO_Init+0x2c8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d007      	beq.n	8000eb8 <HAL_GPIO_Init+0x1e4>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8000fa0 <HAL_GPIO_Init+0x2cc>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d101      	bne.n	8000eb4 <HAL_GPIO_Init+0x1e0>
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e006      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	e004      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_GPIO_Init+0x1ee>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec4:	f002 0203 	and.w	r2, r2, #3
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4093      	lsls	r3, r2
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ed2:	492f      	ldr	r1, [pc, #188]	@ (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eec:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	492c      	ldr	r1, [pc, #176]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	608b      	str	r3, [r1, #8]
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000efa:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	4928      	ldr	r1, [pc, #160]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f14:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	4922      	ldr	r1, [pc, #136]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	60cb      	str	r3, [r1, #12]
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	491e      	ldr	r1, [pc, #120]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	4918      	ldr	r1, [pc, #96]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	4914      	ldr	r1, [pc, #80]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d021      	beq.n	8000fa8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	490e      	ldr	r1, [pc, #56]	@ (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	600b      	str	r3, [r1, #0]
 8000f70:	e021      	b.n	8000fb6 <HAL_GPIO_Init+0x2e2>
 8000f72:	bf00      	nop
 8000f74:	10320000 	.word	0x10320000
 8000f78:	10310000 	.word	0x10310000
 8000f7c:	10220000 	.word	0x10220000
 8000f80:	10210000 	.word	0x10210000
 8000f84:	10120000 	.word	0x10120000
 8000f88:	10110000 	.word	0x10110000
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000
 8000f94:	40010800 	.word	0x40010800
 8000f98:	40010c00 	.word	0x40010c00
 8000f9c:	40011000 	.word	0x40011000
 8000fa0:	40011400 	.word	0x40011400
 8000fa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <HAL_GPIO_Init+0x304>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	4909      	ldr	r1, [pc, #36]	@ (8000fd8 <HAL_GPIO_Init+0x304>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb8:	3301      	adds	r3, #1
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f47f ae8e 	bne.w	8000ce8 <HAL_GPIO_Init+0x14>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	372c      	adds	r7, #44	@ 0x2c
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	460b      	mov	r3, r1
 8001014:	807b      	strh	r3, [r7, #2]
 8001016:	4613      	mov	r3, r2
 8001018:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800101a:	787b      	ldrb	r3, [r7, #1]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001020:	887a      	ldrh	r2, [r7, #2]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001026:	e003      	b.n	8001030 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	041a      	lsls	r2, r3, #16
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	611a      	str	r2, [r3, #16]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800103a:	b480      	push	{r7}
 800103c:	b085      	sub	sp, #20
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800104c:	887a      	ldrh	r2, [r7, #2]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4013      	ands	r3, r2
 8001052:	041a      	lsls	r2, r3, #16
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43d9      	mvns	r1, r3
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	400b      	ands	r3, r1
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	611a      	str	r2, [r3, #16]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e272      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8087 	beq.w	800119a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800108c:	4b92      	ldr	r3, [pc, #584]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	2b04      	cmp	r3, #4
 8001096:	d00c      	beq.n	80010b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001098:	4b8f      	ldr	r3, [pc, #572]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 030c 	and.w	r3, r3, #12
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d112      	bne.n	80010ca <HAL_RCC_OscConfig+0x5e>
 80010a4:	4b8c      	ldr	r3, [pc, #560]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010b0:	d10b      	bne.n	80010ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b2:	4b89      	ldr	r3, [pc, #548]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d06c      	beq.n	8001198 <HAL_RCC_OscConfig+0x12c>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d168      	bne.n	8001198 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e24c      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d2:	d106      	bne.n	80010e2 <HAL_RCC_OscConfig+0x76>
 80010d4:	4b80      	ldr	r3, [pc, #512]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a7f      	ldr	r2, [pc, #508]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	e02e      	b.n	8001140 <HAL_RCC_OscConfig+0xd4>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x98>
 80010ea:	4b7b      	ldr	r3, [pc, #492]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a7a      	ldr	r2, [pc, #488]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b78      	ldr	r3, [pc, #480]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a77      	ldr	r2, [pc, #476]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e01d      	b.n	8001140 <HAL_RCC_OscConfig+0xd4>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800110c:	d10c      	bne.n	8001128 <HAL_RCC_OscConfig+0xbc>
 800110e:	4b72      	ldr	r3, [pc, #456]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a71      	ldr	r2, [pc, #452]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b6f      	ldr	r3, [pc, #444]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a6e      	ldr	r2, [pc, #440]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e00b      	b.n	8001140 <HAL_RCC_OscConfig+0xd4>
 8001128:	4b6b      	ldr	r3, [pc, #428]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a6a      	ldr	r2, [pc, #424]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800112e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b68      	ldr	r3, [pc, #416]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a67      	ldr	r2, [pc, #412]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800113a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800113e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d013      	beq.n	8001170 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fcb2 	bl	8000ab0 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fcae 	bl	8000ab0 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	@ 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e200      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b5d      	ldr	r3, [pc, #372]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0xe4>
 800116e:	e014      	b.n	800119a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fc9e 	bl	8000ab0 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001178:	f7ff fc9a 	bl	8000ab0 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	@ 0x64
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e1ec      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	4b53      	ldr	r3, [pc, #332]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0x10c>
 8001196:	e000      	b.n	800119a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d063      	beq.n	800126e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011a6:	4b4c      	ldr	r3, [pc, #304]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00b      	beq.n	80011ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011b2:	4b49      	ldr	r3, [pc, #292]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d11c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x18c>
 80011be:	4b46      	ldr	r3, [pc, #280]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d116      	bne.n	80011f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d005      	beq.n	80011e2 <HAL_RCC_OscConfig+0x176>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d001      	beq.n	80011e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e1c0      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	4b3d      	ldr	r3, [pc, #244]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	4939      	ldr	r1, [pc, #228]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	e03a      	b.n	800126e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d020      	beq.n	8001242 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001200:	4b36      	ldr	r3, [pc, #216]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001206:	f7ff fc53 	bl	8000ab0 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120e:	f7ff fc4f 	bl	8000ab0 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e1a1      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122c:	4b2a      	ldr	r3, [pc, #168]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4927      	ldr	r1, [pc, #156]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
 8001240:	e015      	b.n	800126e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fc32 	bl	8000ab0 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001250:	f7ff fc2e 	bl	8000ab0 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e180      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	d03a      	beq.n	80012f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d019      	beq.n	80012b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001282:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <HAL_RCC_OscConfig+0x274>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001288:	f7ff fc12 	bl	8000ab0 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001290:	f7ff fc0e 	bl	8000ab0 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e160      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f000 fa9c 	bl	80017ec <RCC_Delay>
 80012b4:	e01c      	b.n	80012f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b6:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <HAL_RCC_OscConfig+0x274>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012bc:	f7ff fbf8 	bl	8000ab0 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c2:	e00f      	b.n	80012e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fbf4 	bl	8000ab0 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d908      	bls.n	80012e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e146      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	42420000 	.word	0x42420000
 80012e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e4:	4b92      	ldr	r3, [pc, #584]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e9      	bne.n	80012c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80a6 	beq.w	800144a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001302:	4b8b      	ldr	r3, [pc, #556]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10d      	bne.n	800132a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b88      	ldr	r3, [pc, #544]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a87      	ldr	r2, [pc, #540]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b85      	ldr	r3, [pc, #532]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001326:	2301      	movs	r3, #1
 8001328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	4b82      	ldr	r3, [pc, #520]	@ (8001534 <HAL_RCC_OscConfig+0x4c8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d118      	bne.n	8001368 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001336:	4b7f      	ldr	r3, [pc, #508]	@ (8001534 <HAL_RCC_OscConfig+0x4c8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a7e      	ldr	r2, [pc, #504]	@ (8001534 <HAL_RCC_OscConfig+0x4c8>)
 800133c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001342:	f7ff fbb5 	bl	8000ab0 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134a:	f7ff fbb1 	bl	8000ab0 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b64      	cmp	r3, #100	@ 0x64
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e103      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	4b75      	ldr	r3, [pc, #468]	@ (8001534 <HAL_RCC_OscConfig+0x4c8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x312>
 8001370:	4b6f      	ldr	r3, [pc, #444]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a6e      	ldr	r2, [pc, #440]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6213      	str	r3, [r2, #32]
 800137c:	e02d      	b.n	80013da <HAL_RCC_OscConfig+0x36e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x334>
 8001386:	4b6a      	ldr	r3, [pc, #424]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4a69      	ldr	r2, [pc, #420]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	6213      	str	r3, [r2, #32]
 8001392:	4b67      	ldr	r3, [pc, #412]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4a66      	ldr	r2, [pc, #408]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	f023 0304 	bic.w	r3, r3, #4
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	e01c      	b.n	80013da <HAL_RCC_OscConfig+0x36e>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d10c      	bne.n	80013c2 <HAL_RCC_OscConfig+0x356>
 80013a8:	4b61      	ldr	r3, [pc, #388]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4a60      	ldr	r2, [pc, #384]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6213      	str	r3, [r2, #32]
 80013b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6213      	str	r3, [r2, #32]
 80013c0:	e00b      	b.n	80013da <HAL_RCC_OscConfig+0x36e>
 80013c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6213      	str	r3, [r2, #32]
 80013ce:	4b58      	ldr	r3, [pc, #352]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a57      	ldr	r2, [pc, #348]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f023 0304 	bic.w	r3, r3, #4
 80013d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d015      	beq.n	800140e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fb65 	bl	8000ab0 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e8:	e00a      	b.n	8001400 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ea:	f7ff fb61 	bl	8000ab0 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e0b1      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001400:	4b4b      	ldr	r3, [pc, #300]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0ee      	beq.n	80013ea <HAL_RCC_OscConfig+0x37e>
 800140c:	e014      	b.n	8001438 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140e:	f7ff fb4f 	bl	8000ab0 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001414:	e00a      	b.n	800142c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff fb4b 	bl	8000ab0 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001424:	4293      	cmp	r3, r2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e09b      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142c:	4b40      	ldr	r3, [pc, #256]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1ee      	bne.n	8001416 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d105      	bne.n	800144a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800143e:	4b3c      	ldr	r3, [pc, #240]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a3b      	ldr	r2, [pc, #236]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001448:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8087 	beq.w	8001562 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001454:	4b36      	ldr	r3, [pc, #216]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b08      	cmp	r3, #8
 800145e:	d061      	beq.n	8001524 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d146      	bne.n	80014f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001468:	4b33      	ldr	r3, [pc, #204]	@ (8001538 <HAL_RCC_OscConfig+0x4cc>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fb1f 	bl	8000ab0 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fb1b 	bl	8000ab0 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e06d      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001488:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800149c:	d108      	bne.n	80014b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800149e:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	4921      	ldr	r1, [pc, #132]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a19      	ldr	r1, [r3, #32]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	430b      	orrs	r3, r1
 80014c2:	491b      	ldr	r1, [pc, #108]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_RCC_OscConfig+0x4cc>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff faef 	bl	8000ab0 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff faeb 	bl	8000ab0 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e03d      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x46a>
 80014f4:	e035      	b.n	8001562 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_RCC_OscConfig+0x4cc>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fad8 	bl	8000ab0 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fad4 	bl	8000ab0 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e026      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x498>
 8001522:	e01e      	b.n	8001562 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d107      	bne.n	800153c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e019      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
 8001530:	40021000 	.word	0x40021000
 8001534:	40007000 	.word	0x40007000
 8001538:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <HAL_RCC_OscConfig+0x500>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	429a      	cmp	r2, r3
 800154e:	d106      	bne.n	800155e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800155a:	429a      	cmp	r2, r3
 800155c:	d001      	beq.n	8001562 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0d0      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d910      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b67      	ldr	r3, [pc, #412]	@ (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 0207 	bic.w	r2, r3, #7
 800159a:	4965      	ldr	r1, [pc, #404]	@ (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b63      	ldr	r3, [pc, #396]	@ (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0b8      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015cc:	4b59      	ldr	r3, [pc, #356]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a58      	ldr	r2, [pc, #352]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e4:	4b53      	ldr	r3, [pc, #332]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a52      	ldr	r2, [pc, #328]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b50      	ldr	r3, [pc, #320]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	494d      	ldr	r1, [pc, #308]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d040      	beq.n	8001690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b47      	ldr	r3, [pc, #284]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d115      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e07f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	4b41      	ldr	r3, [pc, #260]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e073      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163e:	4b3d      	ldr	r3, [pc, #244]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e06b      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164e:	4b39      	ldr	r3, [pc, #228]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f023 0203 	bic.w	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4936      	ldr	r1, [pc, #216]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001660:	f7ff fa26 	bl	8000ab0 <HAL_GetTick>
 8001664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	e00a      	b.n	800167e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001668:	f7ff fa22 	bl	8000ab0 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e053      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	4b2d      	ldr	r3, [pc, #180]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 020c 	and.w	r2, r3, #12
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	429a      	cmp	r2, r3
 800168e:	d1eb      	bne.n	8001668 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001690:	4b27      	ldr	r3, [pc, #156]	@ (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d210      	bcs.n	80016c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 0207 	bic.w	r2, r3, #7
 80016a6:	4922      	ldr	r1, [pc, #136]	@ (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e032      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4916      	ldr	r1, [pc, #88]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	490e      	ldr	r1, [pc, #56]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016fe:	f000 f821 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 8001702:	4602      	mov	r2, r0
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	490a      	ldr	r1, [pc, #40]	@ (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 8001710:	5ccb      	ldrb	r3, [r1, r3]
 8001712:	fa22 f303 	lsr.w	r3, r2, r3
 8001716:	4a09      	ldr	r2, [pc, #36]	@ (800173c <HAL_RCC_ClockConfig+0x1cc>)
 8001718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_RCC_ClockConfig+0x1d0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f984 	bl	8000a2c <HAL_InitTick>

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40022000 	.word	0x40022000
 8001734:	40021000 	.word	0x40021000
 8001738:	08002b8c 	.word	0x08002b8c
 800173c:	20000018 	.word	0x20000018
 8001740:	2000001c 	.word	0x2000001c

08001744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800175e:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b04      	cmp	r3, #4
 800176c:	d002      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x30>
 800176e:	2b08      	cmp	r3, #8
 8001770:	d003      	beq.n	800177a <HAL_RCC_GetSysClockFreq+0x36>
 8001772:	e027      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x98>)
 8001776:	613b      	str	r3, [r7, #16]
      break;
 8001778:	e027      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	0c9b      	lsrs	r3, r3, #18
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d010      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	0c5b      	lsrs	r3, r3, #17
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	4a11      	ldr	r2, [pc, #68]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800179e:	5cd3      	ldrb	r3, [r2, r3]
 80017a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x98>)
 80017a6:	fb03 f202 	mul.w	r2, r3, r2
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e004      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a0c      	ldr	r2, [pc, #48]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	613b      	str	r3, [r7, #16]
      break;
 80017c2:	e002      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_RCC_GetSysClockFreq+0x98>)
 80017c6:	613b      	str	r3, [r7, #16]
      break;
 80017c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ca:	693b      	ldr	r3, [r7, #16]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	007a1200 	.word	0x007a1200
 80017e0:	08002b9c 	.word	0x08002b9c
 80017e4:	08002bac 	.word	0x08002bac
 80017e8:	003d0900 	.word	0x003d0900

080017ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <RCC_Delay+0x34>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <RCC_Delay+0x38>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0a5b      	lsrs	r3, r3, #9
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001808:	bf00      	nop
  }
  while (Delay --);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1e5a      	subs	r2, r3, #1
 800180e:	60fa      	str	r2, [r7, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f9      	bne.n	8001808 <RCC_Delay+0x1c>
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	20000018 	.word	0x20000018
 8001824:	10624dd3 	.word	0x10624dd3

08001828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e076      	b.n	8001928 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	2b00      	cmp	r3, #0
 8001840:	d108      	bne.n	8001854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800184a:	d009      	beq.n	8001860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
 8001852:	e005      	b.n	8001860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff f81e 	bl	80008bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001896:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018e4:	ea42 0103 	orr.w	r1, r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	0c1a      	lsrs	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f002 0204 	and.w	r2, r2, #4
 8001906:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69da      	ldr	r2, [r3, #28]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001916:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001940:	f7ff f8b6 	bl	8000ab0 <HAL_GetTick>
 8001944:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d001      	beq.n	800195a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001956:	2302      	movs	r3, #2
 8001958:	e12a      	b.n	8001bb0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <HAL_SPI_Transmit+0x36>
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e122      	b.n	8001bb0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_SPI_Transmit+0x48>
 8001974:	2302      	movs	r3, #2
 8001976:	e11b      	b.n	8001bb0 <HAL_SPI_Transmit+0x280>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2203      	movs	r2, #3
 8001984:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	88fa      	ldrh	r2, [r7, #6]
 8001998:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	88fa      	ldrh	r2, [r7, #6]
 800199e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019c6:	d10f      	bne.n	80019e8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019f2:	2b40      	cmp	r3, #64	@ 0x40
 80019f4:	d007      	beq.n	8001a06 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a0e:	d152      	bne.n	8001ab6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_SPI_Transmit+0xee>
 8001a18:	8b7b      	ldrh	r3, [r7, #26]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d145      	bne.n	8001aaa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	881a      	ldrh	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	1c9a      	adds	r2, r3, #2
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a42:	e032      	b.n	8001aaa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d112      	bne.n	8001a78 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	881a      	ldrh	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	1c9a      	adds	r2, r3, #2
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a76:	e018      	b.n	8001aaa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a78:	f7ff f81a 	bl	8000ab0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d803      	bhi.n	8001a90 <HAL_SPI_Transmit+0x160>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8e:	d102      	bne.n	8001a96 <HAL_SPI_Transmit+0x166>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e082      	b.n	8001bb0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1c7      	bne.n	8001a44 <HAL_SPI_Transmit+0x114>
 8001ab4:	e053      	b.n	8001b5e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <HAL_SPI_Transmit+0x194>
 8001abe:	8b7b      	ldrh	r3, [r7, #26]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d147      	bne.n	8001b54 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	330c      	adds	r3, #12
 8001ace:	7812      	ldrb	r2, [r2, #0]
 8001ad0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001aea:	e033      	b.n	8001b54 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d113      	bne.n	8001b22 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	330c      	adds	r3, #12
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001b20:	e018      	b.n	8001b54 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b22:	f7fe ffc5 	bl	8000ab0 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d803      	bhi.n	8001b3a <HAL_SPI_Transmit+0x20a>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b38:	d102      	bne.n	8001b40 <HAL_SPI_Transmit+0x210>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e02d      	b.n	8001bb0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1c6      	bne.n	8001aec <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	6839      	ldr	r1, [r7, #0]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 fbc4 	bl	80022f0 <SPI_EndRxTxTransaction>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2220      	movs	r2, #32
 8001b72:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10a      	bne.n	8001b92 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001bae:	2300      	movs	r3, #0
  }
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d001      	beq.n	8001bd8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e104      	b.n	8001de2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001be0:	d112      	bne.n	8001c08 <HAL_SPI_Receive+0x50>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10e      	bne.n	8001c08 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2204      	movs	r2, #4
 8001bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001bf2:	88fa      	ldrh	r2, [r7, #6]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f8f3 	bl	8001dea <HAL_SPI_TransmitReceive>
 8001c04:	4603      	mov	r3, r0
 8001c06:	e0ec      	b.n	8001de2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c08:	f7fe ff52 	bl	8000ab0 <HAL_GetTick>
 8001c0c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_SPI_Receive+0x62>
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0e1      	b.n	8001de2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_SPI_Receive+0x74>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e0da      	b.n	8001de2 <HAL_SPI_Receive+0x22a>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2204      	movs	r2, #4
 8001c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	88fa      	ldrh	r2, [r7, #6]
 8001c4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	88fa      	ldrh	r2, [r7, #6]
 8001c52:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c7a:	d10f      	bne.n	8001c9c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca6:	2b40      	cmp	r3, #64	@ 0x40
 8001ca8:	d007      	beq.n	8001cba <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d170      	bne.n	8001da4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001cc2:	e035      	b.n	8001d30 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d115      	bne.n	8001cfe <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f103 020c 	add.w	r2, r3, #12
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001cfc:	e018      	b.n	8001d30 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cfe:	f7fe fed7 	bl	8000ab0 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d803      	bhi.n	8001d16 <HAL_SPI_Receive+0x15e>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d102      	bne.n	8001d1c <HAL_SPI_Receive+0x164>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e058      	b.n	8001de2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1c4      	bne.n	8001cc4 <HAL_SPI_Receive+0x10c>
 8001d3a:	e038      	b.n	8001dae <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d113      	bne.n	8001d72 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d54:	b292      	uxth	r2, r2
 8001d56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5c:	1c9a      	adds	r2, r3, #2
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d70:	e018      	b.n	8001da4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d72:	f7fe fe9d 	bl	8000ab0 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d803      	bhi.n	8001d8a <HAL_SPI_Receive+0x1d2>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d102      	bne.n	8001d90 <HAL_SPI_Receive+0x1d8>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e01e      	b.n	8001de2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1c6      	bne.n	8001d3c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	6839      	ldr	r1, [r7, #0]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 fa4a 	bl	800224c <SPI_EndRxTransaction>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8001de0:	2300      	movs	r3, #0
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b08a      	sub	sp, #40	@ 0x28
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dfc:	f7fe fe58 	bl	8000ab0 <HAL_GetTick>
 8001e00:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e08:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e14:	7ffb      	ldrb	r3, [r7, #31]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d00c      	beq.n	8001e34 <HAL_SPI_TransmitReceive+0x4a>
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e20:	d106      	bne.n	8001e30 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <HAL_SPI_TransmitReceive+0x46>
 8001e2a:	7ffb      	ldrb	r3, [r7, #31]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d001      	beq.n	8001e34 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001e30:	2302      	movs	r3, #2
 8001e32:	e17f      	b.n	8002134 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_SPI_TransmitReceive+0x5c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_SPI_TransmitReceive+0x5c>
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e174      	b.n	8002134 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_SPI_TransmitReceive+0x6e>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e16d      	b.n	8002134 <HAL_SPI_TransmitReceive+0x34a>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d003      	beq.n	8001e74 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2205      	movs	r2, #5
 8001e70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	887a      	ldrh	r2, [r7, #2]
 8001e96:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb4:	2b40      	cmp	r3, #64	@ 0x40
 8001eb6:	d007      	beq.n	8001ec8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ec6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ed0:	d17e      	bne.n	8001fd0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_SPI_TransmitReceive+0xf6>
 8001eda:	8afb      	ldrh	r3, [r7, #22]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d16c      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee4:	881a      	ldrh	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef0:	1c9a      	adds	r2, r3, #2
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f04:	e059      	b.n	8001fba <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d11b      	bne.n	8001f4c <HAL_SPI_TransmitReceive+0x162>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_SPI_TransmitReceive+0x162>
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d113      	bne.n	8001f4c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f28:	881a      	ldrh	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	1c9a      	adds	r2, r3, #2
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d119      	bne.n	8001f8e <HAL_SPI_TransmitReceive+0x1a4>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d014      	beq.n	8001f8e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f76:	1c9a      	adds	r2, r3, #2
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f8e:	f7fe fd8f 	bl	8000ab0 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d80d      	bhi.n	8001fba <HAL_SPI_TransmitReceive+0x1d0>
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d009      	beq.n	8001fba <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e0bc      	b.n	8002134 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1a0      	bne.n	8001f06 <HAL_SPI_TransmitReceive+0x11c>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d19b      	bne.n	8001f06 <HAL_SPI_TransmitReceive+0x11c>
 8001fce:	e082      	b.n	80020d6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_SPI_TransmitReceive+0x1f4>
 8001fd8:	8afb      	ldrh	r3, [r7, #22]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d171      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002004:	e05d      	b.n	80020c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b02      	cmp	r3, #2
 8002012:	d11c      	bne.n	800204e <HAL_SPI_TransmitReceive+0x264>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d017      	beq.n	800204e <HAL_SPI_TransmitReceive+0x264>
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	2b01      	cmp	r3, #1
 8002022:	d114      	bne.n	800204e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	330c      	adds	r3, #12
 800202e:	7812      	ldrb	r2, [r2, #0]
 8002030:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d119      	bne.n	8002090 <HAL_SPI_TransmitReceive+0x2a6>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d014      	beq.n	8002090 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800208c:	2301      	movs	r3, #1
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002090:	f7fe fd0e 	bl	8000ab0 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800209c:	429a      	cmp	r2, r3
 800209e:	d803      	bhi.n	80020a8 <HAL_SPI_TransmitReceive+0x2be>
 80020a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a6:	d102      	bne.n	80020ae <HAL_SPI_TransmitReceive+0x2c4>
 80020a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e038      	b.n	8002134 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d19c      	bne.n	8002006 <HAL_SPI_TransmitReceive+0x21c>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d197      	bne.n	8002006 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020d6:	6a3a      	ldr	r2, [r7, #32]
 80020d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f908 	bl	80022f0 <SPI_EndRxTxTransaction>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2220      	movs	r2, #32
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e01d      	b.n	8002134 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002132:	2300      	movs	r3, #0
  }
}
 8002134:	4618      	mov	r0, r3
 8002136:	3728      	adds	r7, #40	@ 0x28
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800214c:	f7fe fcb0 	bl	8000ab0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	4413      	add	r3, r2
 800215a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800215c:	f7fe fca8 	bl	8000ab0 <HAL_GetTick>
 8002160:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002162:	4b39      	ldr	r3, [pc, #228]	@ (8002248 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	0d1b      	lsrs	r3, r3, #20
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	fb02 f303 	mul.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002172:	e054      	b.n	800221e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217a:	d050      	beq.n	800221e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800217c:	f7fe fc98 	bl	8000ab0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	429a      	cmp	r2, r3
 800218a:	d902      	bls.n	8002192 <SPI_WaitFlagStateUntilTimeout+0x56>
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d13d      	bne.n	800220e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80021a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021aa:	d111      	bne.n	80021d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021b4:	d004      	beq.n	80021c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021be:	d107      	bne.n	80021d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021d8:	d10f      	bne.n	80021fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e017      	b.n	800223e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3b01      	subs	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4013      	ands	r3, r2
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	429a      	cmp	r2, r3
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	429a      	cmp	r2, r3
 800223a:	d19b      	bne.n	8002174 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000018 	.word	0x20000018

0800224c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af02      	add	r7, sp, #8
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002260:	d111      	bne.n	8002286 <SPI_EndRxTransaction+0x3a>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800226a:	d004      	beq.n	8002276 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002274:	d107      	bne.n	8002286 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002284:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800228e:	d117      	bne.n	80022c0 <SPI_EndRxTransaction+0x74>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002298:	d112      	bne.n	80022c0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2101      	movs	r1, #1
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff ff49 	bl	800213c <SPI_WaitFlagStateUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01a      	beq.n	80022e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e013      	b.n	80022e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2200      	movs	r2, #0
 80022c8:	2180      	movs	r1, #128	@ 0x80
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f7ff ff36 	bl	800213c <SPI_WaitFlagStateUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022da:	f043 0220 	orr.w	r2, r3, #32
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e000      	b.n	80022e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2201      	movs	r2, #1
 8002304:	2102      	movs	r1, #2
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff ff18 	bl	800213c <SPI_WaitFlagStateUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e013      	b.n	800234a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2200      	movs	r2, #0
 800232a:	2180      	movs	r1, #128	@ 0x80
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff ff05 	bl	800213c <SPI_WaitFlagStateUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e000      	b.n	800234a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <InicializoVariables>:
/**
 * @brief  Inicialización de variables de configuración por defecto.
 * @param  None
 * @retval None
 */
static void InicializoVariables(void) {
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0

	if(data_config_s.my_address == 0 || data_config_s.my_panid == 0) {
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <InicializoVariables+0x4c>)
 800235a:	8b9b      	ldrh	r3, [r3, #28]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <InicializoVariables+0x14>
 8002360:	4b0f      	ldr	r3, [pc, #60]	@ (80023a0 <InicializoVariables+0x4c>)
 8002362:	8b5b      	ldrh	r3, [r3, #26]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d118      	bne.n	800239a <InicializoVariables+0x46>

		strncpy((char *)data_config_s.security_key,
 8002368:	2210      	movs	r2, #16
 800236a:	490e      	ldr	r1, [pc, #56]	@ (80023a4 <InicializoVariables+0x50>)
 800236c:	480e      	ldr	r0, [pc, #56]	@ (80023a8 <InicializoVariables+0x54>)
 800236e:	f000 fbab 	bl	8002ac8 <strncpy>
				(char *) default_security_key,
				SEC_KEY_SIZE);
		strncpy((char *)data_config_s.my_mac,
 8002372:	2208      	movs	r2, #8
 8002374:	490d      	ldr	r1, [pc, #52]	@ (80023ac <InicializoVariables+0x58>)
 8002376:	480e      	ldr	r0, [pc, #56]	@ (80023b0 <InicializoVariables+0x5c>)
 8002378:	f000 fba6 	bl	8002ac8 <strncpy>
				(char *) default_mac_address,
				LARGE_MAC_SIZE);
		data_config_s.sequence_number = DEFAULT_SEC_NUMBER;
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <InicializoVariables+0x4c>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
		data_config_s.my_channel = DEFAULT_CHANNEL;
 8002382:	4b07      	ldr	r3, [pc, #28]	@ (80023a0 <InicializoVariables+0x4c>)
 8002384:	2203      	movs	r2, #3
 8002386:	705a      	strb	r2, [r3, #1]
		data_config_s.my_panid = MY_DEFAULT_PAN_ID;
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <InicializoVariables+0x4c>)
 800238a:	f241 2234 	movw	r2, #4660	@ 0x1234
 800238e:	835a      	strh	r2, [r3, #26]
		data_config_s.my_address = MY_DEFAULT_ADDRESS;
 8002390:	4b03      	ldr	r3, [pc, #12]	@ (80023a0 <InicializoVariables+0x4c>)
 8002392:	f241 1211 	movw	r2, #4369	@ 0x1111
 8002396:	839a      	strh	r2, [r3, #28]
	}
	return;
 8002398:	bf00      	nop
 800239a:	bf00      	nop
}
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000124 	.word	0x20000124
 80023a4:	08002bb8 	.word	0x08002bb8
 80023a8:	20000126 	.word	0x20000126
 80023ac:	08002bb0 	.word	0x08002bb0
 80023b0:	20000136 	.word	0x20000136

080023b4 <InicializoMRF24>:
/**
 * @brief  Inicialización del módulo MRF24J40MA
 * @param  None
 * @retval Estado de la operación (TIME_OUT_OCURRIDO, INICIALIZACION_OK)
 */
static mrf24_state_t InicializoMRF24(void) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0

	uint8_t lectura;
	delayNoBloqueanteData_t delay_time_out;
	DelayInit(&delay_time_out, MRF_TIME_OUT);
 80023ba:	463b      	mov	r3, r7
 80023bc:	21c8      	movs	r1, #200	@ 0xc8
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fd ff4e 	bl	8000260 <DelayInit>
	SetShortAddr(SOFTRST, RSTPWR | RSTBB | RSTMAC);
 80023c4:	2107      	movs	r1, #7
 80023c6:	202a      	movs	r0, #42	@ 0x2a
 80023c8:	f000 f887 	bl	80024da <SetShortAddr>
	DelayReset(&delay_time_out);
 80023cc:	463b      	mov	r3, r7
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fd ff8c 	bl	80002ec <DelayReset>

	do {

		lectura = GetShortAddr(SOFTRST);
 80023d4:	202a      	movs	r0, #42	@ 0x2a
 80023d6:	f000 f8a0 	bl	800251a <GetShortAddr>
 80023da:	4603      	mov	r3, r0
 80023dc:	73fb      	strb	r3, [r7, #15]
		if(DelayRead(&delay_time_out))
 80023de:	463b      	mov	r3, r7
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fd ff54 	bl	800028e <DelayRead>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <InicializoMRF24+0x3c>
			return TIME_OUT_OCURRIDO;
 80023ec:	2305      	movs	r3, #5
 80023ee:	e070      	b.n	80024d2 <InicializoMRF24+0x11e>
	}while((lectura & (RSTPWR | RSTBB | RSTMAC)) != VACIO);
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ec      	bne.n	80023d4 <InicializoMRF24+0x20>
	delay_t(WAIT_50_MS);
 80023fa:	2032      	movs	r0, #50	@ 0x32
 80023fc:	f7fe fb62 	bl	8000ac4 <HAL_Delay>
	SetShortAddr(RXFLUSH, RXFLUSH_RESET);
 8002400:	2101      	movs	r1, #1
 8002402:	200d      	movs	r0, #13
 8002404:	f000 f869 	bl	80024da <SetShortAddr>
	SetDeviceAddress();
 8002408:	f000 f906 	bl	8002618 <SetDeviceAddress>
	SetDeviceMACAddress();
 800240c:	f000 f92a 	bl	8002664 <SetDeviceMACAddress>
	SetLongAddr(RFCON1, VCOOPT1 | VCOOPT0);
 8002410:	2103      	movs	r1, #3
 8002412:	f240 2001 	movw	r0, #513	@ 0x201
 8002416:	f000 f8a1 	bl	800255c <SetLongAddr>
	SetLongAddr(RFCON2, PLLEN);
 800241a:	2180      	movs	r1, #128	@ 0x80
 800241c:	f240 2002 	movw	r0, #514	@ 0x202
 8002420:	f000 f89c 	bl	800255c <SetLongAddr>
	SetLongAddr(RFCON3, P20dBm | P0dBm);
 8002424:	2180      	movs	r1, #128	@ 0x80
 8002426:	f240 2003 	movw	r0, #515	@ 0x203
 800242a:	f000 f897 	bl	800255c <SetLongAddr>
	SetLongAddr(RFCON6, TXFIL | _20MRECVR);
 800242e:	2190      	movs	r1, #144	@ 0x90
 8002430:	f240 2006 	movw	r0, #518	@ 0x206
 8002434:	f000 f892 	bl	800255c <SetLongAddr>
	SetLongAddr(RFCON7, SLPCLK100KHZ);
 8002438:	2180      	movs	r1, #128	@ 0x80
 800243a:	f240 2007 	movw	r0, #519	@ 0x207
 800243e:	f000 f88d 	bl	800255c <SetLongAddr>
	SetLongAddr(RFCON8, RFVCO);
 8002442:	2110      	movs	r1, #16
 8002444:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8002448:	f000 f888 	bl	800255c <SetLongAddr>
	SetLongAddr(SLPCON1, CLKOUTDIS | SLPCLKDIV0);
 800244c:	2121      	movs	r1, #33	@ 0x21
 800244e:	f44f 7008 	mov.w	r0, #544	@ 0x220
 8002452:	f000 f883 	bl	800255c <SetLongAddr>
	SetShortAddr(BBREG2, CCA_MODE_1);
 8002456:	2180      	movs	r1, #128	@ 0x80
 8002458:	203a      	movs	r0, #58	@ 0x3a
 800245a:	f000 f83e 	bl	80024da <SetShortAddr>
	SetShortAddr(BBREG6, RSSIMODE2);
 800245e:	2140      	movs	r1, #64	@ 0x40
 8002460:	203e      	movs	r0, #62	@ 0x3e
 8002462:	f000 f83a 	bl	80024da <SetShortAddr>
	SetShortAddr(CCAEDTH, CCAEDTH2 | CCAEDTH1);
 8002466:	2106      	movs	r1, #6
 8002468:	203f      	movs	r0, #63	@ 0x3f
 800246a:	f000 f836 	bl	80024da <SetShortAddr>
	SetShortAddr(PACON2, FIFOEN | TXONTS2 | TXONTS1);
 800246e:	2198      	movs	r1, #152	@ 0x98
 8002470:	2018      	movs	r0, #24
 8002472:	f000 f832 	bl	80024da <SetShortAddr>
	SetShortAddr(TXSTBL, RFSTBL3 | RFSTBL0 | MSIFS2 | MSIFS0);
 8002476:	2195      	movs	r1, #149	@ 0x95
 8002478:	202e      	movs	r0, #46	@ 0x2e
 800247a:	f000 f82e 	bl	80024da <SetShortAddr>
	DelayReset(&delay_time_out);
 800247e:	463b      	mov	r3, r7
 8002480:	4618      	mov	r0, r3
 8002482:	f7fd ff33 	bl	80002ec <DelayReset>

	do {

		lectura = GetLongAddr(RFSTATE) & RX;
 8002486:	f240 200f 	movw	r0, #527	@ 0x20f
 800248a:	f000 f88b 	bl	80025a4 <GetLongAddr>
 800248e:	4603      	mov	r3, r0
 8002490:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002494:	73fb      	strb	r3, [r7, #15]
		if(DelayRead(&delay_time_out))
 8002496:	463b      	mov	r3, r7
 8002498:	4618      	mov	r0, r3
 800249a:	f7fd fef8 	bl	800028e <DelayRead>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <InicializoMRF24+0xf4>
			return TIME_OUT_OCURRIDO;
 80024a4:	2305      	movs	r3, #5
 80024a6:	e014      	b.n	80024d2 <InicializoMRF24+0x11e>
	}while(lectura != RX);
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80024ac:	d1eb      	bne.n	8002486 <InicializoMRF24+0xd2>
	SetShortAddr(MRFINTCON, SLPIE_DIS | WAKEIE_DIS | HSYMTMRIE_DIS | SECIE_DIS
 80024ae:	21f5      	movs	r1, #245	@ 0xf5
 80024b0:	2032      	movs	r0, #50	@ 0x32
 80024b2:	f000 f812 	bl	80024da <SetShortAddr>
					| TXG2IE_DIS | TXNIE_DIS);
	SetShortAddr(ACKTMOUT, DRPACK | MAWD5 | MAWD4 | MAWD3 | MAWD0);
 80024b6:	21b9      	movs	r1, #185	@ 0xb9
 80024b8:	2012      	movs	r0, #18
 80024ba:	f000 f80e 	bl	80024da <SetShortAddr>
	SetChannel();
 80024be:	f000 f893 	bl	80025e8 <SetChannel>
	SetShortAddr(RXMCR, VACIO);
 80024c2:	2100      	movs	r1, #0
 80024c4:	2000      	movs	r0, #0
 80024c6:	f000 f808 	bl	80024da <SetShortAddr>
	(void)GetShortAddr(INTSTAT);
 80024ca:	2031      	movs	r0, #49	@ 0x31
 80024cc:	f000 f825 	bl	800251a <GetShortAddr>
	return INICIALIZACION_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <SetShortAddr>:
 * @retval None
 * @note   Al escribir direcciones cortas (SHORT ADDRESS REGISTER) se comienza
 *         con el MSB en 0 indicando una dirección corta, 6 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura.
 */
static void SetShortAddr(uint8_t reg_address, uint8_t valor) {
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	460a      	mov	r2, r1
 80024e4:	71fb      	strb	r3, [r7, #7]
 80024e6:	4613      	mov	r3, r2
 80024e8:	71bb      	strb	r3, [r7, #6]

	reg_address = (uint8_t) (reg_address << SHIFT_SHORT_ADDR) | WRITE_8_BITS;
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	71fb      	strb	r3, [r7, #7]
	SetCSPin(DISABLE);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f000 fa50 	bl	800299c <SetCSPin>
	WriteByteSPIPort(reg_address);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fa94 	bl	8002a2c <WriteByteSPIPort>
	WriteByteSPIPort(valor);
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fa90 	bl	8002a2c <WriteByteSPIPort>
	SetCSPin(ENABLE);
 800250c:	2001      	movs	r0, #1
 800250e:	f000 fa45 	bl	800299c <SetCSPin>
	return;
 8002512:	bf00      	nop
}
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <GetShortAddr>:
 * @retval Valor devuelto por el módulo - 1 byte
 * @note   Al escribir direcciones cortas (SHORT ADDRESS REGISTER) se comienza
 *         con el MSB en 0 indicando una dirección corta, 6 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura.
 */
static uint8_t GetShortAddr(uint8_t reg_address) {
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]

	uint8_t leido_spi = VACIO;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
	reg_address = (uint8_t) (reg_address << SHIFT_SHORT_ADDR) & READ_8_BITS;
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002532:	71fb      	strb	r3, [r7, #7]
	SetCSPin(DISABLE);
 8002534:	2000      	movs	r0, #0
 8002536:	f000 fa31 	bl	800299c <SetCSPin>
	WriteByteSPIPort(reg_address);
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fa75 	bl	8002a2c <WriteByteSPIPort>
	leido_spi = ReadByteSPIPort();
 8002542:	f000 faa7 	bl	8002a94 <ReadByteSPIPort>
 8002546:	4603      	mov	r3, r0
 8002548:	73fb      	strb	r3, [r7, #15]
	SetCSPin(ENABLE);
 800254a:	2001      	movs	r0, #1
 800254c:	f000 fa26 	bl	800299c <SetCSPin>
	return leido_spi;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <SetLongAddr>:
 * @note   Al escribir direcciones largas (LONG ADDRESS REGISTER) se comienza
 *         con el MSB en 1 indicando una dirección larga, 10 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura. En
 *         los 4 bits restantes (LSB) no importa el valor.
 */
static void SetLongAddr(uint16_t reg_address, uint8_t valor) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	460a      	mov	r2, r1
 8002566:	80fb      	strh	r3, [r7, #6]
 8002568:	4613      	mov	r3, r2
 800256a:	717b      	strb	r3, [r7, #5]

	reg_address = (reg_address << SHIFT_LONG_ADDR) | WRITE_16_BITS;
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	015b      	lsls	r3, r3, #5
 8002570:	b21a      	sxth	r2, r3
 8002572:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <SetLongAddr+0x44>)
 8002574:	4313      	orrs	r3, r2
 8002576:	b21b      	sxth	r3, r3
 8002578:	80fb      	strh	r3, [r7, #6]
	SetCSPin(DISABLE);
 800257a:	2000      	movs	r0, #0
 800257c:	f000 fa0e 	bl	800299c <SetCSPin>
	Write2ByteSPIPort(reg_address);
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fa64 	bl	8002a50 <Write2ByteSPIPort>
	WriteByteSPIPort(valor);
 8002588:	797b      	ldrb	r3, [r7, #5]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fa4e 	bl	8002a2c <WriteByteSPIPort>
	SetCSPin(ENABLE);
 8002590:	2001      	movs	r0, #1
 8002592:	f000 fa03 	bl	800299c <SetCSPin>
	return;
 8002596:	bf00      	nop
}
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	ffff8010 	.word	0xffff8010

080025a4 <GetLongAddr>:
 * @note   Al escribir direcciones largas (LONG ADDRESS REGISTER) se comienza
 *         con el MSB en 1 indicando una dirección larga, 10 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura. En
 *         los 4 bits restantes (LSB) no importa el valor.
 */
static uint8_t GetLongAddr(uint16_t reg_address) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]

	uint8_t respuesta;
	reg_address = (reg_address << SHIFT_LONG_ADDR) | READ_16_BITS;
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	015b      	lsls	r3, r3, #5
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025bc:	b21b      	sxth	r3, r3
 80025be:	80fb      	strh	r3, [r7, #6]
	SetCSPin(DISABLE);
 80025c0:	2000      	movs	r0, #0
 80025c2:	f000 f9eb 	bl	800299c <SetCSPin>
	Write2ByteSPIPort(reg_address);
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fa41 	bl	8002a50 <Write2ByteSPIPort>
	respuesta = ReadByteSPIPort();
 80025ce:	f000 fa61 	bl	8002a94 <ReadByteSPIPort>
 80025d2:	4603      	mov	r3, r0
 80025d4:	73fb      	strb	r3, [r7, #15]
	SetCSPin(ENABLE);
 80025d6:	2001      	movs	r0, #1
 80025d8:	f000 f9e0 	bl	800299c <SetCSPin>
	return respuesta;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <SetChannel>:
/**
 * @brief  Seteo en el módulo en canal guardado en mrf24_data_config
 * @param  None
 * @retval None
 */
static void SetChannel(void) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0

	SetLongAddr(RFCON0, data_config_s.my_channel);
 80025ec:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <SetChannel+0x2c>)
 80025ee:	785b      	ldrb	r3, [r3, #1]
 80025f0:	4619      	mov	r1, r3
 80025f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80025f6:	f7ff ffb1 	bl	800255c <SetLongAddr>
	SetShortAddr(RFCTL, RFRST_HOLD);
 80025fa:	2104      	movs	r1, #4
 80025fc:	2036      	movs	r0, #54	@ 0x36
 80025fe:	f7ff ff6c 	bl	80024da <SetShortAddr>
	SetShortAddr(RFCTL, VACIO);
 8002602:	2100      	movs	r1, #0
 8002604:	2036      	movs	r0, #54	@ 0x36
 8002606:	f7ff ff68 	bl	80024da <SetShortAddr>
	delay_t(WAIT_1_MS);
 800260a:	2001      	movs	r0, #1
 800260c:	f7fe fa5a 	bl	8000ac4 <HAL_Delay>
	return;
 8002610:	bf00      	nop
}
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000124 	.word	0x20000124

08002618 <SetDeviceAddress>:
/**
 * @brief  Seteo en el módulo la dirección corta guardada en mrf24_data_config
 * @param  None
 * @retval None
 */
static void SetDeviceAddress(void) {
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0

	SetShortAddr(SADRH, (uint8_t) (data_config_s.my_address >> SHIFT_BYTE));
 800261c:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <SetDeviceAddress+0x48>)
 800261e:	8b9b      	ldrh	r3, [r3, #28]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	b29b      	uxth	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	4619      	mov	r1, r3
 8002628:	2004      	movs	r0, #4
 800262a:	f7ff ff56 	bl	80024da <SetShortAddr>
	SetShortAddr(SADRL, (uint8_t) (data_config_s.my_address));
 800262e:	4b0c      	ldr	r3, [pc, #48]	@ (8002660 <SetDeviceAddress+0x48>)
 8002630:	8b9b      	ldrh	r3, [r3, #28]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4619      	mov	r1, r3
 8002636:	2003      	movs	r0, #3
 8002638:	f7ff ff4f 	bl	80024da <SetShortAddr>
	SetShortAddr(PANIDH, (uint8_t) (data_config_s.my_panid >> SHIFT_BYTE));
 800263c:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <SetDeviceAddress+0x48>)
 800263e:	8b5b      	ldrh	r3, [r3, #26]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	b29b      	uxth	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	4619      	mov	r1, r3
 8002648:	2002      	movs	r0, #2
 800264a:	f7ff ff46 	bl	80024da <SetShortAddr>
	SetShortAddr(PANIDL, (uint8_t) (data_config_s.my_panid));
 800264e:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <SetDeviceAddress+0x48>)
 8002650:	8b5b      	ldrh	r3, [r3, #26]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4619      	mov	r1, r3
 8002656:	2001      	movs	r0, #1
 8002658:	f7ff ff3f 	bl	80024da <SetShortAddr>
	return;
 800265c:	bf00      	nop
}
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000124 	.word	0x20000124

08002664 <SetDeviceMACAddress>:
/**
 * @brief  Seteo en el módulo la dirección mac guardada en mrf24_data_config.
 * @param  None.
 * @retval None.
 */
static void SetDeviceMACAddress(void) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < LARGE_MAC_SIZE; i++) {
 800266a:	2300      	movs	r3, #0
 800266c:	71fb      	strb	r3, [r7, #7]
 800266e:	e00d      	b.n	800268c <SetDeviceMACAddress+0x28>

		SetShortAddr(EADR0 + i, data_config_s.my_mac[i]);
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	3305      	adds	r3, #5
 8002674:	b2da      	uxtb	r2, r3
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	4908      	ldr	r1, [pc, #32]	@ (800269c <SetDeviceMACAddress+0x38>)
 800267a:	440b      	add	r3, r1
 800267c:	7c9b      	ldrb	r3, [r3, #18]
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f7ff ff2a 	bl	80024da <SetShortAddr>
	for(uint8_t i = 0; i < LARGE_MAC_SIZE; i++) {
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	3301      	adds	r3, #1
 800268a:	71fb      	strb	r3, [r7, #7]
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	2b07      	cmp	r3, #7
 8002690:	d9ee      	bls.n	8002670 <SetDeviceMACAddress+0xc>
	}
	return;
 8002692:	bf00      	nop
}
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000124 	.word	0x20000124

080026a0 <MRF24J40Init>:
/**
 * @brief  Inicialización del módulo MRF24J40MA.
 * @param  None.
 * @retval Estado de la operación (TIME_OUT_OCURRIDO, INICIALIZACION_OK).
 */
mrf24_state_t MRF24J40Init(void) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0

	InicializoVariables();
 80026a4:	f7ff fe56 	bl	8002354 <InicializoVariables>
	InicializoPines();
 80026a8:	f000 f96a 	bl	8002980 <InicializoPines>
	delay_t(WAIT_1_MS);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f7fe fa09 	bl	8000ac4 <HAL_Delay>
	SetResetPin(1);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f000 f996 	bl	80029e4 <SetResetPin>
	delay_t(WAIT_1_MS);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7fe fa03 	bl	8000ac4 <HAL_Delay>
	estadoActual = InicializoMRF24();
 80026be:	f7ff fe79 	bl	80023b4 <InicializoMRF24>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b03      	ldr	r3, [pc, #12]	@ (80026d4 <MRF24J40Init+0x34>)
 80026c8:	701a      	strb	r2, [r3, #0]
	return estadoActual;
 80026ca:	4b02      	ldr	r3, [pc, #8]	@ (80026d4 <MRF24J40Init+0x34>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200000e8 	.word	0x200000e8

080026d8 <MRF24GetConfig>:
 * @brief   Devuelvo el puntero a la estructura que contiene la información de
 * 			configuración del módulo MRF24J40.
 * @param   None.
 * @retval  Puntero a la estructura tipo mrf24_data_config_t.
 */
mrf24_data_config_t * MRF24GetConfig(void) {
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0

	return &data_config_s;
 80026dc:	4b02      	ldr	r3, [pc, #8]	@ (80026e8 <MRF24GetConfig+0x10>)
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000124 	.word	0x20000124

080026ec <MRF24TransmitirDato>:
 * @brief   Envío la información almacenada en la estructura de salida.
 * @param   None.
 * @retval  Estado de la operación (OPERACION_NO_REALIZADA,
 * 			TRANSMISION_REALIZADA, NO_DIRECCION, MSG_NO_PRESENTE).
 */
mrf24_state_t MRF24TransmitirDato(mrf24_data_out_t * p_info_out_s) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

	if(estadoActual != INICIALIZACION_OK)
 80026f4:	4b64      	ldr	r3, [pc, #400]	@ (8002888 <MRF24TransmitirDato+0x19c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MRF24TransmitirDato+0x14>
		return OPERACION_NO_REALIZADA;
 80026fc:	2306      	movs	r3, #6
 80026fe:	e0be      	b.n	800287e <MRF24TransmitirDato+0x192>

	if(p_info_out_s->dest_address == VACIO)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	885b      	ldrh	r3, [r3, #2]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <MRF24TransmitirDato+0x20>
		return NO_DIRECCION;
 8002708:	2309      	movs	r3, #9
 800270a:	e0b8      	b.n	800287e <MRF24TransmitirDato+0x192>
	uint8_t pos_mem = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
	unsigned largo_mensaje = strlen(p_info_out_s->buffer);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3306      	adds	r3, #6
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd fd23 	bl	8000160 <strlen>
 800271a:	60b8      	str	r0, [r7, #8]

	if(largo_mensaje == 0)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <MRF24TransmitirDato+0x3a>
		return MSG_NO_PRESENTE;
 8002722:	2303      	movs	r3, #3
 8002724:	e0ab      	b.n	800287e <MRF24TransmitirDato+0x192>
	SetLongAddr(pos_mem++, HEAD_LENGTH);
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	73fa      	strb	r2, [r7, #15]
 800272c:	210b      	movs	r1, #11
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ff14 	bl	800255c <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t)largo_mensaje + HEAD_LENGTH);
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	73fa      	strb	r2, [r7, #15]
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	330b      	adds	r3, #11
 8002742:	b2db      	uxtb	r3, r3
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f7ff ff08 	bl	800255c <SetLongAddr>
	SetLongAddr(pos_mem++, DATA | ACK_REQ | INTRA_PAN);			// LSB.
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	73fa      	strb	r2, [r7, #15]
 8002752:	2161      	movs	r1, #97	@ 0x61
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff01 	bl	800255c <SetLongAddr>
	SetLongAddr(pos_mem++, SHORT_S_ADD | SHORT_D_ADD);			// MSB.
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	73fa      	strb	r2, [r7, #15]
 8002760:	2188      	movs	r1, #136	@ 0x88
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fefa 	bl	800255c <SetLongAddr>
	SetLongAddr(pos_mem++, data_config_s.sequence_number++);
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	73fa      	strb	r2, [r7, #15]
 800276e:	4618      	mov	r0, r3
 8002770:	4b46      	ldr	r3, [pc, #280]	@ (800288c <MRF24TransmitirDato+0x1a0>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	b2d1      	uxtb	r1, r2
 8002778:	4a44      	ldr	r2, [pc, #272]	@ (800288c <MRF24TransmitirDato+0x1a0>)
 800277a:	7011      	strb	r1, [r2, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	f7ff feed 	bl	800255c <SetLongAddr>

	if(p_info_out_s->dest_panid == VACIO)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <MRF24TransmitirDato+0xa6>
		p_info_out_s->dest_panid = data_config_s.my_panid;
 800278a:	4b40      	ldr	r3, [pc, #256]	@ (800288c <MRF24TransmitirDato+0x1a0>)
 800278c:	8b5a      	ldrh	r2, [r3, #26]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	801a      	strh	r2, [r3, #0]
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_panid);
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	73fa      	strb	r2, [r7, #15]
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4619      	mov	r1, r3
 80027a2:	4610      	mov	r0, r2
 80027a4:	f7ff feda 	bl	800255c <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_panid >> SHIFT_BYTE));
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	73fa      	strb	r2, [r7, #15]
 80027ae:	461a      	mov	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f7ff fecd 	bl	800255c <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_address);
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	73fa      	strb	r2, [r7, #15]
 80027c8:	461a      	mov	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	885b      	ldrh	r3, [r3, #2]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f7ff fec2 	bl	800255c <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_address >> SHIFT_BYTE));
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	73fa      	strb	r2, [r7, #15]
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	885b      	ldrh	r3, [r3, #2]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	4619      	mov	r1, r3
 80027ec:	4610      	mov	r0, r2
 80027ee:	f7ff feb5 	bl	800255c <SetLongAddr>

	if(p_info_out_s->origin_address == VACIO)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	889b      	ldrh	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <MRF24TransmitirDato+0x116>
		p_info_out_s->origin_address = data_config_s.my_address;
 80027fa:	4b24      	ldr	r3, [pc, #144]	@ (800288c <MRF24TransmitirDato+0x1a0>)
 80027fc:	8b9a      	ldrh	r2, [r3, #28]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	809a      	strh	r2, [r3, #4]
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->origin_address);
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	73fa      	strb	r2, [r7, #15]
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	889b      	ldrh	r3, [r3, #4]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f7ff fea2 	bl	800255c <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->origin_address >> SHIFT_BYTE));
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	73fa      	strb	r2, [r7, #15]
 800281e:	461a      	mov	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	889b      	ldrh	r3, [r3, #4]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	b29b      	uxth	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f7ff fe95 	bl	800255c <SetLongAddr>

	for(int8_t i = 0; i < largo_mensaje; i++) {
 8002832:	2300      	movs	r3, #0
 8002834:	73bb      	strb	r3, [r7, #14]
 8002836:	e011      	b.n	800285c <MRF24TransmitirDato+0x170>

		SetLongAddr(pos_mem++, p_info_out_s->buffer[i]);
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	73fa      	strb	r2, [r7, #15]
 800283e:	4618      	mov	r0, r3
 8002840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	799b      	ldrb	r3, [r3, #6]
 800284a:	4619      	mov	r1, r3
 800284c:	f7ff fe86 	bl	800255c <SetLongAddr>
	for(int8_t i = 0; i < largo_mensaje; i++) {
 8002850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	3301      	adds	r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	73bb      	strb	r3, [r7, #14]
 800285c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	429a      	cmp	r2, r3
 8002864:	d8e8      	bhi.n	8002838 <MRF24TransmitirDato+0x14c>
	}
	SetLongAddr(pos_mem++, VACIO);
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	73fa      	strb	r2, [r7, #15]
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fe74 	bl	800255c <SetLongAddr>
	SetShortAddr(TXNCON, TXNACKREQ | TXNTRIG);
 8002874:	2105      	movs	r1, #5
 8002876:	201b      	movs	r0, #27
 8002878:	f7ff fe2f 	bl	80024da <SetShortAddr>
	return TRANSMISION_REALIZADA;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200000e8 	.word	0x200000e8
 800288c:	20000124 	.word	0x20000124

08002890 <MRF24IsNewMsg>:
 * @brief   Se levantó la bandera indicando la llegada de un mensaje.
 * @param   None.
 * @retval  Estado de la operación (ERROR_INESPERADO, MSG_PRESENTE,
 *          MSG_NO_PRESENTE).
 */
volatile mrf24_state_t MRF24IsNewMsg(void) {
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0

	if(estadoActual != INICIALIZACION_OK)
 8002894:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <MRF24IsNewMsg+0x2c>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MRF24IsNewMsg+0x10>
		return ERROR_INESPERADO;
 800289c:	2308      	movs	r3, #8
 800289e:	e00a      	b.n	80028b6 <MRF24IsNewMsg+0x26>

	if(!IsMRF24Interrup())
 80028a0:	f000 f8b2 	bl	8002a08 <IsMRF24Interrup>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f083 0301 	eor.w	r3, r3, #1
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MRF24IsNewMsg+0x24>
		return MSG_PRESENTE;
 80028b0:	2302      	movs	r3, #2
 80028b2:	e000      	b.n	80028b6 <MRF24IsNewMsg+0x26>
	return MSG_NO_PRESENTE;
 80028b4:	2303      	movs	r3, #3
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200000e8 	.word	0x200000e8

080028c0 <MRF24ReciboPaquete>:
 * @brief   Recibir un paquete y dejarlo en el bufer de entrada de
 *          mrf24_data_config.
 * @param   None.
 * @retval  Estado de la operación (OPERACION_NO_REALIZADA, MSG_LEIDO).
 */
mrf24_state_t MRF24ReciboPaquete(void) {
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
	/*
	 * agregar la lectura del rssi y del lq, vienen en el paquete del mensaje.
	 */


	if(estadoActual != INICIALIZACION_OK)
 80028c6:	4b27      	ldr	r3, [pc, #156]	@ (8002964 <MRF24ReciboPaquete+0xa4>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MRF24ReciboPaquete+0x12>
		return OPERACION_NO_REALIZADA;
 80028ce:	2306      	movs	r3, #6
 80028d0:	e043      	b.n	800295a <MRF24ReciboPaquete+0x9a>
	SetLongAddr(BBREG1, RXDECINV);
 80028d2:	2104      	movs	r1, #4
 80028d4:	2039      	movs	r0, #57	@ 0x39
 80028d6:	f7ff fe41 	bl	800255c <SetLongAddr>
	SetShortAddr(RXFLUSH, DATAONLY);
 80028da:	2104      	movs	r1, #4
 80028dc:	200d      	movs	r0, #13
 80028de:	f7ff fdfc 	bl	80024da <SetShortAddr>
	uint8_t largo_mensaje = GetLongAddr(RX_FIFO);
 80028e2:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80028e6:	f7ff fe5d 	bl	80025a4 <GetLongAddr>
 80028ea:	4603      	mov	r3, r0
 80028ec:	71bb      	strb	r3, [r7, #6]
	uint16_t add = GetLongAddr(RX_FIFO + 9);
 80028ee:	f240 3009 	movw	r0, #777	@ 0x309
 80028f2:	f7ff fe57 	bl	80025a4 <GetLongAddr>
 80028f6:	4603      	mov	r3, r0
 80028f8:	80bb      	strh	r3, [r7, #4]
	add = (add << SHIFT_BYTE) | GetLongAddr(RX_FIFO + 8);
 80028fa:	88bb      	ldrh	r3, [r7, #4]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	b21c      	sxth	r4, r3
 8002900:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8002904:	f7ff fe4e 	bl	80025a4 <GetLongAddr>
 8002908:	4603      	mov	r3, r0
 800290a:	b21b      	sxth	r3, r3
 800290c:	4323      	orrs	r3, r4
 800290e:	b21b      	sxth	r3, r3
 8002910:	80bb      	strh	r3, [r7, #4]
	data_in_s.source_address = add;
 8002912:	4a15      	ldr	r2, [pc, #84]	@ (8002968 <MRF24ReciboPaquete+0xa8>)
 8002914:	88bb      	ldrh	r3, [r7, #4]
 8002916:	8053      	strh	r3, [r2, #2]

	for(uint8_t i = 0; i < largo_mensaje - FCS_LQI_RSSI; i++) {
 8002918:	2300      	movs	r3, #0
 800291a:	71fb      	strb	r3, [r7, #7]
 800291c:	e010      	b.n	8002940 <MRF24ReciboPaquete+0x80>

		data_in_s.buffer[i] = GetLongAddr(RX_FIFO + HEAD_LENGTH + i - 1);
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	b29b      	uxth	r3, r3
 8002922:	f203 330a 	addw	r3, r3, #778	@ 0x30a
 8002926:	b29b      	uxth	r3, r3
 8002928:	79fc      	ldrb	r4, [r7, #7]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fe3a 	bl	80025a4 <GetLongAddr>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <MRF24ReciboPaquete+0xa8>)
 8002936:	4423      	add	r3, r4
 8002938:	719a      	strb	r2, [r3, #6]
	for(uint8_t i = 0; i < largo_mensaje - FCS_LQI_RSSI; i++) {
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	3301      	adds	r3, #1
 800293e:	71fb      	strb	r3, [r7, #7]
 8002940:	79fa      	ldrb	r2, [r7, #7]
 8002942:	79bb      	ldrb	r3, [r7, #6]
 8002944:	3b04      	subs	r3, #4
 8002946:	429a      	cmp	r2, r3
 8002948:	dbe9      	blt.n	800291e <MRF24ReciboPaquete+0x5e>
	}
	SetLongAddr(BBREG1, VACIO);
 800294a:	2100      	movs	r1, #0
 800294c:	2039      	movs	r0, #57	@ 0x39
 800294e:	f7ff fe05 	bl	800255c <SetLongAddr>
	(void)GetShortAddr(INTSTAT);
 8002952:	2031      	movs	r0, #49	@ 0x31
 8002954:	f7ff fde1 	bl	800251a <GetShortAddr>
	return MSG_LEIDO;
 8002958:	2304      	movs	r3, #4
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bd90      	pop	{r4, r7, pc}
 8002962:	bf00      	nop
 8002964:	200000e8 	.word	0x200000e8
 8002968:	200000ec 	.word	0x200000ec

0800296c <MRF24GetDataIn>:
 * @brief   Devuelvo el puntero a la estructura que contiene la información del
 * 			mensaje de entrada.
 * @param   None.
 * @retval  Puntero a la estructura tipo mrf24_data_in_t.
 */
mrf24_data_in_t * MRF24GetDataIn(void) {
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0

	return &data_in_s;
 8002970:	4b02      	ldr	r3, [pc, #8]	@ (800297c <MRF24GetDataIn+0x10>)
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	200000ec 	.word	0x200000ec

08002980 <InicializoPines>:
/**
 * @brief  Inicialización del hardware relacionado con el módulo
 * @param  None
 * @retval None
 */
void InicializoPines(void){
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0

    SetCSPin(1);
 8002984:	2001      	movs	r0, #1
 8002986:	f000 f809 	bl	800299c <SetCSPin>
    SetWakePin(1);
 800298a:	2001      	movs	r0, #1
 800298c:	f000 f818 	bl	80029c0 <SetWakePin>
    SetResetPin(0);
 8002990:	2000      	movs	r0, #0
 8002992:	f000 f827 	bl	80029e4 <SetResetPin>
    return;
 8002996:	bf00      	nop
}
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <SetCSPin>:
/**
 * @brief  Escribo en el pin destinado a CS
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetCSPin(bool_t estado){
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_CS_GPIO_Port, MRF24_CS_Pin, estado);
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	461a      	mov	r2, r3
 80029aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029ae:	4803      	ldr	r0, [pc, #12]	@ (80029bc <SetCSPin+0x20>)
 80029b0:	f7fe fb2b 	bl	800100a <HAL_GPIO_WritePin>
    return;
 80029b4:	bf00      	nop
}
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40010800 	.word	0x40010800

080029c0 <SetWakePin>:
/**
 * @brief  Escribo en el pin destinado a Wake
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetWakePin(bool_t estado){
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_WAKE_GPIO_Port, MRF24_WAKE_Pin, estado);
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	461a      	mov	r2, r3
 80029ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029d2:	4803      	ldr	r0, [pc, #12]	@ (80029e0 <SetWakePin+0x20>)
 80029d4:	f7fe fb19 	bl	800100a <HAL_GPIO_WritePin>
    return;
 80029d8:	bf00      	nop
}
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40010800 	.word	0x40010800

080029e4 <SetResetPin>:
/**
 * @brief  Escribo en el pin destinado a Reset
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetResetPin(bool_t estado){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_RESET_GPIO_Port, MRF24_RESET_Pin, estado);
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	461a      	mov	r2, r3
 80029f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029f6:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <SetResetPin+0x20>)
 80029f8:	f7fe fb07 	bl	800100a <HAL_GPIO_WritePin>
    return;
 80029fc:	bf00      	nop
}
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40010800 	.word	0x40010800

08002a08 <IsMRF24Interrup>:

/**
 * @brief  Devuelvo el estado del pin interrup del módulo
 * @retval Booleano
 */
volatile bool_t IsMRF24Interrup(void) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0

	return HAL_GPIO_ReadPin(MRF24_INTERRUP_GPIO_Port, MRF24_INTERRUP_Pin);
 8002a0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a10:	4805      	ldr	r0, [pc, #20]	@ (8002a28 <IsMRF24Interrup+0x20>)
 8002a12:	f7fe fae3 	bl	8000fdc <HAL_GPIO_ReadPin>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40010800 	.word	0x40010800

08002a2c <WriteByteSPIPort>:
/**
 * @brief  Escribo en el puerto SPI
 * @param  Dato - 1 byte
 * @retval None
 */
void WriteByteSPIPort(uint8_t dato){
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &dato, _1_BYTE, TIME_OUT_SPI);
 8002a36:	1df9      	adds	r1, r7, #7
 8002a38:	2364      	movs	r3, #100	@ 0x64
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4803      	ldr	r0, [pc, #12]	@ (8002a4c <WriteByteSPIPort+0x20>)
 8002a3e:	f7fe ff77 	bl	8001930 <HAL_SPI_Transmit>
    return;
 8002a42:	bf00      	nop
}
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000008c 	.word	0x2000008c

08002a50 <Write2ByteSPIPort>:
/**
 * @brief  Escribo en el puerto SPI
 * @param  Dato - 1 byte
 * @retval None
 */
void Write2ByteSPIPort(uint16_t dato){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]

	uint8_t dato_partido = (uint8_t) (dato >> SHIFT_BYTE);
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &dato_partido, _1_BYTE, TIME_OUT_SPI);
 8002a64:	f107 010f 	add.w	r1, r7, #15
 8002a68:	2364      	movs	r3, #100	@ 0x64
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4808      	ldr	r0, [pc, #32]	@ (8002a90 <Write2ByteSPIPort+0x40>)
 8002a6e:	f7fe ff5f 	bl	8001930 <HAL_SPI_Transmit>
	dato_partido = (uint8_t) dato;
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &dato_partido, _1_BYTE, TIME_OUT_SPI);
 8002a78:	f107 010f 	add.w	r1, r7, #15
 8002a7c:	2364      	movs	r3, #100	@ 0x64
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4803      	ldr	r0, [pc, #12]	@ (8002a90 <Write2ByteSPIPort+0x40>)
 8002a82:	f7fe ff55 	bl	8001930 <HAL_SPI_Transmit>
    return;
 8002a86:	bf00      	nop
}
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000008c 	.word	0x2000008c

08002a94 <ReadByteSPIPort>:
/**
 * @brief  Leo en el puerto SPI
 * @param  None
 * @retval Dato - 1 byte
 */
uint8_t ReadByteSPIPort(void){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0

	uint8_t dato = 0x01;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &dato, _1_BYTE, TIME_OUT_SPI);
 8002a9e:	1df9      	adds	r1, r7, #7
 8002aa0:	2364      	movs	r3, #100	@ 0x64
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4803      	ldr	r0, [pc, #12]	@ (8002ab4 <ReadByteSPIPort+0x20>)
 8002aa6:	f7ff f887 	bl	8001bb8 <HAL_SPI_Receive>
	return dato;
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000008c 	.word	0x2000008c

08002ab8 <memset>:
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4402      	add	r2, r0
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <memset+0xa>
 8002ac0:	4770      	bx	lr
 8002ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac6:	e7f9      	b.n	8002abc <memset+0x4>

08002ac8 <strncpy>:
 8002ac8:	4603      	mov	r3, r0
 8002aca:	b510      	push	{r4, lr}
 8002acc:	3901      	subs	r1, #1
 8002ace:	b132      	cbz	r2, 8002ade <strncpy+0x16>
 8002ad0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002ad4:	3a01      	subs	r2, #1
 8002ad6:	f803 4b01 	strb.w	r4, [r3], #1
 8002ada:	2c00      	cmp	r4, #0
 8002adc:	d1f7      	bne.n	8002ace <strncpy+0x6>
 8002ade:	2100      	movs	r1, #0
 8002ae0:	441a      	add	r2, r3
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d100      	bne.n	8002ae8 <strncpy+0x20>
 8002ae6:	bd10      	pop	{r4, pc}
 8002ae8:	f803 1b01 	strb.w	r1, [r3], #1
 8002aec:	e7f9      	b.n	8002ae2 <strncpy+0x1a>
	...

08002af0 <__libc_init_array>:
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	2600      	movs	r6, #0
 8002af4:	4d0c      	ldr	r5, [pc, #48]	@ (8002b28 <__libc_init_array+0x38>)
 8002af6:	4c0d      	ldr	r4, [pc, #52]	@ (8002b2c <__libc_init_array+0x3c>)
 8002af8:	1b64      	subs	r4, r4, r5
 8002afa:	10a4      	asrs	r4, r4, #2
 8002afc:	42a6      	cmp	r6, r4
 8002afe:	d109      	bne.n	8002b14 <__libc_init_array+0x24>
 8002b00:	f000 f828 	bl	8002b54 <_init>
 8002b04:	2600      	movs	r6, #0
 8002b06:	4d0a      	ldr	r5, [pc, #40]	@ (8002b30 <__libc_init_array+0x40>)
 8002b08:	4c0a      	ldr	r4, [pc, #40]	@ (8002b34 <__libc_init_array+0x44>)
 8002b0a:	1b64      	subs	r4, r4, r5
 8002b0c:	10a4      	asrs	r4, r4, #2
 8002b0e:	42a6      	cmp	r6, r4
 8002b10:	d105      	bne.n	8002b1e <__libc_init_array+0x2e>
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b18:	4798      	blx	r3
 8002b1a:	3601      	adds	r6, #1
 8002b1c:	e7ee      	b.n	8002afc <__libc_init_array+0xc>
 8002b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b22:	4798      	blx	r3
 8002b24:	3601      	adds	r6, #1
 8002b26:	e7f2      	b.n	8002b0e <__libc_init_array+0x1e>
 8002b28:	08002bd0 	.word	0x08002bd0
 8002b2c:	08002bd0 	.word	0x08002bd0
 8002b30:	08002bd0 	.word	0x08002bd0
 8002b34:	08002bd4 	.word	0x08002bd4

08002b38 <memcpy>:
 8002b38:	440a      	add	r2, r1
 8002b3a:	4291      	cmp	r1, r2
 8002b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b40:	d100      	bne.n	8002b44 <memcpy+0xc>
 8002b42:	4770      	bx	lr
 8002b44:	b510      	push	{r4, lr}
 8002b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b4a:	4291      	cmp	r1, r2
 8002b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b50:	d1f9      	bne.n	8002b46 <memcpy+0xe>
 8002b52:	bd10      	pop	{r4, pc}

08002b54 <_init>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	bf00      	nop
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr

08002b60 <_fini>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	bf00      	nop
 8002b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b66:	bc08      	pop	{r3}
 8002b68:	469e      	mov	lr, r3
 8002b6a:	4770      	bx	lr

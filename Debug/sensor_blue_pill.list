
sensor_blue_pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c88  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003d94  08003d94  00004d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003edc  08003edc  00005080  2**0
                  CONTENTS
  4 .ARM          00000008  08003edc  08003edc  00004edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ee4  08003ee4  00005080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee4  08003ee4  00004ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ee8  08003ee8  00004ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08003eec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000080  08003f6c  00005080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08003f6c  00005304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007711  00000000  00000000  000050a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002165  00000000  00000000  0000c7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0000e920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000643  00000000  00000000  0000f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019310  00000000  00000000  0000f80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c050  00000000  00000000  00028b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000854cb  00000000  00000000  00034b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba036  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002960  00000000  00000000  000ba07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000bc9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d7c 	.word	0x08003d7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003d7c 	.word	0x08003d7c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <CargarConfig>:
 * @brief  Recupero de la memoria no volatil la configuración de red y del sistema
 * @param  None.
 * @retval Estado de la carga (CARGA_OK, CARGA_ERR).
 * @note
 */
sys_state_t CargarConfig(void) {
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0

	if(EEPROMLoadStruct(EEPROM_CONFIG_ADDR,
 8000164:	223c      	movs	r2, #60	@ 0x3c
 8000166:	490d      	ldr	r1, [pc, #52]	@ (800019c <CargarConfig+0x3c>)
 8000168:	480d      	ldr	r0, [pc, #52]	@ (80001a0 <CargarConfig+0x40>)
 800016a:	f000 f9b0 	bl	80004ce <EEPROMLoadStruct>
 800016e:	4603      	mov	r3, r0
 8000170:	2b02      	cmp	r3, #2
 8000172:	d001      	beq.n	8000178 <CargarConfig+0x18>
						&system_config_s,
						sizeof(system_config_t)) != LOAD_OK)
		return CARGA_ERR;
 8000174:	2301      	movs	r3, #1
 8000176:	e00e      	b.n	8000196 <CargarConfig+0x36>

	if(GetEEPROMtoMRF24Config() != CARGA_OK)
 8000178:	f000 f8ac 	bl	80002d4 <GetEEPROMtoMRF24Config>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d001      	beq.n	8000186 <CargarConfig+0x26>
		return CARGA_ERR;
 8000182:	2301      	movs	r3, #1
 8000184:	e007      	b.n	8000196 <CargarConfig+0x36>

	if(MRF24J40Init() != INITIALIZATION_OK)
 8000186:	f002 fbbd 	bl	8002904 <MRF24J40Init>
 800018a:	4603      	mov	r3, r0
 800018c:	2b01      	cmp	r3, #1
 800018e:	d001      	beq.n	8000194 <CargarConfig+0x34>
		return CARGA_ERR;
 8000190:	2301      	movs	r3, #1
 8000192:	e000      	b.n	8000196 <CargarConfig+0x36>
	return CARGA_OK;
 8000194:	2300      	movs	r3, #0
}
 8000196:	4618      	mov	r0, r3
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	2000009c 	.word	0x2000009c
 80001a0:	0800fc40 	.word	0x0800fc40

080001a4 <ModoSetup>:
 * @param
 * @param
 * @retval
 * @note
 */
sys_state_t ModoSetup(void) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b092      	sub	sp, #72	@ 0x48
 80001a8:	af00      	add	r7, sp, #0

	int32_t tiempo = HAL_GetTick();
 80001aa:	f000 fdb3 	bl	8000d14 <HAL_GetTick>
 80001ae:	4603      	mov	r3, r0
 80001b0:	643b      	str	r3, [r7, #64]	@ 0x40
	bool_t config_enable = false;
 80001b2:	2300      	movs	r3, #0
 80001b4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

	while(!HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 80001b8:	e023      	b.n	8000202 <ModoSetup+0x5e>

		if((HAL_GetTick() - tiempo) >= SETUP_TIME_MS) {
 80001ba:	f000 fdab 	bl	8000d14 <HAL_GetTick>
 80001be:	4602      	mov	r2, r0
 80001c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001c2:	1ad3      	subs	r3, r2, r3
 80001c4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80001c8:	4293      	cmp	r3, r2
 80001ca:	d91a      	bls.n	8000202 <ModoSetup+0x5e>

			config_enable = true;
 80001cc:	2301      	movs	r3, #1
 80001ce:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

			for(uint8_t i = 0; i < 6; i++) {
 80001d2:	2300      	movs	r3, #0
 80001d4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80001d8:	e00e      	b.n	80001f8 <ModoSetup+0x54>

				ToggleLed(ROJO);
 80001da:	2002      	movs	r0, #2
 80001dc:	f000 f9ac 	bl	8000538 <ToggleLed>
				ToggleLed(VERDE);
 80001e0:	2000      	movs	r0, #0
 80001e2:	f000 f9a9 	bl	8000538 <ToggleLed>
				delay_t(500);
 80001e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001ea:	f000 fd9d 	bl	8000d28 <HAL_Delay>
			for(uint8_t i = 0; i < 6; i++) {
 80001ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80001f2:	3301      	adds	r3, #1
 80001f4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80001f8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80001fc:	2b05      	cmp	r3, #5
 80001fe:	d9ec      	bls.n	80001da <ModoSetup+0x36>
			}
			break;
 8000200:	e007      	b.n	8000212 <ModoSetup+0x6e>
	while(!HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 8000202:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000206:	4830      	ldr	r0, [pc, #192]	@ (80002c8 <ModoSetup+0x124>)
 8000208:	f001 f81a 	bl	8001240 <HAL_GPIO_ReadPin>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d0d3      	beq.n	80001ba <ModoSetup+0x16>
		}
	}
	uint8_t ciclos = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	delayNoBloqueanteData_t delay_time;
	DelayInit(&delay_time, CICLE_TIME_MS);
 8000218:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800021c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f8ef 	bl	8000404 <DelayInit>
	mrf24_data_in_t * mrf24_data_in;

	while(config_enable) {
 8000226:	e046      	b.n	80002b6 <ModoSetup+0x112>

		if(DelayRead(&delay_time)) {
 8000228:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f900 	bl	8000432 <DelayRead>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d007      	beq.n	8000248 <ModoSetup+0xa4>

			ToggleLed(ROJO);
 8000238:	2002      	movs	r0, #2
 800023a:	f000 f97d 	bl	8000538 <ToggleLed>
			ciclos ++;
 800023e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000242:	3301      	adds	r3, #1
 8000244:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if(ciclos > CICLE_TIME_OUT)
			return SETUP_FAIL;

		// Acá recibo por IEEE 802.15.2 la configuración del sistema y de la red
		//
		if(MRF24IsNewMsg() == MSG_PRESENT) {
 8000248:	f002 fc5a 	bl	8002b00 <MRF24IsNewMsg>
 800024c:	4603      	mov	r3, r0
 800024e:	2b04      	cmp	r3, #4
 8000250:	d131      	bne.n	80002b6 <ModoSetup+0x112>

			if(MRF24ReciboPaquete() == MSG_READ) {
 8000252:	f002 fc6d 	bl	8002b30 <MRF24ReciboPaquete>
 8000256:	4603      	mov	r3, r0
 8000258:	2b05      	cmp	r3, #5
 800025a:	d12c      	bne.n	80002b6 <ModoSetup+0x112>

				mrf24_data_in = MRF24GetDataIn();
 800025c:	f002 fcc2 	bl	8002be4 <MRF24GetDataIn>
 8000260:	63f8      	str	r0, [r7, #60]	@ 0x3c
				char *palabra = strtok((char *)mrf24_data_in->buffer, ":");
 8000262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000264:	3305      	adds	r3, #5
 8000266:	4919      	ldr	r1, [pc, #100]	@ (80002cc <ModoSetup+0x128>)
 8000268:	4618      	mov	r0, r3
 800026a:	f002 fe81 	bl	8002f70 <strtok>
 800026e:	63b8      	str	r0, [r7, #56]	@ 0x38
 *	0xFF0281: sería como enviar MACCNF con 8 datos de un byte y así sucesivamente.
 *
 * Para envío de datos sería 0xF00001
 *
 */
				if(!strcmp(palabra, "MRFCNF")) {
 8000270:	4917      	ldr	r1, [pc, #92]	@ (80002d0 <ModoSetup+0x12c>)
 8000272:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000274:	f7ff ff6a 	bl	800014c <strcmp>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d11b      	bne.n	80002b6 <ModoSetup+0x112>

// Acá leo cada parámetro y lo guardo
// descarto la primer parte del mensaje porque es el comando y nesecito solo la parte de la estructura

					mrf24_data_config_t data_config_recibida = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2222      	movs	r2, #34	@ 0x22
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f002 fe58 	bl	8002f3a <memset>

					uint8_t tamaño = strlen("MRFCNF:");
 800028a:	2307      	movs	r3, #7
 800028c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

					memcpy(&data_config_recibida, mrf24_data_in->buffer + tamaño, mrf24_data_in->buffer_size - tamaño);
 8000290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000292:	1d5a      	adds	r2, r3, #5
 8000294:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000298:	18d1      	adds	r1, r2, r3
 800029a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800029c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80002a0:	461a      	mov	r2, r3
 80002a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	461a      	mov	r2, r3
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f002 ff2e 	bl	800310e <memcpy>

					data_config_recibida.intervalo = 4;
 80002b2:	2304      	movs	r3, #4
 80002b4:	817b      	strh	r3, [r7, #10]
	while(config_enable) {
 80002b6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d1b4      	bne.n	8000228 <ModoSetup+0x84>


	}


	return SETUP_SUCIFULL;
 80002be:	2303      	movs	r3, #3
	}



	return SETUP_SUCIFULL;
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3748      	adds	r7, #72	@ 0x48
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40010c00 	.word	0x40010c00
 80002cc:	08003d94 	.word	0x08003d94
 80002d0:	08003d98 	.word	0x08003d98

080002d4 <GetEEPROMtoMRF24Config>:
 * @brief	Recupero de la memoria no volatil la configuración de red.
 * @param	None.
 * @retval	None.
 * @note
 */
static sys_state_t GetEEPROMtoMRF24Config(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08a      	sub	sp, #40	@ 0x28
 80002d8:	af00      	add	r7, sp, #0

	mrf24_data_config_t mrf24_config_s;
	if(EEPROMLoadStruct(EEPROM_MRF24_ADDR, &mrf24_config_s, sizeof(mrf24_config_s)) == LOAD_OK) {
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2222      	movs	r2, #34	@ 0x22
 80002de:	4619      	mov	r1, r3
 80002e0:	480b      	ldr	r0, [pc, #44]	@ (8000310 <GetEEPROMtoMRF24Config+0x3c>)
 80002e2:	f000 f8f4 	bl	80004ce <EEPROMLoadStruct>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d10a      	bne.n	8000302 <GetEEPROMtoMRF24Config+0x2e>

		if(mrf24_config_s.my_channel != 0xFF)
 80002ec:	793b      	ldrb	r3, [r7, #4]
 80002ee:	2bff      	cmp	r3, #255	@ 0xff
 80002f0:	d009      	beq.n	8000306 <GetEEPROMtoMRF24Config+0x32>
			memcpy(MRF24GetConfig(), &mrf24_config_s, sizeof(mrf24_config_s));
 80002f2:	f002 fb23 	bl	800293c <MRF24GetConfig>
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2222      	movs	r2, #34	@ 0x22
 80002fa:	4619      	mov	r1, r3
 80002fc:	f002 ff07 	bl	800310e <memcpy>
 8000300:	e001      	b.n	8000306 <GetEEPROMtoMRF24Config+0x32>
	} else {

		return CARGA_ERR;
 8000302:	2301      	movs	r3, #1
 8000304:	e000      	b.n	8000308 <GetEEPROMtoMRF24Config+0x34>
	}
	return CARGA_OK;
 8000306:	2300      	movs	r3, #0
}
 8000308:	4618      	mov	r0, r3
 800030a:	3728      	adds	r7, #40	@ 0x28
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	0800fc00 	.word	0x0800fc00

08000314 <DebounceFSMInit>:
/**
  * @brief  Inicializa las variables de la máuina de estado para la función anti rebote.
  * @param  Puntero a la estructura que contiene las variabes.
  * @retval None
  */
void DebounceFSMInit(debounce_data_t * antirrebote_boton_n) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]

	assert_param(antirrebote_boton_n);
	antirrebote_boton_n->estadoActual = BOTON_SIN_CAMBIOS;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2203      	movs	r2, #3
 8000320:	701a      	strb	r2, [r3, #0]
	DelayInit(&antirrebote_boton_n->delay_anti_rebote, TIEMPO_ANTI_REBOTE);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3304      	adds	r3, #4
 8000326:	2128      	movs	r1, #40	@ 0x28
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f86b 	bl	8000404 <DelayInit>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <DebounceFSMUpdate>:
  * @param  Estado actual - booleano.
  * @retval Devuelvo la información si el botón fue presionado, soltado, sin cambios o si hubo un error.
  * @note	En el enunciado la función no posee parámetros, pero de esta forma independizo totalmente
  * 		el driver del hardware en donde lo implemento.
  */
estado_pulsador_t DebounceFSMUpdate(debounce_data_t * antirrebote_boton_n, bool_t estado_pin) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	70fb      	strb	r3, [r7, #3]

	assert_param(antirrebote_boton_n);

	switch(antirrebote_boton_n->estadoActual) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b03      	cmp	r3, #3
 800034a:	d849      	bhi.n	80003e0 <DebounceFSMUpdate+0xa8>
 800034c:	a201      	add	r2, pc, #4	@ (adr r2, 8000354 <DebounceFSMUpdate+0x1c>)
 800034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000352:	bf00      	nop
 8000354:	08000365 	.word	0x08000365
 8000358:	08000379 	.word	0x08000379
 800035c:	080003d3 	.word	0x080003d3
 8000360:	080003a9 	.word	0x080003a9

		case BUTTON_UP:

			if(!estado_pin)
 8000364:	78fb      	ldrb	r3, [r7, #3]
 8000366:	f083 0301 	eor.w	r3, r3, #1
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	d03c      	beq.n	80003ea <DebounceFSMUpdate+0xb2>
				antirrebote_boton_n->estadoActual = BUTTON_FALLING;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2201      	movs	r2, #1
 8000374:	701a      	strb	r2, [r3, #0]
			break;
 8000376:	e038      	b.n	80003ea <DebounceFSMUpdate+0xb2>

		case BUTTON_FALLING:

			if(DelayRead(&antirrebote_boton_n->delay_anti_rebote)) {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3304      	adds	r3, #4
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f858 	bl	8000432 <DelayRead>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d032      	beq.n	80003ee <DebounceFSMUpdate+0xb6>

				if(!estado_pin) {
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	f083 0301 	eor.w	r3, r3, #1
 800038e:	b2db      	uxtb	r3, r3
 8000390:	2b00      	cmp	r3, #0
 8000392:	d004      	beq.n	800039e <DebounceFSMUpdate+0x66>

					antirrebote_boton_n->estadoActual = BUTTON_DOWN;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2202      	movs	r2, #2
 8000398:	701a      	strb	r2, [r3, #0]
					return PRESIONO_BOTON;
 800039a:	2301      	movs	r3, #1
 800039c:	e02d      	b.n	80003fa <DebounceFSMUpdate+0xc2>
				} else {

					antirrebote_boton_n->estadoActual = BUTTON_UP;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
					return RUIDO;
 80003a4:	2304      	movs	r3, #4
 80003a6:	e028      	b.n	80003fa <DebounceFSMUpdate+0xc2>
			}
			break;

		case BUTTON_RAISING:

			if(DelayRead(&antirrebote_boton_n->delay_anti_rebote)) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3304      	adds	r3, #4
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 f840 	bl	8000432 <DelayRead>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d01c      	beq.n	80003f2 <DebounceFSMUpdate+0xba>

				if(estado_pin) {
 80003b8:	78fb      	ldrb	r3, [r7, #3]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d004      	beq.n	80003c8 <DebounceFSMUpdate+0x90>

					antirrebote_boton_n->estadoActual = BUTTON_UP;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
					return SUELTO_BOTON;
 80003c4:	2302      	movs	r3, #2
 80003c6:	e018      	b.n	80003fa <DebounceFSMUpdate+0xc2>
				} else {

					antirrebote_boton_n->estadoActual = BUTTON_DOWN;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2202      	movs	r2, #2
 80003cc:	701a      	strb	r2, [r3, #0]
					return RUIDO;
 80003ce:	2304      	movs	r3, #4
 80003d0:	e013      	b.n	80003fa <DebounceFSMUpdate+0xc2>
			}
			break;

		case BUTTON_DOWN:

			if(estado_pin)
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d00e      	beq.n	80003f6 <DebounceFSMUpdate+0xbe>
				antirrebote_boton_n->estadoActual = BUTTON_RAISING;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2203      	movs	r2, #3
 80003dc:	701a      	strb	r2, [r3, #0]
			break;
 80003de:	e00a      	b.n	80003f6 <DebounceFSMUpdate+0xbe>

		default:

			DebounceFSMInit(antirrebote_boton_n);
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f7ff ff97 	bl	8000314 <DebounceFSMInit>
			return ERROR_ANTI_REBOTE;
 80003e6:	2300      	movs	r3, #0
 80003e8:	e007      	b.n	80003fa <DebounceFSMUpdate+0xc2>
			break;
 80003ea:	bf00      	nop
 80003ec:	e004      	b.n	80003f8 <DebounceFSMUpdate+0xc0>
			break;
 80003ee:	bf00      	nop
 80003f0:	e002      	b.n	80003f8 <DebounceFSMUpdate+0xc0>
			break;
 80003f2:	bf00      	nop
 80003f4:	e000      	b.n	80003f8 <DebounceFSMUpdate+0xc0>
			break;
 80003f6:	bf00      	nop
	}
	return BOTON_SIN_CAMBIOS;
 80003f8:	2303      	movs	r3, #3
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop

08000404 <DelayInit>:
  * @brief  Inicializa el delay no bloqueante.
  * @param  Puntero a la estructura con las variables.
  * @param  Duración del delay.
  * @retval None
  */
void DelayInit(delayNoBloqueanteData_t * delay, tick_t duration) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]

	if(delay == NULL || duration == 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d002      	beq.n	800041a <DelayInit+0x16>
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d101      	bne.n	800041e <DelayInit+0x1a>
		Error_Handler();
 800041a:	f000 fa6b 	bl	80008f4 <Error_Handler>
	delay->duration = duration;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2200      	movs	r2, #0
 8000428:	721a      	strb	r2, [r3, #8]
	return;
 800042a:	bf00      	nop
}
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <DelayRead>:
/**
  * @brief  Obtengo el estado del delay.
  * @param  Puntero a la estructura con las variables.
  * @retval Estado del delay (contando / tiempo cumplido).
  */
bool_t DelayRead(delayNoBloqueanteData_t * delay) {
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]

	if(delay == NULL)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d101      	bne.n	8000444 <DelayRead+0x12>
		Error_Handler();
 8000440:	f000 fa58 	bl	80008f4 <Error_Handler>

	if(DelayIsRunning(delay) == false) {
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f000 f833 	bl	80004b0 <DelayIsRunning>
 800044a:	4603      	mov	r3, r0
 800044c:	f083 0301 	eor.w	r3, r3, #1
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	d008      	beq.n	8000468 <DelayRead+0x36>

		delay->startTime = HAL_GetTick();
 8000456:	f000 fc5d 	bl	8000d14 <HAL_GetTick>
 800045a:	4602      	mov	r2, r0
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2201      	movs	r2, #1
 8000464:	721a      	strb	r2, [r3, #8]
 8000466:	e00e      	b.n	8000486 <DelayRead+0x54>
	} else {

		if((HAL_GetTick() - delay->startTime) >= delay->duration) {
 8000468:	f000 fc54 	bl	8000d14 <HAL_GetTick>
 800046c:	4602      	mov	r2, r0
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	1ad2      	subs	r2, r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	429a      	cmp	r2, r3
 800047a:	d304      	bcc.n	8000486 <DelayRead+0x54>

			delay->running = false;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2200      	movs	r2, #0
 8000480:	721a      	strb	r2, [r3, #8]
			return true;
 8000482:	2301      	movs	r3, #1
 8000484:	e000      	b.n	8000488 <DelayRead+0x56>
		}
	}
	return false;
 8000486:	2300      	movs	r3, #0
}
 8000488:	4618      	mov	r0, r3
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <DelayReset>:
/**
  * @brief  Reseteo la cuenta del tiempo.
  * @param  Puntero a la estructura con las variables.
  * @retval None
  */
void DelayReset( delayNoBloqueanteData_t * delay) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]

	delay->startTime = HAL_GetTick();
 8000498:	f000 fc3c 	bl	8000d14 <HAL_GetTick>
 800049c:	4602      	mov	r2, r0
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	601a      	str	r2, [r3, #0]
	delay->running = true;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2201      	movs	r2, #1
 80004a6:	721a      	strb	r2, [r3, #8]
	return;
 80004a8:	bf00      	nop
}
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <DelayIsRunning>:
  * @retval Estado del delay (contando / tiempo cumplido).
  * @note	En el trabajo práctico la define como función pública, pero para mejorar
  * 		el encapsulamiento la defino como privada ya que solo se utiliza en el
  * 		ámbito de este archivo.
  */
static bool_t DelayIsRunning(delayNoBloqueanteData_t * delay) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]

	if(delay == NULL)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d101      	bne.n	80004c2 <DelayIsRunning+0x12>
		Error_Handler();
 80004be:	f000 fa19 	bl	80008f4 <Error_Handler>
	return delay->running;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	7a1b      	ldrb	r3, [r3, #8]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <EEPROMLoadStruct>:
 * @retval Estado de la operación (LOAD_OK, LOAD_ERR).
 * @note
 */
eeprom_state_t EEPROMLoadStruct(eeprom_mem_t mem_addr,
						  	  	void * p_info_s,
								size_t struct_size) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b084      	sub	sp, #16
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]

	if(p_info_s == NULL || struct_size == 0)
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d002      	beq.n	80004e6 <EEPROMLoadStruct+0x18>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d101      	bne.n	80004ea <EEPROMLoadStruct+0x1c>
		return LOAD_ERR;
 80004e6:	2303      	movs	r3, #3
 80004e8:	e006      	b.n	80004f8 <EEPROMLoadStruct+0x2a>
	memcpy(p_info_s, (const void*)mem_addr, struct_size);
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4619      	mov	r1, r3
 80004f0:	68b8      	ldr	r0, [r7, #8]
 80004f2:	f002 fe0c 	bl	800310e <memcpy>
	return LOAD_OK;
 80004f6:	2302      	movs	r3, #2
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <SetLed>:
 * @brief   Wrapper para escribir en el GPIO.
 * @param   Led al que voy a escribir.
 * @param   Valor a escribir.
 * @retval  None.
 */
void SetLed(color_leds color, estado_leds_t estado) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	460a      	mov	r2, r1
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	4613      	mov	r3, r2
 800050e:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(led[color].puerto, led[color].pin, estado);
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <SetLed+0x34>)
 8000514:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	4a06      	ldr	r2, [pc, #24]	@ (8000534 <SetLed+0x34>)
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	4413      	add	r3, r2
 8000520:	889b      	ldrh	r3, [r3, #4]
 8000522:	79ba      	ldrb	r2, [r7, #6]
 8000524:	4619      	mov	r1, r3
 8000526:	f000 fea2 	bl	800126e <HAL_GPIO_WritePin>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000000 	.word	0x20000000

08000538 <ToggleLed>:
/**
 * @brief   Wrapper para hacer un toggle en el GPIO.
 * @param   Led al que voy a escribir.
 * @retval  None.
 */
void ToggleLed(color_leds color) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_TogglePin(led[color].puerto, led[color].pin);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	4a07      	ldr	r2, [pc, #28]	@ (8000564 <ToggleLed+0x2c>)
 8000546:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4905      	ldr	r1, [pc, #20]	@ (8000564 <ToggleLed+0x2c>)
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	440b      	add	r3, r1
 8000552:	889b      	ldrh	r3, [r3, #4]
 8000554:	4619      	mov	r1, r3
 8000556:	4610      	mov	r0, r2
 8000558:	f000 fea1 	bl	800129e <HAL_GPIO_TogglePin>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000000 	.word	0x20000000

08000568 <bucle>:
static debounce_data_t boton1;

/* Prototipo de funciones privadas -------------------------------------------*/
static void CheckBoton(void);

void bucle(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 * ****************************************************************************************************************************
 */



	SetLed(VERDE, LED_APAGADO);
 800056e:	2101      	movs	r1, #1
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff ffc5 	bl	8000500 <SetLed>
	SetLed(AMARILLO, LED_APAGADO);
 8000576:	2101      	movs	r1, #1
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff ffc1 	bl	8000500 <SetLed>
	SetLed(ROJO, LED_APAGADO);
 800057e:	2101      	movs	r1, #1
 8000580:	2002      	movs	r0, #2
 8000582:	f7ff ffbd 	bl	8000500 <SetLed>

	if(CargarConfig() != CARGA_OK)
 8000586:	f7ff fdeb 	bl	8000160 <CargarConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <bucle+0x2c>
		Error_Handler();
 8000590:	f000 f9b0 	bl	80008f4 <Error_Handler>

	if(ModoSetup() != SETUP_SUCIFULL)
 8000594:	f7ff fe06 	bl	80001a4 <ModoSetup>
 8000598:	4603      	mov	r3, r0
 800059a:	2b03      	cmp	r3, #3
 800059c:	d001      	beq.n	80005a2 <bucle+0x3a>
		Error_Handler();
 800059e:	f000 f9a9 	bl	80008f4 <Error_Handler>
	DebounceFSMInit(&boton1);
 80005a2:	4818      	ldr	r0, [pc, #96]	@ (8000604 <bucle+0x9c>)
 80005a4:	f7ff feb6 	bl	8000314 <DebounceFSMInit>

	mrf24_data_in_t * mrf24_data_in;

	while(1) {

		CheckBoton();
 80005a8:	f000 f832 	bl	8000610 <CheckBoton>

		if(MRF24IsNewMsg() == MSG_PRESENT) {
 80005ac:	f002 faa8 	bl	8002b00 <MRF24IsNewMsg>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d1f8      	bne.n	80005a8 <bucle+0x40>

			if(MRF24ReciboPaquete() == MSG_READ) {
 80005b6:	f002 fabb 	bl	8002b30 <MRF24ReciboPaquete>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d11d      	bne.n	80005fc <bucle+0x94>

				mrf24_data_in = MRF24GetDataIn();
 80005c0:	f002 fb10 	bl	8002be4 <MRF24GetDataIn>
 80005c4:	6078      	str	r0, [r7, #4]

				if(!strcmp(mrf24_data_in->buffer, "CMD:PLV"))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3305      	adds	r3, #5
 80005ca:	490f      	ldr	r1, [pc, #60]	@ (8000608 <bucle+0xa0>)
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fdbd 	bl	800014c <strcmp>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d103      	bne.n	80005e0 <bucle+0x78>
					SetLed(VERDE, LED_PRENDIDO);
 80005d8:	2100      	movs	r1, #0
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff ff90 	bl	8000500 <SetLed>
				if(!strcmp(mrf24_data_in->buffer, "CMD:ALV"))
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3305      	adds	r3, #5
 80005e4:	4909      	ldr	r1, [pc, #36]	@ (800060c <bucle+0xa4>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fdb0 	bl	800014c <strcmp>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1da      	bne.n	80005a8 <bucle+0x40>
					SetLed(VERDE, LED_APAGADO);
 80005f2:	2101      	movs	r1, #1
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff ff83 	bl	8000500 <SetLed>
 80005fa:	e7d5      	b.n	80005a8 <bucle+0x40>
			} else {

				ToggleLed(AMARILLO);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f7ff ff9b 	bl	8000538 <ToggleLed>
		CheckBoton();
 8000602:	e7d1      	b.n	80005a8 <bucle+0x40>
 8000604:	200000d8 	.word	0x200000d8
 8000608:	08003da0 	.word	0x08003da0
 800060c:	08003da8 	.word	0x08003da8

08000610 <CheckBoton>:

/**
  * @brief  Manejo de las pulsaciones del botón
  * @retval
  */
static void CheckBoton(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b092      	sub	sp, #72	@ 0x48
 8000614:	af00      	add	r7, sp, #0

	mrf24_data_out_t data_out_s;
	data_out_s.dest_address = LOW_END_ADDR;
 8000616:	f241 1312 	movw	r3, #4370	@ 0x1112
 800061a:	807b      	strh	r3, [r7, #2]
	data_out_s.dest_panid = 0x1234;
 800061c:	f241 2334 	movw	r3, #4660	@ 0x1234
 8000620:	803b      	strh	r3, [r7, #0]
	data_out_s.origin_address = 0x1111;
 8000622:	f241 1311 	movw	r3, #4369	@ 0x1111
 8000626:	80bb      	strh	r3, [r7, #4]

	switch(DebounceFSMUpdate(&boton1, HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin))) {
 8000628:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800062c:	481e      	ldr	r0, [pc, #120]	@ (80006a8 <CheckBoton+0x98>)
 800062e:	f000 fe07 	bl	8001240 <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	bf14      	ite	ne
 8000638:	2301      	movne	r3, #1
 800063a:	2300      	moveq	r3, #0
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	481a      	ldr	r0, [pc, #104]	@ (80006ac <CheckBoton+0x9c>)
 8000642:	f7ff fe79 	bl	8000338 <DebounceFSMUpdate>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	d002      	beq.n	8000652 <CheckBoton+0x42>
 800064c:	2b02      	cmp	r3, #2
 800064e:	d013      	beq.n	8000678 <CheckBoton+0x68>
			data_out_s.buffer_size = strlen("CMD:PLA");
			MRF24TransmitirDato(&data_out_s);
			break;
		default:
	}
}
 8000650:	e025      	b.n	800069e <CheckBoton+0x8e>
			ToggleLed(ROJO);
 8000652:	2002      	movs	r0, #2
 8000654:	f7ff ff70 	bl	8000538 <ToggleLed>
			strcpy(data_out_s.buffer, "CMD:ALA"); // acá iría memcpy
 8000658:	463b      	mov	r3, r7
 800065a:	3306      	adds	r3, #6
 800065c:	4914      	ldr	r1, [pc, #80]	@ (80006b0 <CheckBoton+0xa0>)
 800065e:	461a      	mov	r2, r3
 8000660:	460b      	mov	r3, r1
 8000662:	cb03      	ldmia	r3!, {r0, r1}
 8000664:	6010      	str	r0, [r2, #0]
 8000666:	6051      	str	r1, [r2, #4]
			data_out_s.buffer_size = strlen("CMD:ALA");
 8000668:	2307      	movs	r3, #7
 800066a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			MRF24TransmitirDato(&data_out_s);
 800066e:	463b      	mov	r3, r7
 8000670:	4618      	mov	r0, r3
 8000672:	f002 f96d 	bl	8002950 <MRF24TransmitirDato>
			break;
 8000676:	e012      	b.n	800069e <CheckBoton+0x8e>
			ToggleLed(ROJO);
 8000678:	2002      	movs	r0, #2
 800067a:	f7ff ff5d 	bl	8000538 <ToggleLed>
			strcpy(data_out_s.buffer, "CMD:PLA");
 800067e:	463b      	mov	r3, r7
 8000680:	3306      	adds	r3, #6
 8000682:	490c      	ldr	r1, [pc, #48]	@ (80006b4 <CheckBoton+0xa4>)
 8000684:	461a      	mov	r2, r3
 8000686:	460b      	mov	r3, r1
 8000688:	cb03      	ldmia	r3!, {r0, r1}
 800068a:	6010      	str	r0, [r2, #0]
 800068c:	6051      	str	r1, [r2, #4]
			data_out_s.buffer_size = strlen("CMD:PLA");
 800068e:	2307      	movs	r3, #7
 8000690:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			MRF24TransmitirDato(&data_out_s);
 8000694:	463b      	mov	r3, r7
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f95a 	bl	8002950 <MRF24TransmitirDato>
			break;
 800069c:	bf00      	nop
}
 800069e:	bf00      	nop
 80006a0:	3748      	adds	r7, #72	@ 0x48
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	200000d8 	.word	0x200000d8
 80006b0:	08003db0 	.word	0x08003db0
 80006b4:	08003db8 	.word	0x08003db8

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fad2 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f808 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f876 	bl	80007b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006c8:	f000 f83e 	bl	8000748 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  bucle();
 80006cc:	f7ff ff4c 	bl	8000568 <bucle>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <main+0x18>

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b090      	sub	sp, #64	@ 0x40
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	2228      	movs	r2, #40	@ 0x28
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fc29 	bl	8002f3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	2300      	movs	r3, #0
 8000702:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0318 	add.w	r3, r7, #24
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fde1 	bl	80012d0 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000714:	f000 f8ee 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f001 f84f 	bl	80017d4 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800073c:	f000 f8da 	bl	80008f4 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3740      	adds	r7, #64	@ 0x40
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800074c:	4b17      	ldr	r3, [pc, #92]	@ (80007ac <MX_SPI1_Init+0x64>)
 800074e:	4a18      	ldr	r2, [pc, #96]	@ (80007b0 <MX_SPI1_Init+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <MX_SPI1_Init+0x64>)
 8000754:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_SPI1_Init+0x64>)
 8000774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000778:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_SPI1_Init+0x64>)
 800077c:	2220      	movs	r2, #32
 800077e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_SPI1_Init+0x64>)
 8000794:	220a      	movs	r2, #10
 8000796:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_SPI1_Init+0x64>)
 800079a:	f001 f977 	bl	8001a8c <HAL_SPI_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a4:	f000 f8a6 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000e8 	.word	0x200000e8
 80007b0:	40013000 	.word	0x40013000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c8:	4b46      	ldr	r3, [pc, #280]	@ (80008e4 <MX_GPIO_Init+0x130>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a45      	ldr	r2, [pc, #276]	@ (80008e4 <MX_GPIO_Init+0x130>)
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b43      	ldr	r3, [pc, #268]	@ (80008e4 <MX_GPIO_Init+0x130>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0310 	and.w	r3, r3, #16
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e0:	4b40      	ldr	r3, [pc, #256]	@ (80008e4 <MX_GPIO_Init+0x130>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a3f      	ldr	r2, [pc, #252]	@ (80008e4 <MX_GPIO_Init+0x130>)
 80007e6:	f043 0320 	orr.w	r3, r3, #32
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b3d      	ldr	r3, [pc, #244]	@ (80008e4 <MX_GPIO_Init+0x130>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b3a      	ldr	r3, [pc, #232]	@ (80008e4 <MX_GPIO_Init+0x130>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a39      	ldr	r2, [pc, #228]	@ (80008e4 <MX_GPIO_Init+0x130>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b37      	ldr	r3, [pc, #220]	@ (80008e4 <MX_GPIO_Init+0x130>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <MX_GPIO_Init+0x130>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a33      	ldr	r2, [pc, #204]	@ (80008e4 <MX_GPIO_Init+0x130>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <MX_GPIO_Init+0x130>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800082e:	482e      	ldr	r0, [pc, #184]	@ (80008e8 <MX_GPIO_Init+0x134>)
 8000830:	f000 fd1d 	bl	800126e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800083a:	482c      	ldr	r0, [pc, #176]	@ (80008ec <MX_GPIO_Init+0x138>)
 800083c:	f000 fd17 	bl	800126e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MRF24_CS_Pin|MRF24_RESET_Pin|MRF24_WAKE_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000846:	482a      	ldr	r0, [pc, #168]	@ (80008f0 <MX_GPIO_Init+0x13c>)
 8000848:	f000 fd11 	bl	800126e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BOARD_Pin */
  GPIO_InitStruct.Pin = LED_BOARD_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2302      	movs	r3, #2
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BOARD_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4619      	mov	r1, r3
 8000864:	4820      	ldr	r0, [pc, #128]	@ (80008e8 <MX_GPIO_Init+0x134>)
 8000866:	f000 fb67 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_VERDE_Pin LED_AMARILLO_Pin LED_ROJO_Pin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin;
 800086a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800086e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2302      	movs	r3, #2
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	481a      	ldr	r0, [pc, #104]	@ (80008ec <MX_GPIO_Init+0x138>)
 8000884:	f000 fb58 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000888:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	4619      	mov	r1, r3
 800089c:	4813      	ldr	r0, [pc, #76]	@ (80008ec <MX_GPIO_Init+0x138>)
 800089e:	f000 fb4b 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : MRF24_CS_Pin MRF24_RESET_Pin MRF24_WAKE_Pin */
  GPIO_InitStruct.Pin = MRF24_CS_Pin|MRF24_RESET_Pin|MRF24_WAKE_Pin;
 80008a2:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <MX_GPIO_Init+0x13c>)
 80008bc:	f000 fb3c 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : MRF24_INTERRUP_Pin */
  GPIO_InitStruct.Pin = MRF24_INTERRUP_Pin;
 80008c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MRF24_INTERRUP_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <MX_GPIO_Init+0x13c>)
 80008d6:	f000 fb2f 	bl	8000f38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40011000 	.word	0x40011000
 80008ec:	40010c00 	.word	0x40010c00
 80008f0:	40010800 	.word	0x40010800

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, LED_PRENDIDO);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000902:	480b      	ldr	r0, [pc, #44]	@ (8000930 <Error_Handler+0x3c>)
 8000904:	f000 fcb3 	bl	800126e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, LED_APAGADO);
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800090e:	4809      	ldr	r0, [pc, #36]	@ (8000934 <Error_Handler+0x40>)
 8000910:	f000 fcad 	bl	800126e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_AMARILLO_GPIO_Port, LED_AMARILLO_Pin, LED_APAGADO);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091a:	4806      	ldr	r0, [pc, #24]	@ (8000934 <Error_Handler+0x40>)
 800091c:	f000 fca7 	bl	800126e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, LED_APAGADO);
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000926:	4803      	ldr	r0, [pc, #12]	@ (8000934 <Error_Handler+0x40>)
 8000928:	f000 fca1 	bl	800126e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, LED_PRENDIDO);
 800092c:	bf00      	nop
 800092e:	e7e5      	b.n	80008fc <Error_Handler+0x8>
 8000930:	40011000 	.word	0x40011000
 8000934:	40010c00 	.word	0x40010c00

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <HAL_MspInit+0x5c>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a14      	ldr	r2, [pc, #80]	@ (8000994 <HAL_MspInit+0x5c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_MspInit+0x5c>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <HAL_MspInit+0x5c>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a0e      	ldr	r2, [pc, #56]	@ (8000994 <HAL_MspInit+0x5c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <HAL_MspInit+0x5c>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <HAL_MspInit+0x60>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <HAL_MspInit+0x60>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40021000 	.word	0x40021000
 8000998:	40010000 	.word	0x40010000

0800099c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <HAL_SPI_MspInit+0x88>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d12f      	bne.n	8000a1c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <HAL_SPI_MspInit+0x8c>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a19      	ldr	r2, [pc, #100]	@ (8000a28 <HAL_SPI_MspInit+0x8c>)
 80009c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <HAL_SPI_MspInit+0x8c>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <HAL_SPI_MspInit+0x8c>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <HAL_SPI_MspInit+0x8c>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <HAL_SPI_MspInit+0x8c>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80009ec:	23a0      	movs	r3, #160	@ 0xa0
 80009ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4619      	mov	r1, r3
 80009fe:	480b      	ldr	r0, [pc, #44]	@ (8000a2c <HAL_SPI_MspInit+0x90>)
 8000a00:	f000 fa9a 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a04:	2340      	movs	r3, #64	@ 0x40
 8000a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <HAL_SPI_MspInit+0x90>)
 8000a18:	f000 fa8e 	bl	8000f38 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40013000 	.word	0x40013000
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010800 	.word	0x40010800

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <MemManage_Handler+0x4>

08000a48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f936 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return 1;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <_kill>:

int _kill(int pid, int sig)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aa0:	f002 fb08 	bl	80030b4 <__errno>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2216      	movs	r2, #22
 8000aa8:	601a      	str	r2, [r3, #0]
  return -1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_exit>:

void _exit (int status)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000abe:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffe7 	bl	8000a96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <_exit+0x12>

08000acc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e00a      	b.n	8000af4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ade:	f3af 8000 	nop.w
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	60ba      	str	r2, [r7, #8]
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf0      	blt.n	8000ade <_read+0x12>
  }

  return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	e009      	b.n	8000b2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbf1      	blt.n	8000b18 <_write+0x12>
  }
  return len;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <_close>:

int _close(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b64:	605a      	str	r2, [r3, #4]
  return 0;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr

08000b72 <_isatty>:

int _isatty(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b085      	sub	sp, #20
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f002 fa70 	bl	80030b4 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20005000 	.word	0x20005000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	20000140 	.word	0x20000140
 8000c08:	20000308 	.word	0x20000308

08000c0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c18:	f7ff fff8 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c1e:	490c      	ldr	r1, [pc, #48]	@ (8000c50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c20:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c34:	4c09      	ldr	r4, [pc, #36]	@ (8000c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c42:	f002 fa3d 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c46:	f7ff fd37 	bl	80006b8 <main>
  bx lr
 8000c4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000c54:	08003eec 	.word	0x08003eec
  ldr r2, =_sbss
 8000c58:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000c5c:	20000304 	.word	0x20000304

08000c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_2_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <HAL_Init+0x28>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	@ (8000c8c <HAL_Init+0x28>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f92b 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f000 f808 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fe5a 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40022000 	.word	0x40022000

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f935 	bl	8000f1e <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f000 f90b 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	@ (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000018 	.word	0x20000018
 8000ce8:	20000020 	.word	0x20000020
 8000cec:	2000001c 	.word	0x2000001c

08000cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_IncTick+0x1c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_IncTick+0x20>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a03      	ldr	r2, [pc, #12]	@ (8000d10 <HAL_IncTick+0x20>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	20000020 	.word	0x20000020
 8000d10:	20000144 	.word	0x20000144

08000d14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b02      	ldr	r3, [pc, #8]	@ (8000d24 <HAL_GetTick+0x10>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	20000144 	.word	0x20000144

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff fff0 	bl	8000d14 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffe0 	bl	8000d14 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000020 	.word	0x20000020

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	@ (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	@ 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff90 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff49 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff5e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff90 	bl	8000e28 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5f 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffb0 	bl	8000e8c <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b08b      	sub	sp, #44	@ 0x2c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e169      	b.n	8001220 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 8158 	bne.w	800121a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	4a9a      	ldr	r2, [pc, #616]	@ (80011d8 <HAL_GPIO_Init+0x2a0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d05e      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f74:	4a98      	ldr	r2, [pc, #608]	@ (80011d8 <HAL_GPIO_Init+0x2a0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d875      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f7a:	4a98      	ldr	r2, [pc, #608]	@ (80011dc <HAL_GPIO_Init+0x2a4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d058      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f80:	4a96      	ldr	r2, [pc, #600]	@ (80011dc <HAL_GPIO_Init+0x2a4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d86f      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f86:	4a96      	ldr	r2, [pc, #600]	@ (80011e0 <HAL_GPIO_Init+0x2a8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d052      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f8c:	4a94      	ldr	r2, [pc, #592]	@ (80011e0 <HAL_GPIO_Init+0x2a8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d869      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f92:	4a94      	ldr	r2, [pc, #592]	@ (80011e4 <HAL_GPIO_Init+0x2ac>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d04c      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000f98:	4a92      	ldr	r2, [pc, #584]	@ (80011e4 <HAL_GPIO_Init+0x2ac>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d863      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000f9e:	4a92      	ldr	r2, [pc, #584]	@ (80011e8 <HAL_GPIO_Init+0x2b0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d046      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
 8000fa4:	4a90      	ldr	r2, [pc, #576]	@ (80011e8 <HAL_GPIO_Init+0x2b0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d85d      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000faa:	2b12      	cmp	r3, #18
 8000fac:	d82a      	bhi.n	8001004 <HAL_GPIO_Init+0xcc>
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d859      	bhi.n	8001066 <HAL_GPIO_Init+0x12e>
 8000fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb8 <HAL_GPIO_Init+0x80>)
 8000fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb8:	08001033 	.word	0x08001033
 8000fbc:	0800100d 	.word	0x0800100d
 8000fc0:	0800101f 	.word	0x0800101f
 8000fc4:	08001061 	.word	0x08001061
 8000fc8:	08001067 	.word	0x08001067
 8000fcc:	08001067 	.word	0x08001067
 8000fd0:	08001067 	.word	0x08001067
 8000fd4:	08001067 	.word	0x08001067
 8000fd8:	08001067 	.word	0x08001067
 8000fdc:	08001067 	.word	0x08001067
 8000fe0:	08001067 	.word	0x08001067
 8000fe4:	08001067 	.word	0x08001067
 8000fe8:	08001067 	.word	0x08001067
 8000fec:	08001067 	.word	0x08001067
 8000ff0:	08001067 	.word	0x08001067
 8000ff4:	08001067 	.word	0x08001067
 8000ff8:	08001067 	.word	0x08001067
 8000ffc:	08001015 	.word	0x08001015
 8001000:	08001029 	.word	0x08001029
 8001004:	4a79      	ldr	r2, [pc, #484]	@ (80011ec <HAL_GPIO_Init+0x2b4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100a:	e02c      	b.n	8001066 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	623b      	str	r3, [r7, #32]
          break;
 8001012:	e029      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	3304      	adds	r3, #4
 800101a:	623b      	str	r3, [r7, #32]
          break;
 800101c:	e024      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	3308      	adds	r3, #8
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e01f      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	330c      	adds	r3, #12
 800102e:	623b      	str	r3, [r7, #32]
          break;
 8001030:	e01a      	b.n	8001068 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800103a:	2304      	movs	r3, #4
 800103c:	623b      	str	r3, [r7, #32]
          break;
 800103e:	e013      	b.n	8001068 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d105      	bne.n	8001054 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001048:	2308      	movs	r3, #8
 800104a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	611a      	str	r2, [r3, #16]
          break;
 8001052:	e009      	b.n	8001068 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001054:	2308      	movs	r3, #8
 8001056:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69fa      	ldr	r2, [r7, #28]
 800105c:	615a      	str	r2, [r3, #20]
          break;
 800105e:	e003      	b.n	8001068 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
          break;
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x130>
          break;
 8001066:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2bff      	cmp	r3, #255	@ 0xff
 800106c:	d801      	bhi.n	8001072 <HAL_GPIO_Init+0x13a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	e001      	b.n	8001076 <HAL_GPIO_Init+0x13e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3304      	adds	r3, #4
 8001076:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2bff      	cmp	r3, #255	@ 0xff
 800107c:	d802      	bhi.n	8001084 <HAL_GPIO_Init+0x14c>
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	e002      	b.n	800108a <HAL_GPIO_Init+0x152>
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	3b08      	subs	r3, #8
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	210f      	movs	r1, #15
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	401a      	ands	r2, r3
 800109c:	6a39      	ldr	r1, [r7, #32]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	431a      	orrs	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 80b1 	beq.w	800121a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010b8:	4b4d      	ldr	r3, [pc, #308]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a4c      	ldr	r2, [pc, #304]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b4a      	ldr	r3, [pc, #296]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010d0:	4a48      	ldr	r2, [pc, #288]	@ (80011f4 <HAL_GPIO_Init+0x2bc>)
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a40      	ldr	r2, [pc, #256]	@ (80011f8 <HAL_GPIO_Init+0x2c0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d013      	beq.n	8001124 <HAL_GPIO_Init+0x1ec>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a3f      	ldr	r2, [pc, #252]	@ (80011fc <HAL_GPIO_Init+0x2c4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d00d      	beq.n	8001120 <HAL_GPIO_Init+0x1e8>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a3e      	ldr	r2, [pc, #248]	@ (8001200 <HAL_GPIO_Init+0x2c8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d007      	beq.n	800111c <HAL_GPIO_Init+0x1e4>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a3d      	ldr	r2, [pc, #244]	@ (8001204 <HAL_GPIO_Init+0x2cc>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d101      	bne.n	8001118 <HAL_GPIO_Init+0x1e0>
 8001114:	2303      	movs	r3, #3
 8001116:	e006      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 8001118:	2304      	movs	r3, #4
 800111a:	e004      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 800111c:	2302      	movs	r3, #2
 800111e:	e002      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 8001124:	2300      	movs	r3, #0
 8001126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001128:	f002 0203 	and.w	r2, r2, #3
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	4093      	lsls	r3, r2
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001136:	492f      	ldr	r1, [pc, #188]	@ (80011f4 <HAL_GPIO_Init+0x2bc>)
 8001138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001150:	4b2d      	ldr	r3, [pc, #180]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	492c      	ldr	r1, [pc, #176]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	608b      	str	r3, [r1, #8]
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800115e:	4b2a      	ldr	r3, [pc, #168]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	43db      	mvns	r3, r3
 8001166:	4928      	ldr	r1, [pc, #160]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 8001168:	4013      	ands	r3, r2
 800116a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001178:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	4922      	ldr	r1, [pc, #136]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	60cb      	str	r3, [r1, #12]
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	43db      	mvns	r3, r3
 800118e:	491e      	ldr	r1, [pc, #120]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 8001190:	4013      	ands	r3, r2
 8001192:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4918      	ldr	r1, [pc, #96]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	4914      	ldr	r1, [pc, #80]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d021      	beq.n	800120c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	490e      	ldr	r1, [pc, #56]	@ (8001208 <HAL_GPIO_Init+0x2d0>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	600b      	str	r3, [r1, #0]
 80011d4:	e021      	b.n	800121a <HAL_GPIO_Init+0x2e2>
 80011d6:	bf00      	nop
 80011d8:	10320000 	.word	0x10320000
 80011dc:	10310000 	.word	0x10310000
 80011e0:	10220000 	.word	0x10220000
 80011e4:	10210000 	.word	0x10210000
 80011e8:	10120000 	.word	0x10120000
 80011ec:	10110000 	.word	0x10110000
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010800 	.word	0x40010800
 80011fc:	40010c00 	.word	0x40010c00
 8001200:	40011000 	.word	0x40011000
 8001204:	40011400 	.word	0x40011400
 8001208:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <HAL_GPIO_Init+0x304>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	43db      	mvns	r3, r3
 8001214:	4909      	ldr	r1, [pc, #36]	@ (800123c <HAL_GPIO_Init+0x304>)
 8001216:	4013      	ands	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	3301      	adds	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	fa22 f303 	lsr.w	r3, r2, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	f47f ae8e 	bne.w	8000f4c <HAL_GPIO_Init+0x14>
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	372c      	adds	r7, #44	@ 0x2c
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40010400 	.word	0x40010400

08001240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	4013      	ands	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e001      	b.n	8001262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]
 800127a:	4613      	mov	r3, r2
 800127c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800127e:	787b      	ldrb	r3, [r7, #1]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001284:	887a      	ldrh	r2, [r7, #2]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800128a:	e003      	b.n	8001294 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	041a      	lsls	r2, r3, #16
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	611a      	str	r2, [r3, #16]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b0:	887a      	ldrh	r2, [r7, #2]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	041a      	lsls	r2, r3, #16
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	400b      	ands	r3, r1
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	611a      	str	r2, [r3, #16]
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e272      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8087 	beq.w	80013fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f0:	4b92      	ldr	r3, [pc, #584]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d00c      	beq.n	8001316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012fc:	4b8f      	ldr	r3, [pc, #572]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d112      	bne.n	800132e <HAL_RCC_OscConfig+0x5e>
 8001308:	4b8c      	ldr	r3, [pc, #560]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001314:	d10b      	bne.n	800132e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	4b89      	ldr	r3, [pc, #548]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d06c      	beq.n	80013fc <HAL_RCC_OscConfig+0x12c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d168      	bne.n	80013fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e24c      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x76>
 8001338:	4b80      	ldr	r3, [pc, #512]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a7f      	ldr	r2, [pc, #508]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e02e      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b7b      	ldr	r3, [pc, #492]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a7a      	ldr	r2, [pc, #488]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b78      	ldr	r3, [pc, #480]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a77      	ldr	r2, [pc, #476]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0xbc>
 8001372:	4b72      	ldr	r3, [pc, #456]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a71      	ldr	r2, [pc, #452]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b6f      	ldr	r3, [pc, #444]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6e      	ldr	r2, [pc, #440]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 800138c:	4b6b      	ldr	r3, [pc, #428]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a6a      	ldr	r2, [pc, #424]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b68      	ldr	r3, [pc, #416]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a67      	ldr	r2, [pc, #412]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fcb2 	bl	8000d14 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fcae 	bl	8000d14 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	@ 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e200      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b5d      	ldr	r3, [pc, #372]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xe4>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc9e 	bl	8000d14 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fc9a 	bl	8000d14 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	@ 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1ec      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b53      	ldr	r3, [pc, #332]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x10c>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d063      	beq.n	80014d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800140a:	4b4c      	ldr	r3, [pc, #304]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001416:	4b49      	ldr	r3, [pc, #292]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b08      	cmp	r3, #8
 8001420:	d11c      	bne.n	800145c <HAL_RCC_OscConfig+0x18c>
 8001422:	4b46      	ldr	r3, [pc, #280]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b43      	ldr	r3, [pc, #268]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x176>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e1c0      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4939      	ldr	r1, [pc, #228]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e03a      	b.n	80014d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b36      	ldr	r3, [pc, #216]	@ (8001540 <HAL_RCC_OscConfig+0x270>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fc53 	bl	8000d14 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fc4f 	bl	8000d14 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e1a1      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b2d      	ldr	r3, [pc, #180]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4927      	ldr	r1, [pc, #156]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <HAL_RCC_OscConfig+0x270>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc32 	bl	8000d14 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fc2e 	bl	8000d14 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e180      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d03a      	beq.n	8001554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d019      	beq.n	800151a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <HAL_RCC_OscConfig+0x274>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fc12 	bl	8000d14 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fc0e 	bl	8000d14 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e160      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001512:	2001      	movs	r0, #1
 8001514:	f000 fa9c 	bl	8001a50 <RCC_Delay>
 8001518:	e01c      	b.n	8001554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151a:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <HAL_RCC_OscConfig+0x274>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001520:	f7ff fbf8 	bl	8000d14 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001526:	e00f      	b.n	8001548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fbf4 	bl	8000d14 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d908      	bls.n	8001548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e146      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	42420000 	.word	0x42420000
 8001544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	4b92      	ldr	r3, [pc, #584]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e9      	bne.n	8001528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80a6 	beq.w	80016ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001566:	4b8b      	ldr	r3, [pc, #556]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10d      	bne.n	800158e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b88      	ldr	r3, [pc, #544]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a87      	ldr	r2, [pc, #540]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b85      	ldr	r3, [pc, #532]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b82      	ldr	r3, [pc, #520]	@ (8001798 <HAL_RCC_OscConfig+0x4c8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d118      	bne.n	80015cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4b7f      	ldr	r3, [pc, #508]	@ (8001798 <HAL_RCC_OscConfig+0x4c8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a7e      	ldr	r2, [pc, #504]	@ (8001798 <HAL_RCC_OscConfig+0x4c8>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fbb5 	bl	8000d14 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff fbb1 	bl	8000d14 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	@ 0x64
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e103      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b75      	ldr	r3, [pc, #468]	@ (8001798 <HAL_RCC_OscConfig+0x4c8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x312>
 80015d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	e02d      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x334>
 80015ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a69      	ldr	r2, [pc, #420]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	4b67      	ldr	r3, [pc, #412]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a66      	ldr	r2, [pc, #408]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	e01c      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d10c      	bne.n	8001626 <HAL_RCC_OscConfig+0x356>
 800160c:	4b61      	ldr	r3, [pc, #388]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a60      	ldr	r2, [pc, #384]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	4b5e      	ldr	r3, [pc, #376]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a5d      	ldr	r2, [pc, #372]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	e00b      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 8001626:	4b5b      	ldr	r3, [pc, #364]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	4b58      	ldr	r3, [pc, #352]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a57      	ldr	r2, [pc, #348]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d015      	beq.n	8001672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff fb65 	bl	8000d14 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff fb61 	bl	8000d14 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e0b1      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001664:	4b4b      	ldr	r3, [pc, #300]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ee      	beq.n	800164e <HAL_RCC_OscConfig+0x37e>
 8001670:	e014      	b.n	800169c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff fb4f 	bl	8000d14 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff fb4b 	bl	8000d14 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e09b      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	4b40      	ldr	r3, [pc, #256]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1ee      	bne.n	800167a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d105      	bne.n	80016ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8087 	beq.w	80017c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b8:	4b36      	ldr	r3, [pc, #216]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d061      	beq.n	8001788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d146      	bne.n	800175a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016cc:	4b33      	ldr	r3, [pc, #204]	@ (800179c <HAL_RCC_OscConfig+0x4cc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb1f 	bl	8000d14 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff fb1b 	bl	8000d14 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e06d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001700:	d108      	bne.n	8001714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001702:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	4921      	ldr	r1, [pc, #132]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001714:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a19      	ldr	r1, [r3, #32]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	430b      	orrs	r3, r1
 8001726:	491b      	ldr	r1, [pc, #108]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <HAL_RCC_OscConfig+0x4cc>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff faef 	bl	8000d14 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff faeb 	bl	8000d14 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e03d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x46a>
 8001758:	e035      	b.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <HAL_RCC_OscConfig+0x4cc>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fad8 	bl	8000d14 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff fad4 	bl	8000d14 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e026      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x498>
 8001786:	e01e      	b.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e019      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
 8001794:	40021000 	.word	0x40021000
 8001798:	40007000 	.word	0x40007000
 800179c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_RCC_OscConfig+0x500>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0d0      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d910      	bls.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b67      	ldr	r3, [pc, #412]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0207 	bic.w	r2, r3, #7
 80017fe:	4965      	ldr	r1, [pc, #404]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b63      	ldr	r3, [pc, #396]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0b8      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001830:	4b59      	ldr	r3, [pc, #356]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a58      	ldr	r2, [pc, #352]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800183a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001848:	4b53      	ldr	r3, [pc, #332]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a52      	ldr	r2, [pc, #328]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001854:	4b50      	ldr	r3, [pc, #320]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	494d      	ldr	r1, [pc, #308]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d040      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b47      	ldr	r3, [pc, #284]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d115      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e07f      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e073      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06b      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b2:	4b39      	ldr	r3, [pc, #228]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f023 0203 	bic.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4936      	ldr	r1, [pc, #216]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c4:	f7ff fa26 	bl	8000d14 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff fa22 	bl	8000d14 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e053      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 020c 	and.w	r2, r3, #12
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1eb      	bne.n	80018cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d210      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 0207 	bic.w	r2, r3, #7
 800190a:	4922      	ldr	r1, [pc, #136]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e032      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4916      	ldr	r1, [pc, #88]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800194e:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	490e      	ldr	r1, [pc, #56]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001962:	f000 f821 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001966:	4602      	mov	r2, r0
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	490a      	ldr	r1, [pc, #40]	@ (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	5ccb      	ldrb	r3, [r1, r3]
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	4a09      	ldr	r2, [pc, #36]	@ (80019a0 <HAL_RCC_ClockConfig+0x1cc>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f984 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000
 8001998:	40021000 	.word	0x40021000
 800199c:	08003dc0 	.word	0x08003dc0
 80019a0:	20000018 	.word	0x20000018
 80019a4:	2000001c 	.word	0x2000001c

080019a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x30>
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x36>
 80019d6:	e027      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80019da:	613b      	str	r3, [r7, #16]
      break;
 80019dc:	e027      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	0c9b      	lsrs	r3, r3, #18
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	4a17      	ldr	r2, [pc, #92]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019e8:	5cd3      	ldrb	r3, [r2, r3]
 80019ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	0c5b      	lsrs	r3, r3, #17
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a0a:	fb03 f202 	mul.w	r2, r3, r2
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e004      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	613b      	str	r3, [r7, #16]
      break;
 8001a26:	e002      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a2a:	613b      	str	r3, [r7, #16]
      break;
 8001a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2e:	693b      	ldr	r3, [r7, #16]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	007a1200 	.word	0x007a1200
 8001a44:	08003dd0 	.word	0x08003dd0
 8001a48:	08003de0 	.word	0x08003de0
 8001a4c:	003d0900 	.word	0x003d0900

08001a50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a58:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <RCC_Delay+0x34>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <RCC_Delay+0x38>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	0a5b      	lsrs	r3, r3, #9
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a6c:	bf00      	nop
  }
  while (Delay --);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1e5a      	subs	r2, r3, #1
 8001a72:	60fa      	str	r2, [r7, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f9      	bne.n	8001a6c <RCC_Delay+0x1c>
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000018 	.word	0x20000018
 8001a88:	10624dd3 	.word	0x10624dd3

08001a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e076      	b.n	8001b8c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d108      	bne.n	8001ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001aae:	d009      	beq.n	8001ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
 8001ab6:	e005      	b.n	8001ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe ff5c 	bl	800099c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001afa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b48:	ea42 0103 	orr.w	r1, r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	0c1a      	lsrs	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f002 0204 	and.w	r2, r2, #4
 8001b6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ba4:	f7ff f8b6 	bl	8000d14 <HAL_GetTick>
 8001ba8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d001      	beq.n	8001bbe <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e12a      	b.n	8001e14 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_SPI_Transmit+0x36>
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e122      	b.n	8001e14 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_SPI_Transmit+0x48>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e11b      	b.n	8001e14 <HAL_SPI_Transmit+0x280>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2203      	movs	r2, #3
 8001be8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	88fa      	ldrh	r2, [r7, #6]
 8001bfc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	88fa      	ldrh	r2, [r7, #6]
 8001c02:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c2a:	d10f      	bne.n	8001c4c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c56:	2b40      	cmp	r3, #64	@ 0x40
 8001c58:	d007      	beq.n	8001c6a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c72:	d152      	bne.n	8001d1a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_SPI_Transmit+0xee>
 8001c7c:	8b7b      	ldrh	r3, [r7, #26]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d145      	bne.n	8001d0e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	1c9a      	adds	r2, r3, #2
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ca6:	e032      	b.n	8001d0e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d112      	bne.n	8001cdc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	881a      	ldrh	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	1c9a      	adds	r2, r3, #2
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001cda:	e018      	b.n	8001d0e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cdc:	f7ff f81a 	bl	8000d14 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d803      	bhi.n	8001cf4 <HAL_SPI_Transmit+0x160>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf2:	d102      	bne.n	8001cfa <HAL_SPI_Transmit+0x166>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e082      	b.n	8001e14 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1c7      	bne.n	8001ca8 <HAL_SPI_Transmit+0x114>
 8001d18:	e053      	b.n	8001dc2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <HAL_SPI_Transmit+0x194>
 8001d22:	8b7b      	ldrh	r3, [r7, #26]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d147      	bne.n	8001db8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	330c      	adds	r3, #12
 8001d32:	7812      	ldrb	r2, [r2, #0]
 8001d34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d4e:	e033      	b.n	8001db8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d113      	bne.n	8001d86 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	330c      	adds	r3, #12
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001d84:	e018      	b.n	8001db8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d86:	f7fe ffc5 	bl	8000d14 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d803      	bhi.n	8001d9e <HAL_SPI_Transmit+0x20a>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d102      	bne.n	8001da4 <HAL_SPI_Transmit+0x210>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e02d      	b.n	8001e14 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1c6      	bne.n	8001d50 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	6839      	ldr	r1, [r7, #0]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fbc4 	bl	8002554 <SPI_EndRxTxTransaction>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10a      	bne.n	8001df6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d001      	beq.n	8001e3c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e104      	b.n	8002046 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e44:	d112      	bne.n	8001e6c <HAL_SPI_Receive+0x50>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10e      	bne.n	8001e6c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2204      	movs	r2, #4
 8001e52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e56:	88fa      	ldrh	r2, [r7, #6]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f8f3 	bl	800204e <HAL_SPI_TransmitReceive>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	e0ec      	b.n	8002046 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e6c:	f7fe ff52 	bl	8000d14 <HAL_GetTick>
 8001e70:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_SPI_Receive+0x62>
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0e1      	b.n	8002046 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_SPI_Receive+0x74>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e0da      	b.n	8002046 <HAL_SPI_Receive+0x22a>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	88fa      	ldrh	r2, [r7, #6]
 8001eb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	88fa      	ldrh	r2, [r7, #6]
 8001eb6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ede:	d10f      	bne.n	8001f00 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001efe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0a:	2b40      	cmp	r3, #64	@ 0x40
 8001f0c:	d007      	beq.n	8001f1e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d170      	bne.n	8002008 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001f26:	e035      	b.n	8001f94 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d115      	bne.n	8001f62 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f103 020c 	add.w	r2, r3, #12
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f42:	7812      	ldrb	r2, [r2, #0]
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f60:	e018      	b.n	8001f94 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f62:	f7fe fed7 	bl	8000d14 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d803      	bhi.n	8001f7a <HAL_SPI_Receive+0x15e>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d102      	bne.n	8001f80 <HAL_SPI_Receive+0x164>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e058      	b.n	8002046 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1c4      	bne.n	8001f28 <HAL_SPI_Receive+0x10c>
 8001f9e:	e038      	b.n	8002012 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d113      	bne.n	8001fd6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb8:	b292      	uxth	r2, r2
 8001fba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc0:	1c9a      	adds	r2, r3, #2
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001fd4:	e018      	b.n	8002008 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fd6:	f7fe fe9d 	bl	8000d14 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d803      	bhi.n	8001fee <HAL_SPI_Receive+0x1d2>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d102      	bne.n	8001ff4 <HAL_SPI_Receive+0x1d8>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e01e      	b.n	8002046 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1c6      	bne.n	8001fa0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fa4a 	bl	80024b0 <SPI_EndRxTransaction>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002044:	2300      	movs	r3, #0
  }
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b08a      	sub	sp, #40	@ 0x28
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800205c:	2301      	movs	r3, #1
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002060:	f7fe fe58 	bl	8000d14 <HAL_GetTick>
 8002064:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800206c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002078:	7ffb      	ldrb	r3, [r7, #31]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d00c      	beq.n	8002098 <HAL_SPI_TransmitReceive+0x4a>
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002084:	d106      	bne.n	8002094 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <HAL_SPI_TransmitReceive+0x46>
 800208e:	7ffb      	ldrb	r3, [r7, #31]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d001      	beq.n	8002098 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002094:	2302      	movs	r3, #2
 8002096:	e17f      	b.n	8002398 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_SPI_TransmitReceive+0x5c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_SPI_TransmitReceive+0x5c>
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e174      	b.n	8002398 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_SPI_TransmitReceive+0x6e>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e16d      	b.n	8002398 <HAL_SPI_TransmitReceive+0x34a>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d003      	beq.n	80020d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2205      	movs	r2, #5
 80020d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	887a      	ldrh	r2, [r7, #2]
 80020ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	887a      	ldrh	r2, [r7, #2]
 80020fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002118:	2b40      	cmp	r3, #64	@ 0x40
 800211a:	d007      	beq.n	800212c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800212a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002134:	d17e      	bne.n	8002234 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_SPI_TransmitReceive+0xf6>
 800213e:	8afb      	ldrh	r3, [r7, #22]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d16c      	bne.n	800221e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	1c9a      	adds	r2, r3, #2
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002168:	e059      	b.n	800221e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b02      	cmp	r3, #2
 8002176:	d11b      	bne.n	80021b0 <HAL_SPI_TransmitReceive+0x162>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d016      	beq.n	80021b0 <HAL_SPI_TransmitReceive+0x162>
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	2b01      	cmp	r3, #1
 8002186:	d113      	bne.n	80021b0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218c:	881a      	ldrh	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002198:	1c9a      	adds	r2, r3, #2
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d119      	bne.n	80021f2 <HAL_SPI_TransmitReceive+0x1a4>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d014      	beq.n	80021f2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d2:	b292      	uxth	r2, r2
 80021d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021da:	1c9a      	adds	r2, r3, #2
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021ee:	2301      	movs	r3, #1
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021f2:	f7fe fd8f 	bl	8000d14 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021fe:	429a      	cmp	r2, r3
 8002200:	d80d      	bhi.n	800221e <HAL_SPI_TransmitReceive+0x1d0>
 8002202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d009      	beq.n	800221e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0bc      	b.n	8002398 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1a0      	bne.n	800216a <HAL_SPI_TransmitReceive+0x11c>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d19b      	bne.n	800216a <HAL_SPI_TransmitReceive+0x11c>
 8002232:	e082      	b.n	800233a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_SPI_TransmitReceive+0x1f4>
 800223c:	8afb      	ldrh	r3, [r7, #22]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d171      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	330c      	adds	r3, #12
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002268:	e05d      	b.n	8002326 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b02      	cmp	r3, #2
 8002276:	d11c      	bne.n	80022b2 <HAL_SPI_TransmitReceive+0x264>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d017      	beq.n	80022b2 <HAL_SPI_TransmitReceive+0x264>
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	2b01      	cmp	r3, #1
 8002286:	d114      	bne.n	80022b2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	330c      	adds	r3, #12
 8002292:	7812      	ldrb	r2, [r2, #0]
 8002294:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d119      	bne.n	80022f4 <HAL_SPI_TransmitReceive+0x2a6>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d014      	beq.n	80022f4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022f0:	2301      	movs	r3, #1
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022f4:	f7fe fd0e 	bl	8000d14 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002300:	429a      	cmp	r2, r3
 8002302:	d803      	bhi.n	800230c <HAL_SPI_TransmitReceive+0x2be>
 8002304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d102      	bne.n	8002312 <HAL_SPI_TransmitReceive+0x2c4>
 800230c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e038      	b.n	8002398 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d19c      	bne.n	800226a <HAL_SPI_TransmitReceive+0x21c>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d197      	bne.n	800226a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800233a:	6a3a      	ldr	r2, [r7, #32]
 800233c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f908 	bl	8002554 <SPI_EndRxTxTransaction>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2220      	movs	r2, #32
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e01d      	b.n	8002398 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002396:	2300      	movs	r3, #0
  }
}
 8002398:	4618      	mov	r0, r3
 800239a:	3728      	adds	r7, #40	@ 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023b0:	f7fe fcb0 	bl	8000d14 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	4413      	add	r3, r2
 80023be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023c0:	f7fe fca8 	bl	8000d14 <HAL_GetTick>
 80023c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023c6:	4b39      	ldr	r3, [pc, #228]	@ (80024ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	015b      	lsls	r3, r3, #5
 80023cc:	0d1b      	lsrs	r3, r3, #20
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d6:	e054      	b.n	8002482 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023de:	d050      	beq.n	8002482 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023e0:	f7fe fc98 	bl	8000d14 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d902      	bls.n	80023f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d13d      	bne.n	8002472 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002404:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800240e:	d111      	bne.n	8002434 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002418:	d004      	beq.n	8002424 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002422:	d107      	bne.n	8002434 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002432:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800243c:	d10f      	bne.n	800245e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800245c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e017      	b.n	80024a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3b01      	subs	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4013      	ands	r3, r2
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	429a      	cmp	r2, r3
 8002490:	bf0c      	ite	eq
 8002492:	2301      	moveq	r3, #1
 8002494:	2300      	movne	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	429a      	cmp	r2, r3
 800249e:	d19b      	bne.n	80023d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3720      	adds	r7, #32
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000018 	.word	0x20000018

080024b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024c4:	d111      	bne.n	80024ea <SPI_EndRxTransaction+0x3a>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024ce:	d004      	beq.n	80024da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d8:	d107      	bne.n	80024ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024e8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024f2:	d117      	bne.n	8002524 <SPI_EndRxTransaction+0x74>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024fc:	d112      	bne.n	8002524 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2200      	movs	r2, #0
 8002506:	2101      	movs	r1, #1
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff ff49 	bl	80023a0 <SPI_WaitFlagStateUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01a      	beq.n	800254a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e013      	b.n	800254c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2200      	movs	r2, #0
 800252c:	2180      	movs	r1, #128	@ 0x80
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f7ff ff36 	bl	80023a0 <SPI_WaitFlagStateUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253e:	f043 0220 	orr.w	r2, r3, #32
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e000      	b.n	800254c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2201      	movs	r2, #1
 8002568:	2102      	movs	r1, #2
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f7ff ff18 	bl	80023a0 <SPI_WaitFlagStateUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e013      	b.n	80025ae <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2200      	movs	r2, #0
 800258e:	2180      	movs	r1, #128	@ 0x80
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff ff05 	bl	80023a0 <SPI_WaitFlagStateUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e000      	b.n	80025ae <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <InicializoVariables>:
/**
 * @brief  Inicialización de variables de configuración por defecto.
 * @param  None
 * @retval None
 */
static void InicializoVariables(void) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0

	if(VACIO == data_config_s.my_address || VACIO == data_config_s.my_panid) {
 80025bc:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <InicializoVariables+0x4c>)
 80025be:	889b      	ldrh	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <InicializoVariables+0x14>
 80025c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002604 <InicializoVariables+0x4c>)
 80025c6:	885b      	ldrh	r3, [r3, #2]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d118      	bne.n	80025fe <InicializoVariables+0x46>

		strncpy((char *)data_config_s.security_key,
 80025cc:	2210      	movs	r2, #16
 80025ce:	490e      	ldr	r1, [pc, #56]	@ (8002608 <InicializoVariables+0x50>)
 80025d0:	480e      	ldr	r0, [pc, #56]	@ (800260c <InicializoVariables+0x54>)
 80025d2:	f000 fcba 	bl	8002f4a <strncpy>
				(char *) default_security_key,
				SEC_KEY_SIZE);
		strncpy((char *)data_config_s.my_mac,
 80025d6:	2208      	movs	r2, #8
 80025d8:	490d      	ldr	r1, [pc, #52]	@ (8002610 <InicializoVariables+0x58>)
 80025da:	480e      	ldr	r0, [pc, #56]	@ (8002614 <InicializoVariables+0x5c>)
 80025dc:	f000 fcb5 	bl	8002f4a <strncpy>
				(char *) default_mac_address,
				LARGE_MAC_SIZE);
		data_config_s.sequence_number = DEFAULT_SEC_NUMBER;
 80025e0:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <InicializoVariables+0x4c>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	721a      	strb	r2, [r3, #8]
		data_config_s.my_channel = DEFAULT_CHANNEL;
 80025e6:	4b07      	ldr	r3, [pc, #28]	@ (8002604 <InicializoVariables+0x4c>)
 80025e8:	2203      	movs	r2, #3
 80025ea:	701a      	strb	r2, [r3, #0]
		data_config_s.my_panid = MY_DEFAULT_PAN_ID;
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <InicializoVariables+0x4c>)
 80025ee:	f241 2234 	movw	r2, #4660	@ 0x1234
 80025f2:	805a      	strh	r2, [r3, #2]
		data_config_s.my_address = MY_DEFAULT_ADDRESS;
 80025f4:	4b03      	ldr	r3, [pc, #12]	@ (8002604 <InicializoVariables+0x4c>)
 80025f6:	f241 1211 	movw	r2, #4369	@ 0x1111
 80025fa:	809a      	strh	r2, [r3, #4]
	}
	return;
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
}
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000014c 	.word	0x2000014c
 8002608:	08003dec 	.word	0x08003dec
 800260c:	2000015d 	.word	0x2000015d
 8002610:	08003de4 	.word	0x08003de4
 8002614:	20000155 	.word	0x20000155

08002618 <InicializoMRF24>:
/**
 * @brief  Inicialización del módulo MRF24J40MA
 * @param  None
 * @retval Estado de la operación (TIME_OUT_OCURRIDO, INICIALIZACION_OK)
 */
static mrf24_state_t InicializoMRF24(void) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0

	uint8_t lectura;
	delayNoBloqueanteData_t delay_time_out;
	DelayInit(&delay_time_out, MRF_TIME_OUT);
 800261e:	463b      	mov	r3, r7
 8002620:	21c8      	movs	r1, #200	@ 0xc8
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd feee 	bl	8000404 <DelayInit>
	SetShortAddr(SOFTRST, RSTPWR | RSTBB | RSTMAC);
 8002628:	2107      	movs	r1, #7
 800262a:	202a      	movs	r0, #42	@ 0x2a
 800262c:	f000 f887 	bl	800273e <SetShortAddr>
	DelayReset(&delay_time_out);
 8002630:	463b      	mov	r3, r7
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd ff2c 	bl	8000490 <DelayReset>

	do {

		lectura = GetShortAddr(SOFTRST);
 8002638:	202a      	movs	r0, #42	@ 0x2a
 800263a:	f000 f8a0 	bl	800277e <GetShortAddr>
 800263e:	4603      	mov	r3, r0
 8002640:	73fb      	strb	r3, [r7, #15]
		if(DelayRead(&delay_time_out))
 8002642:	463b      	mov	r3, r7
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd fef4 	bl	8000432 <DelayRead>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <InicializoMRF24+0x3c>
			return TIME_OUT_OCURRED;
 8002650:	2308      	movs	r3, #8
 8002652:	e070      	b.n	8002736 <InicializoMRF24+0x11e>
	}while(VACIO != (lectura & (RSTPWR | RSTBB | RSTMAC)));
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1ec      	bne.n	8002638 <InicializoMRF24+0x20>
	delay_t(WAIT_50_MS);
 800265e:	2032      	movs	r0, #50	@ 0x32
 8002660:	f7fe fb62 	bl	8000d28 <HAL_Delay>
	SetShortAddr(RXFLUSH, RXFLUSH_RESET);
 8002664:	2101      	movs	r1, #1
 8002666:	200d      	movs	r0, #13
 8002668:	f000 f869 	bl	800273e <SetShortAddr>
	SetDeviceAddress();
 800266c:	f000 f906 	bl	800287c <SetDeviceAddress>
	SetDeviceMACAddress();
 8002670:	f000 f92a 	bl	80028c8 <SetDeviceMACAddress>
	SetLongAddr(RFCON1, VCOOPT1 | VCOOPT0);
 8002674:	2103      	movs	r1, #3
 8002676:	f240 2001 	movw	r0, #513	@ 0x201
 800267a:	f000 f8a1 	bl	80027c0 <SetLongAddr>
	SetLongAddr(RFCON2, PLLEN);
 800267e:	2180      	movs	r1, #128	@ 0x80
 8002680:	f240 2002 	movw	r0, #514	@ 0x202
 8002684:	f000 f89c 	bl	80027c0 <SetLongAddr>
	SetLongAddr(RFCON3, P20dBm | P0dBm);
 8002688:	2180      	movs	r1, #128	@ 0x80
 800268a:	f240 2003 	movw	r0, #515	@ 0x203
 800268e:	f000 f897 	bl	80027c0 <SetLongAddr>
	SetLongAddr(RFCON6, TXFIL | _20MRECVR);
 8002692:	2190      	movs	r1, #144	@ 0x90
 8002694:	f240 2006 	movw	r0, #518	@ 0x206
 8002698:	f000 f892 	bl	80027c0 <SetLongAddr>
	SetLongAddr(RFCON7, SLPCLK100KHZ);
 800269c:	2180      	movs	r1, #128	@ 0x80
 800269e:	f240 2007 	movw	r0, #519	@ 0x207
 80026a2:	f000 f88d 	bl	80027c0 <SetLongAddr>
	SetLongAddr(RFCON8, RFVCO);
 80026a6:	2110      	movs	r1, #16
 80026a8:	f44f 7002 	mov.w	r0, #520	@ 0x208
 80026ac:	f000 f888 	bl	80027c0 <SetLongAddr>
	SetLongAddr(SLPCON1, CLKOUTDIS | SLPCLKDIV0);
 80026b0:	2121      	movs	r1, #33	@ 0x21
 80026b2:	f44f 7008 	mov.w	r0, #544	@ 0x220
 80026b6:	f000 f883 	bl	80027c0 <SetLongAddr>
	SetShortAddr(BBREG2, CCA_MODE_1);
 80026ba:	2180      	movs	r1, #128	@ 0x80
 80026bc:	203a      	movs	r0, #58	@ 0x3a
 80026be:	f000 f83e 	bl	800273e <SetShortAddr>
	SetShortAddr(BBREG6, RSSIMODE2);
 80026c2:	2140      	movs	r1, #64	@ 0x40
 80026c4:	203e      	movs	r0, #62	@ 0x3e
 80026c6:	f000 f83a 	bl	800273e <SetShortAddr>
	SetShortAddr(CCAEDTH, CCAEDTH2 | CCAEDTH1);
 80026ca:	2106      	movs	r1, #6
 80026cc:	203f      	movs	r0, #63	@ 0x3f
 80026ce:	f000 f836 	bl	800273e <SetShortAddr>
	SetShortAddr(PACON2, FIFOEN | TXONTS2 | TXONTS1);
 80026d2:	2198      	movs	r1, #152	@ 0x98
 80026d4:	2018      	movs	r0, #24
 80026d6:	f000 f832 	bl	800273e <SetShortAddr>
	SetShortAddr(TXSTBL, RFSTBL3 | RFSTBL0 | MSIFS2 | MSIFS0);
 80026da:	2195      	movs	r1, #149	@ 0x95
 80026dc:	202e      	movs	r0, #46	@ 0x2e
 80026de:	f000 f82e 	bl	800273e <SetShortAddr>
	DelayReset(&delay_time_out);
 80026e2:	463b      	mov	r3, r7
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd fed3 	bl	8000490 <DelayReset>

	do {

		lectura = GetLongAddr(RFSTATE) & RX;
 80026ea:	f240 200f 	movw	r0, #527	@ 0x20f
 80026ee:	f000 f88b 	bl	8002808 <GetLongAddr>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80026f8:	73fb      	strb	r3, [r7, #15]
		if(DelayRead(&delay_time_out))
 80026fa:	463b      	mov	r3, r7
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fe98 	bl	8000432 <DelayRead>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <InicializoMRF24+0xf4>
			return TIME_OUT_OCURRED;
 8002708:	2308      	movs	r3, #8
 800270a:	e014      	b.n	8002736 <InicializoMRF24+0x11e>
	}while(RX != lectura);
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002710:	d1eb      	bne.n	80026ea <InicializoMRF24+0xd2>
	SetShortAddr(MRFINTCON, SLPIE_DIS | WAKEIE_DIS | HSYMTMRIE_DIS | SECIE_DIS
 8002712:	21f5      	movs	r1, #245	@ 0xf5
 8002714:	2032      	movs	r0, #50	@ 0x32
 8002716:	f000 f812 	bl	800273e <SetShortAddr>
					| TXG2IE_DIS | TXNIE_DIS);
	SetShortAddr(ACKTMOUT, DRPACK | MAWD5 | MAWD4 | MAWD3 | MAWD0);
 800271a:	21b9      	movs	r1, #185	@ 0xb9
 800271c:	2012      	movs	r0, #18
 800271e:	f000 f80e 	bl	800273e <SetShortAddr>
	SetChannel();
 8002722:	f000 f893 	bl	800284c <SetChannel>
	SetShortAddr(RXMCR, VACIO);
 8002726:	2100      	movs	r1, #0
 8002728:	2000      	movs	r0, #0
 800272a:	f000 f808 	bl	800273e <SetShortAddr>
	(void)GetShortAddr(INTSTAT);
 800272e:	2031      	movs	r0, #49	@ 0x31
 8002730:	f000 f825 	bl	800277e <GetShortAddr>
	return INITIALIZATION_OK;
 8002734:	2301      	movs	r3, #1
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <SetShortAddr>:
 * @retval None
 * @note   Al escribir direcciones cortas (SHORT ADDRESS REGISTER) se comienza
 *         con el MSB en 0 indicando una dirección corta, 6 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura.
 */
static void SetShortAddr(uint8_t reg_address, uint8_t valor) {
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	460a      	mov	r2, r1
 8002748:	71fb      	strb	r3, [r7, #7]
 800274a:	4613      	mov	r3, r2
 800274c:	71bb      	strb	r3, [r7, #6]

	reg_address = (uint8_t) (reg_address << SHIFT_SHORT_ADDR) | WRITE_8_BITS;
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	71fb      	strb	r3, [r7, #7]
	SetCSPin(DISABLE);
 800275a:	2000      	movs	r0, #0
 800275c:	f000 fa5a 	bl	8002c14 <SetCSPin>
	WriteByteSPIPort(reg_address);
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fa9e 	bl	8002ca4 <WriteByteSPIPort>
	WriteByteSPIPort(valor);
 8002768:	79bb      	ldrb	r3, [r7, #6]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fa9a 	bl	8002ca4 <WriteByteSPIPort>
	SetCSPin(ENABLE);
 8002770:	2001      	movs	r0, #1
 8002772:	f000 fa4f 	bl	8002c14 <SetCSPin>
	return;
 8002776:	bf00      	nop
}
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <GetShortAddr>:
 * @retval Valor devuelto por el módulo - 1 byte
 * @note   Al escribir direcciones cortas (SHORT ADDRESS REGISTER) se comienza
 *         con el MSB en 0 indicando una dirección corta, 6 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura.
 */
static uint8_t GetShortAddr(uint8_t reg_address) {
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	71fb      	strb	r3, [r7, #7]

	uint8_t leido_spi = VACIO;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
	reg_address = (uint8_t) (reg_address << SHIFT_SHORT_ADDR) & READ_8_BITS;
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002796:	71fb      	strb	r3, [r7, #7]
	SetCSPin(DISABLE);
 8002798:	2000      	movs	r0, #0
 800279a:	f000 fa3b 	bl	8002c14 <SetCSPin>
	WriteByteSPIPort(reg_address);
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fa7f 	bl	8002ca4 <WriteByteSPIPort>
	leido_spi = ReadByteSPIPort();
 80027a6:	f000 fab1 	bl	8002d0c <ReadByteSPIPort>
 80027aa:	4603      	mov	r3, r0
 80027ac:	73fb      	strb	r3, [r7, #15]
	SetCSPin(ENABLE);
 80027ae:	2001      	movs	r0, #1
 80027b0:	f000 fa30 	bl	8002c14 <SetCSPin>
	return leido_spi;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <SetLongAddr>:
 * @note   Al escribir direcciones largas (LONG ADDRESS REGISTER) se comienza
 *         con el MSB en 1 indicando una dirección larga, 10 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura. En
 *         los 4 bits restantes (LSB) no importa el valor.
 */
static void SetLongAddr(uint16_t reg_address, uint8_t valor) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	460a      	mov	r2, r1
 80027ca:	80fb      	strh	r3, [r7, #6]
 80027cc:	4613      	mov	r3, r2
 80027ce:	717b      	strb	r3, [r7, #5]

	reg_address = (reg_address << SHIFT_LONG_ADDR) | WRITE_16_BITS;
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	015b      	lsls	r3, r3, #5
 80027d4:	b21a      	sxth	r2, r3
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <SetLongAddr+0x44>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	b21b      	sxth	r3, r3
 80027dc:	80fb      	strh	r3, [r7, #6]
	SetCSPin(DISABLE);
 80027de:	2000      	movs	r0, #0
 80027e0:	f000 fa18 	bl	8002c14 <SetCSPin>
	Write2ByteSPIPort(reg_address);
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fa6e 	bl	8002cc8 <Write2ByteSPIPort>
	WriteByteSPIPort(valor);
 80027ec:	797b      	ldrb	r3, [r7, #5]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fa58 	bl	8002ca4 <WriteByteSPIPort>
	SetCSPin(ENABLE);
 80027f4:	2001      	movs	r0, #1
 80027f6:	f000 fa0d 	bl	8002c14 <SetCSPin>
	return;
 80027fa:	bf00      	nop
}
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	ffff8010 	.word	0xffff8010

08002808 <GetLongAddr>:
 * @note   Al escribir direcciones largas (LONG ADDRESS REGISTER) se comienza
 *         con el MSB en 1 indicando una dirección larga, 10 bits con la
 *         dirección del registro, y 1 bit indicando la lectura o escritura. En
 *         los 4 bits restantes (LSB) no importa el valor.
 */
static uint8_t GetLongAddr(uint16_t reg_address) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]

	uint8_t respuesta;
	reg_address = (reg_address << SHIFT_LONG_ADDR) | READ_16_BITS;
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	015b      	lsls	r3, r3, #5
 8002816:	b21b      	sxth	r3, r3
 8002818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800281c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002820:	b21b      	sxth	r3, r3
 8002822:	80fb      	strh	r3, [r7, #6]
	SetCSPin(DISABLE);
 8002824:	2000      	movs	r0, #0
 8002826:	f000 f9f5 	bl	8002c14 <SetCSPin>
	Write2ByteSPIPort(reg_address);
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fa4b 	bl	8002cc8 <Write2ByteSPIPort>
	respuesta = ReadByteSPIPort();
 8002832:	f000 fa6b 	bl	8002d0c <ReadByteSPIPort>
 8002836:	4603      	mov	r3, r0
 8002838:	73fb      	strb	r3, [r7, #15]
	SetCSPin(ENABLE);
 800283a:	2001      	movs	r0, #1
 800283c:	f000 f9ea 	bl	8002c14 <SetCSPin>
	return respuesta;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <SetChannel>:
/**
 * @brief  Seteo en el módulo en canal guardado en mrf24_data_config
 * @param  None
 * @retval None
 */
static void SetChannel(void) {
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0

	SetLongAddr(RFCON0, data_config_s.my_channel);
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <SetChannel+0x2c>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800285a:	f7ff ffb1 	bl	80027c0 <SetLongAddr>
	SetShortAddr(RFCTL, RFRST_HOLD);
 800285e:	2104      	movs	r1, #4
 8002860:	2036      	movs	r0, #54	@ 0x36
 8002862:	f7ff ff6c 	bl	800273e <SetShortAddr>
	SetShortAddr(RFCTL, VACIO);
 8002866:	2100      	movs	r1, #0
 8002868:	2036      	movs	r0, #54	@ 0x36
 800286a:	f7ff ff68 	bl	800273e <SetShortAddr>
	delay_t(WAIT_1_MS);
 800286e:	2001      	movs	r0, #1
 8002870:	f7fe fa5a 	bl	8000d28 <HAL_Delay>
	return;
 8002874:	bf00      	nop
}
 8002876:	bd80      	pop	{r7, pc}
 8002878:	2000014c 	.word	0x2000014c

0800287c <SetDeviceAddress>:
/**
 * @brief  Seteo en el módulo la dirección corta guardada en mrf24_data_config
 * @param  None
 * @retval None
 */
static void SetDeviceAddress(void) {
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0

	SetShortAddr(SADRH, (uint8_t) (data_config_s.my_address >> SHIFT_BYTE));
 8002880:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <SetDeviceAddress+0x48>)
 8002882:	889b      	ldrh	r3, [r3, #4]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	b29b      	uxth	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4619      	mov	r1, r3
 800288c:	2004      	movs	r0, #4
 800288e:	f7ff ff56 	bl	800273e <SetShortAddr>
	SetShortAddr(SADRL, (uint8_t) (data_config_s.my_address));
 8002892:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <SetDeviceAddress+0x48>)
 8002894:	889b      	ldrh	r3, [r3, #4]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	4619      	mov	r1, r3
 800289a:	2003      	movs	r0, #3
 800289c:	f7ff ff4f 	bl	800273e <SetShortAddr>
	SetShortAddr(PANIDH, (uint8_t) (data_config_s.my_panid >> SHIFT_BYTE));
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <SetDeviceAddress+0x48>)
 80028a2:	885b      	ldrh	r3, [r3, #2]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	4619      	mov	r1, r3
 80028ac:	2002      	movs	r0, #2
 80028ae:	f7ff ff46 	bl	800273e <SetShortAddr>
	SetShortAddr(PANIDL, (uint8_t) (data_config_s.my_panid));
 80028b2:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <SetDeviceAddress+0x48>)
 80028b4:	885b      	ldrh	r3, [r3, #2]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7ff ff3f 	bl	800273e <SetShortAddr>
	return;
 80028c0:	bf00      	nop
}
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	2000014c 	.word	0x2000014c

080028c8 <SetDeviceMACAddress>:
/**
 * @brief  Seteo en el módulo la dirección mac guardada en mrf24_data_config.
 * @param  None.
 * @retval None.
 */
static void SetDeviceMACAddress(void) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < LARGE_MAC_SIZE; i++) {
 80028ce:	2300      	movs	r3, #0
 80028d0:	71fb      	strb	r3, [r7, #7]
 80028d2:	e00d      	b.n	80028f0 <SetDeviceMACAddress+0x28>

		SetShortAddr(EADR0 + i, data_config_s.my_mac[i]);
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	3305      	adds	r3, #5
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	4908      	ldr	r1, [pc, #32]	@ (8002900 <SetDeviceMACAddress+0x38>)
 80028de:	440b      	add	r3, r1
 80028e0:	7a5b      	ldrb	r3, [r3, #9]
 80028e2:	4619      	mov	r1, r3
 80028e4:	4610      	mov	r0, r2
 80028e6:	f7ff ff2a 	bl	800273e <SetShortAddr>
	for(uint8_t i = 0; i < LARGE_MAC_SIZE; i++) {
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	3301      	adds	r3, #1
 80028ee:	71fb      	strb	r3, [r7, #7]
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	2b07      	cmp	r3, #7
 80028f4:	d9ee      	bls.n	80028d4 <SetDeviceMACAddress+0xc>
	}
	return;
 80028f6:	bf00      	nop
}
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000014c 	.word	0x2000014c

08002904 <MRF24J40Init>:
/**
 * @brief  Inicialización del módulo MRF24J40MA.
 * @param  None.
 * @retval Estado de la operación (TIME_OUT_OCURRIDO, INICIALIZACION_OK).
 */
mrf24_state_t MRF24J40Init(void) {
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0

	InicializoVariables();
 8002908:	f7ff fe56 	bl	80025b8 <InicializoVariables>
	InicializoPines();
 800290c:	f000 f974 	bl	8002bf8 <InicializoPines>
	delay_t(WAIT_1_MS);
 8002910:	2001      	movs	r0, #1
 8002912:	f7fe fa09 	bl	8000d28 <HAL_Delay>
	SetResetPin(1);
 8002916:	2001      	movs	r0, #1
 8002918:	f000 f9a0 	bl	8002c5c <SetResetPin>
	delay_t(WAIT_1_MS);
 800291c:	2001      	movs	r0, #1
 800291e:	f7fe fa03 	bl	8000d28 <HAL_Delay>
	estadoActual = InicializoMRF24();
 8002922:	f7ff fe79 	bl	8002618 <InicializoMRF24>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	4b03      	ldr	r3, [pc, #12]	@ (8002938 <MRF24J40Init+0x34>)
 800292c:	701a      	strb	r2, [r3, #0]
	return estadoActual;
 800292e:	4b02      	ldr	r3, [pc, #8]	@ (8002938 <MRF24J40Init+0x34>)
 8002930:	781b      	ldrb	r3, [r3, #0]
}
 8002932:	4618      	mov	r0, r3
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000148 	.word	0x20000148

0800293c <MRF24GetConfig>:
 * @brief   Devuelvo el puntero a la estructura que contiene la información de
 * 			configuración del módulo MRF24J40.
 * @param   None.
 * @retval  Puntero a la estructura tipo mrf24_data_config_t.
 */
mrf24_data_config_t * MRF24GetConfig(void) {
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

	return &data_config_s;
 8002940:	4b02      	ldr	r3, [pc, #8]	@ (800294c <MRF24GetConfig+0x10>)
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	2000014c 	.word	0x2000014c

08002950 <MRF24TransmitirDato>:
 * @brief   Envío la información almacenada en la estructura de salida.
 * @param   None.
 * @retval  Estado de la operación (OPERACION_NO_REALIZADA,
 * 			TRANSMISION_REALIZADA, NO_DIRECCION, MSG_NO_PRESENTE).
 */
mrf24_state_t MRF24TransmitirDato(mrf24_data_out_t * p_info_out_s) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

	if(INITIALIZATION_OK != estadoActual)
 8002958:	4b67      	ldr	r3, [pc, #412]	@ (8002af8 <MRF24TransmitirDato+0x1a8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d001      	beq.n	8002964 <MRF24TransmitirDato+0x14>
		return OPERATION_FAIL;
 8002960:	2309      	movs	r3, #9
 8002962:	e0c4      	b.n	8002aee <MRF24TransmitirDato+0x19e>

	if(VACIO == p_info_out_s->dest_address)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	885b      	ldrh	r3, [r3, #2]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <MRF24TransmitirDato+0x20>
		return DIRECTION_EMPTY;
 800296c:	2303      	movs	r3, #3
 800296e:	e0be      	b.n	8002aee <MRF24TransmitirDato+0x19e>

	if(VACIO == p_info_out_s->buffer_size)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <MRF24TransmitirDato+0x2e>
		return BUFFER_EMPTY;
 800297a:	2307      	movs	r3, #7
 800297c:	e0b7      	b.n	8002aee <MRF24TransmitirDato+0x19e>

	if(BUFFER_SIZE < p_info_out_s->buffer_size)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002984:	2b40      	cmp	r3, #64	@ 0x40
 8002986:	d901      	bls.n	800298c <MRF24TransmitirDato+0x3c>
		return TO_LONG_MSG;
 8002988:	2306      	movs	r3, #6
 800298a:	e0b0      	b.n	8002aee <MRF24TransmitirDato+0x19e>
	uint8_t pos_mem = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
	SetLongAddr(pos_mem++, HEAD_LENGTH);
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	73fa      	strb	r2, [r7, #15]
 8002996:	210b      	movs	r1, #11
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff11 	bl	80027c0 <SetLongAddr>
	SetLongAddr(pos_mem++, p_info_out_s->buffer_size + HEAD_LENGTH);
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	73fa      	strb	r2, [r7, #15]
 80029a4:	461a      	mov	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80029ac:	330b      	adds	r3, #11
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f7ff ff04 	bl	80027c0 <SetLongAddr>
	SetLongAddr(pos_mem++, DATA | ACK_REQ | INTRA_PAN);			// LSB.
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	73fa      	strb	r2, [r7, #15]
 80029be:	2161      	movs	r1, #97	@ 0x61
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fefd 	bl	80027c0 <SetLongAddr>
	SetLongAddr(pos_mem++, SHORT_S_ADD | SHORT_D_ADD);			// MSB.
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	73fa      	strb	r2, [r7, #15]
 80029cc:	2188      	movs	r1, #136	@ 0x88
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fef6 	bl	80027c0 <SetLongAddr>
	SetLongAddr(pos_mem++, data_config_s.sequence_number++);
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	73fa      	strb	r2, [r7, #15]
 80029da:	4618      	mov	r0, r3
 80029dc:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <MRF24TransmitirDato+0x1ac>)
 80029de:	7a1b      	ldrb	r3, [r3, #8]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	b2d1      	uxtb	r1, r2
 80029e4:	4a45      	ldr	r2, [pc, #276]	@ (8002afc <MRF24TransmitirDato+0x1ac>)
 80029e6:	7211      	strb	r1, [r2, #8]
 80029e8:	4619      	mov	r1, r3
 80029ea:	f7ff fee9 	bl	80027c0 <SetLongAddr>

	if(VACIO == p_info_out_s->dest_panid)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d103      	bne.n	80029fe <MRF24TransmitirDato+0xae>
		p_info_out_s->dest_panid = data_config_s.my_panid;
 80029f6:	4b41      	ldr	r3, [pc, #260]	@ (8002afc <MRF24TransmitirDato+0x1ac>)
 80029f8:	885a      	ldrh	r2, [r3, #2]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	801a      	strh	r2, [r3, #0]
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_panid);
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	73fa      	strb	r2, [r7, #15]
 8002a04:	461a      	mov	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f7ff fed6 	bl	80027c0 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_panid >> SHIFT_BYTE));
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	73fa      	strb	r2, [r7, #15]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f7ff fec9 	bl	80027c0 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_address);
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	73fa      	strb	r2, [r7, #15]
 8002a34:	461a      	mov	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	885b      	ldrh	r3, [r3, #2]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f7ff febe 	bl	80027c0 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_address >> SHIFT_BYTE));
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	73fa      	strb	r2, [r7, #15]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	885b      	ldrh	r3, [r3, #2]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f7ff feb1 	bl	80027c0 <SetLongAddr>

	if(VACIO == p_info_out_s->origin_address)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	889b      	ldrh	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <MRF24TransmitirDato+0x11e>
		p_info_out_s->origin_address = data_config_s.my_address;
 8002a66:	4b25      	ldr	r3, [pc, #148]	@ (8002afc <MRF24TransmitirDato+0x1ac>)
 8002a68:	889a      	ldrh	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	809a      	strh	r2, [r3, #4]
	SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->origin_address);
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	73fa      	strb	r2, [r7, #15]
 8002a74:	461a      	mov	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	889b      	ldrh	r3, [r3, #4]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	f7ff fe9e 	bl	80027c0 <SetLongAddr>
	SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->origin_address >> SHIFT_BYTE));
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	73fa      	strb	r2, [r7, #15]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	889b      	ldrh	r3, [r3, #4]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4619      	mov	r1, r3
 8002a98:	4610      	mov	r0, r2
 8002a9a:	f7ff fe91 	bl	80027c0 <SetLongAddr>

	for(int8_t i = 0; i < p_info_out_s->buffer_size; i++) {
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73bb      	strb	r3, [r7, #14]
 8002aa2:	e011      	b.n	8002ac8 <MRF24TransmitirDato+0x178>

		SetLongAddr(pos_mem++, p_info_out_s->buffer[i]);
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	73fa      	strb	r2, [r7, #15]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	799b      	ldrb	r3, [r3, #6]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7ff fe82 	bl	80027c0 <SetLongAddr>
	for(int8_t i = 0; i < p_info_out_s->buffer_size; i++) {
 8002abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	73bb      	strb	r3, [r7, #14]
 8002ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	f892 2046 	ldrb.w	r2, [r2, #70]	@ 0x46
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	dbe6      	blt.n	8002aa4 <MRF24TransmitirDato+0x154>
	}
	SetLongAddr(pos_mem++, VACIO);
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	73fa      	strb	r2, [r7, #15]
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fe6e 	bl	80027c0 <SetLongAddr>
	SetShortAddr(TXNCON, TXNACKREQ | TXNTRIG);
 8002ae4:	2105      	movs	r1, #5
 8002ae6:	201b      	movs	r0, #27
 8002ae8:	f7ff fe29 	bl	800273e <SetShortAddr>
	return TRANSMISSION_COMPLETED;
 8002aec:	2302      	movs	r3, #2
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000148 	.word	0x20000148
 8002afc:	2000014c 	.word	0x2000014c

08002b00 <MRF24IsNewMsg>:
 * @brief   Se levantó la bandera indicando la llegada de un mensaje.
 * @param   None.
 * @retval  Estado de la operación (ERROR_INESPERADO, MSG_PRESENTE,
 *          MSG_NO_PRESENTE).
 */
volatile mrf24_state_t MRF24IsNewMsg(void) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0

	if(INITIALIZATION_OK != estadoActual)
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <MRF24IsNewMsg+0x2c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d001      	beq.n	8002b10 <MRF24IsNewMsg+0x10>
		return UNEXPECTED_ERROR;
 8002b0c:	230b      	movs	r3, #11
 8002b0e:	e00a      	b.n	8002b26 <MRF24IsNewMsg+0x26>

	if(!IsMRF24Interrup())
 8002b10:	f000 f8b6 	bl	8002c80 <IsMRF24Interrup>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MRF24IsNewMsg+0x24>
		return MSG_PRESENT;
 8002b20:	2304      	movs	r3, #4
 8002b22:	e000      	b.n	8002b26 <MRF24IsNewMsg+0x26>
	return BUFFER_EMPTY;
 8002b24:	2307      	movs	r3, #7
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000148 	.word	0x20000148

08002b30 <MRF24ReciboPaquete>:
 * @brief   Recibir un paquete y dejarlo en el bufer de entrada en
 *          la estructura data_in_s.
 * @param   None.
 * @retval  Estado de la operación (OPERACION_NO_REALIZADA, MSG_LEIDO).
 */
mrf24_state_t MRF24ReciboPaquete(void) {
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
	/*
	 * agregar la lectura del rssi y del lq, vienen en el paquete del mensaje.
	 */


	if(INITIALIZATION_OK != estadoActual)
 8002b36:	4b29      	ldr	r3, [pc, #164]	@ (8002bdc <MRF24ReciboPaquete+0xac>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <MRF24ReciboPaquete+0x12>
		return OPERATION_FAIL;
 8002b3e:	2309      	movs	r3, #9
 8002b40:	e048      	b.n	8002bd4 <MRF24ReciboPaquete+0xa4>
	SetLongAddr(BBREG1, RXDECINV);
 8002b42:	2104      	movs	r1, #4
 8002b44:	2039      	movs	r0, #57	@ 0x39
 8002b46:	f7ff fe3b 	bl	80027c0 <SetLongAddr>
	SetShortAddr(RXFLUSH, DATAONLY);
 8002b4a:	2104      	movs	r1, #4
 8002b4c:	200d      	movs	r0, #13
 8002b4e:	f7ff fdf6 	bl	800273e <SetShortAddr>
	data_in_s.buffer_size = GetLongAddr(RX_FIFO);
 8002b52:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8002b56:	f7ff fe57 	bl	8002808 <GetLongAddr>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b20      	ldr	r3, [pc, #128]	@ (8002be0 <MRF24ReciboPaquete+0xb0>)
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	uint16_t add = GetLongAddr(RX_FIFO + 9);
 8002b64:	f240 3009 	movw	r0, #777	@ 0x309
 8002b68:	f7ff fe4e 	bl	8002808 <GetLongAddr>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	80bb      	strh	r3, [r7, #4]
	add = (add << SHIFT_BYTE) | GetLongAddr(RX_FIFO + 8);
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	b21c      	sxth	r4, r3
 8002b76:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8002b7a:	f7ff fe45 	bl	8002808 <GetLongAddr>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	b21b      	sxth	r3, r3
 8002b82:	4323      	orrs	r3, r4
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	80bb      	strh	r3, [r7, #4]
	data_in_s.source_address = add;
 8002b88:	4a15      	ldr	r2, [pc, #84]	@ (8002be0 <MRF24ReciboPaquete+0xb0>)
 8002b8a:	88bb      	ldrh	r3, [r7, #4]
 8002b8c:	8053      	strh	r3, [r2, #2]

	for(uint8_t i = 0; i < data_in_s.buffer_size - FCS_LQI_RSSI; i++) {
 8002b8e:	2300      	movs	r3, #0
 8002b90:	71fb      	strb	r3, [r7, #7]
 8002b92:	e010      	b.n	8002bb6 <MRF24ReciboPaquete+0x86>

		data_in_s.buffer[i] = GetLongAddr(RX_FIFO + HEAD_LENGTH + i - 1);
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f203 330a 	addw	r3, r3, #778	@ 0x30a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	79fc      	ldrb	r4, [r7, #7]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe31 	bl	8002808 <GetLongAddr>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <MRF24ReciboPaquete+0xb0>)
 8002bac:	4423      	add	r3, r4
 8002bae:	715a      	strb	r2, [r3, #5]
	for(uint8_t i = 0; i < data_in_s.buffer_size - FCS_LQI_RSSI; i++) {
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	71fb      	strb	r3, [r7, #7]
 8002bb6:	79fa      	ldrb	r2, [r7, #7]
 8002bb8:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <MRF24ReciboPaquete+0xb0>)
 8002bba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	dbe7      	blt.n	8002b94 <MRF24ReciboPaquete+0x64>
	}
	SetLongAddr(BBREG1, VACIO);
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2039      	movs	r0, #57	@ 0x39
 8002bc8:	f7ff fdfa 	bl	80027c0 <SetLongAddr>
	(void)GetShortAddr(INTSTAT);
 8002bcc:	2031      	movs	r0, #49	@ 0x31
 8002bce:	f7ff fdd6 	bl	800277e <GetShortAddr>
	return MSG_READ;
 8002bd2:	2305      	movs	r3, #5
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd90      	pop	{r4, r7, pc}
 8002bdc:	20000148 	.word	0x20000148
 8002be0:	20000170 	.word	0x20000170

08002be4 <MRF24GetDataIn>:
 * @brief   Devuelvo el puntero a la estructura que contiene la información del
 * 			mensaje de entrada.
 * @param   None.
 * @retval  Puntero a la estructura tipo mrf24_data_in_t.
 */
mrf24_data_in_t * MRF24GetDataIn(void) {
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

	return &data_in_s;
 8002be8:	4b02      	ldr	r3, [pc, #8]	@ (8002bf4 <MRF24GetDataIn+0x10>)
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000170 	.word	0x20000170

08002bf8 <InicializoPines>:
/**
 * @brief  Inicialización del hardware relacionado con el módulo
 * @param  None
 * @retval None
 */
void InicializoPines(void){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0

    SetCSPin(1);
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	f000 f809 	bl	8002c14 <SetCSPin>
    SetWakePin(1);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f000 f818 	bl	8002c38 <SetWakePin>
    SetResetPin(0);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f000 f827 	bl	8002c5c <SetResetPin>
    return;
 8002c0e:	bf00      	nop
}
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <SetCSPin>:
/**
 * @brief  Escribo en el pin destinado a CS
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetCSPin(bool_t estado){
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_CS_GPIO_Port, MRF24_CS_Pin, estado);
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	461a      	mov	r2, r3
 8002c22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c26:	4803      	ldr	r0, [pc, #12]	@ (8002c34 <SetCSPin+0x20>)
 8002c28:	f7fe fb21 	bl	800126e <HAL_GPIO_WritePin>
    return;
 8002c2c:	bf00      	nop
}
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40010800 	.word	0x40010800

08002c38 <SetWakePin>:
/**
 * @brief  Escribo en el pin destinado a Wake
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetWakePin(bool_t estado){
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_WAKE_GPIO_Port, MRF24_WAKE_Pin, estado);
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	461a      	mov	r2, r3
 8002c46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c4a:	4803      	ldr	r0, [pc, #12]	@ (8002c58 <SetWakePin+0x20>)
 8002c4c:	f7fe fb0f 	bl	800126e <HAL_GPIO_WritePin>
    return;
 8002c50:	bf00      	nop
}
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40010800 	.word	0x40010800

08002c5c <SetResetPin>:
/**
 * @brief  Escribo en el pin destinado a Reset
 * @param  Estado de salida - booleano
 * @retval None
 */
void SetResetPin(bool_t estado){
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]

 	HAL_GPIO_WritePin(MRF24_RESET_GPIO_Port, MRF24_RESET_Pin, estado);
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c6e:	4803      	ldr	r0, [pc, #12]	@ (8002c7c <SetResetPin+0x20>)
 8002c70:	f7fe fafd 	bl	800126e <HAL_GPIO_WritePin>
    return;
 8002c74:	bf00      	nop
}
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40010800 	.word	0x40010800

08002c80 <IsMRF24Interrup>:

/**
 * @brief  Devuelvo el estado del pin interrup del módulo
 * @retval Booleano
 */
volatile bool_t IsMRF24Interrup(void) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0

	return HAL_GPIO_ReadPin(MRF24_INTERRUP_GPIO_Port, MRF24_INTERRUP_Pin);
 8002c84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c88:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <IsMRF24Interrup+0x20>)
 8002c8a:	f7fe fad9 	bl	8001240 <HAL_GPIO_ReadPin>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40010800 	.word	0x40010800

08002ca4 <WriteByteSPIPort>:
/**
 * @brief  Escribo en el puerto SPI
 * @param  Dato - 1 byte
 * @retval None
 */
void WriteByteSPIPort(uint8_t dato){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &dato, _1_BYTE, TIME_OUT_SPI);
 8002cae:	1df9      	adds	r1, r7, #7
 8002cb0:	2364      	movs	r3, #100	@ 0x64
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4803      	ldr	r0, [pc, #12]	@ (8002cc4 <WriteByteSPIPort+0x20>)
 8002cb6:	f7fe ff6d 	bl	8001b94 <HAL_SPI_Transmit>
    return;
 8002cba:	bf00      	nop
}
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200000e8 	.word	0x200000e8

08002cc8 <Write2ByteSPIPort>:
/**
 * @brief  Escribo en el puerto SPI
 * @param  Dato - 1 byte
 * @retval None
 */
void Write2ByteSPIPort(uint16_t dato){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	80fb      	strh	r3, [r7, #6]

	uint8_t dato_partido = (uint8_t) (dato >> SHIFT_BYTE);
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &dato_partido, _1_BYTE, TIME_OUT_SPI);
 8002cdc:	f107 010f 	add.w	r1, r7, #15
 8002ce0:	2364      	movs	r3, #100	@ 0x64
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4808      	ldr	r0, [pc, #32]	@ (8002d08 <Write2ByteSPIPort+0x40>)
 8002ce6:	f7fe ff55 	bl	8001b94 <HAL_SPI_Transmit>
	dato_partido = (uint8_t) dato;
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &dato_partido, _1_BYTE, TIME_OUT_SPI);
 8002cf0:	f107 010f 	add.w	r1, r7, #15
 8002cf4:	2364      	movs	r3, #100	@ 0x64
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4803      	ldr	r0, [pc, #12]	@ (8002d08 <Write2ByteSPIPort+0x40>)
 8002cfa:	f7fe ff4b 	bl	8001b94 <HAL_SPI_Transmit>
    return;
 8002cfe:	bf00      	nop
}
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200000e8 	.word	0x200000e8

08002d0c <ReadByteSPIPort>:
/**
 * @brief  Leo en el puerto SPI
 * @param  None
 * @retval Dato - 1 byte
 */
uint8_t ReadByteSPIPort(void){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0

	uint8_t dato = 0x01;
 8002d12:	2301      	movs	r3, #1
 8002d14:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &dato, _1_BYTE, TIME_OUT_SPI);
 8002d16:	1df9      	adds	r1, r7, #7
 8002d18:	2364      	movs	r3, #100	@ 0x64
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4803      	ldr	r0, [pc, #12]	@ (8002d2c <ReadByteSPIPort+0x20>)
 8002d1e:	f7ff f87d 	bl	8001e1c <HAL_SPI_Receive>
	return dato;
 8002d22:	79fb      	ldrb	r3, [r7, #7]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200000e8 	.word	0x200000e8

08002d30 <std>:
 8002d30:	2300      	movs	r3, #0
 8002d32:	b510      	push	{r4, lr}
 8002d34:	4604      	mov	r4, r0
 8002d36:	e9c0 3300 	strd	r3, r3, [r0]
 8002d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d3e:	6083      	str	r3, [r0, #8]
 8002d40:	8181      	strh	r1, [r0, #12]
 8002d42:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d44:	81c2      	strh	r2, [r0, #14]
 8002d46:	6183      	str	r3, [r0, #24]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	305c      	adds	r0, #92	@ 0x5c
 8002d4e:	f000 f8f4 	bl	8002f3a <memset>
 8002d52:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <std+0x58>)
 8002d54:	6224      	str	r4, [r4, #32]
 8002d56:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d58:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <std+0x5c>)
 8002d5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <std+0x60>)
 8002d5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d60:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <std+0x64>)
 8002d62:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d64:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <std+0x68>)
 8002d66:	429c      	cmp	r4, r3
 8002d68:	d006      	beq.n	8002d78 <std+0x48>
 8002d6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d6e:	4294      	cmp	r4, r2
 8002d70:	d002      	beq.n	8002d78 <std+0x48>
 8002d72:	33d0      	adds	r3, #208	@ 0xd0
 8002d74:	429c      	cmp	r4, r3
 8002d76:	d105      	bne.n	8002d84 <std+0x54>
 8002d78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d80:	f000 b9c2 	b.w	8003108 <__retarget_lock_init_recursive>
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	bf00      	nop
 8002d88:	08002eb5 	.word	0x08002eb5
 8002d8c:	08002ed7 	.word	0x08002ed7
 8002d90:	08002f0f 	.word	0x08002f0f
 8002d94:	08002f33 	.word	0x08002f33
 8002d98:	200001b8 	.word	0x200001b8

08002d9c <stdio_exit_handler>:
 8002d9c:	4a02      	ldr	r2, [pc, #8]	@ (8002da8 <stdio_exit_handler+0xc>)
 8002d9e:	4903      	ldr	r1, [pc, #12]	@ (8002dac <stdio_exit_handler+0x10>)
 8002da0:	4803      	ldr	r0, [pc, #12]	@ (8002db0 <stdio_exit_handler+0x14>)
 8002da2:	f000 b869 	b.w	8002e78 <_fwalk_sglue>
 8002da6:	bf00      	nop
 8002da8:	20000024 	.word	0x20000024
 8002dac:	08003465 	.word	0x08003465
 8002db0:	20000034 	.word	0x20000034

08002db4 <cleanup_stdio>:
 8002db4:	6841      	ldr	r1, [r0, #4]
 8002db6:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <cleanup_stdio+0x34>)
 8002db8:	b510      	push	{r4, lr}
 8002dba:	4299      	cmp	r1, r3
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	d001      	beq.n	8002dc4 <cleanup_stdio+0x10>
 8002dc0:	f000 fb50 	bl	8003464 <_fflush_r>
 8002dc4:	68a1      	ldr	r1, [r4, #8]
 8002dc6:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <cleanup_stdio+0x38>)
 8002dc8:	4299      	cmp	r1, r3
 8002dca:	d002      	beq.n	8002dd2 <cleanup_stdio+0x1e>
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f000 fb49 	bl	8003464 <_fflush_r>
 8002dd2:	68e1      	ldr	r1, [r4, #12]
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <cleanup_stdio+0x3c>)
 8002dd6:	4299      	cmp	r1, r3
 8002dd8:	d004      	beq.n	8002de4 <cleanup_stdio+0x30>
 8002dda:	4620      	mov	r0, r4
 8002ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de0:	f000 bb40 	b.w	8003464 <_fflush_r>
 8002de4:	bd10      	pop	{r4, pc}
 8002de6:	bf00      	nop
 8002de8:	200001b8 	.word	0x200001b8
 8002dec:	20000220 	.word	0x20000220
 8002df0:	20000288 	.word	0x20000288

08002df4 <global_stdio_init.part.0>:
 8002df4:	b510      	push	{r4, lr}
 8002df6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <global_stdio_init.part.0+0x30>)
 8002df8:	4c0b      	ldr	r4, [pc, #44]	@ (8002e28 <global_stdio_init.part.0+0x34>)
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8002e2c <global_stdio_init.part.0+0x38>)
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	2104      	movs	r1, #4
 8002e02:	2200      	movs	r2, #0
 8002e04:	f7ff ff94 	bl	8002d30 <std>
 8002e08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	2109      	movs	r1, #9
 8002e10:	f7ff ff8e 	bl	8002d30 <std>
 8002e14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e18:	2202      	movs	r2, #2
 8002e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e1e:	2112      	movs	r1, #18
 8002e20:	f7ff bf86 	b.w	8002d30 <std>
 8002e24:	200002f0 	.word	0x200002f0
 8002e28:	200001b8 	.word	0x200001b8
 8002e2c:	08002d9d 	.word	0x08002d9d

08002e30 <__sfp_lock_acquire>:
 8002e30:	4801      	ldr	r0, [pc, #4]	@ (8002e38 <__sfp_lock_acquire+0x8>)
 8002e32:	f000 b96a 	b.w	800310a <__retarget_lock_acquire_recursive>
 8002e36:	bf00      	nop
 8002e38:	200002f9 	.word	0x200002f9

08002e3c <__sfp_lock_release>:
 8002e3c:	4801      	ldr	r0, [pc, #4]	@ (8002e44 <__sfp_lock_release+0x8>)
 8002e3e:	f000 b965 	b.w	800310c <__retarget_lock_release_recursive>
 8002e42:	bf00      	nop
 8002e44:	200002f9 	.word	0x200002f9

08002e48 <__sinit>:
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	f7ff fff0 	bl	8002e30 <__sfp_lock_acquire>
 8002e50:	6a23      	ldr	r3, [r4, #32]
 8002e52:	b11b      	cbz	r3, 8002e5c <__sinit+0x14>
 8002e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e58:	f7ff bff0 	b.w	8002e3c <__sfp_lock_release>
 8002e5c:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <__sinit+0x28>)
 8002e5e:	6223      	str	r3, [r4, #32]
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <__sinit+0x2c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f5      	bne.n	8002e54 <__sinit+0xc>
 8002e68:	f7ff ffc4 	bl	8002df4 <global_stdio_init.part.0>
 8002e6c:	e7f2      	b.n	8002e54 <__sinit+0xc>
 8002e6e:	bf00      	nop
 8002e70:	08002db5 	.word	0x08002db5
 8002e74:	200002f0 	.word	0x200002f0

08002e78 <_fwalk_sglue>:
 8002e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e7c:	4607      	mov	r7, r0
 8002e7e:	4688      	mov	r8, r1
 8002e80:	4614      	mov	r4, r2
 8002e82:	2600      	movs	r6, #0
 8002e84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e88:	f1b9 0901 	subs.w	r9, r9, #1
 8002e8c:	d505      	bpl.n	8002e9a <_fwalk_sglue+0x22>
 8002e8e:	6824      	ldr	r4, [r4, #0]
 8002e90:	2c00      	cmp	r4, #0
 8002e92:	d1f7      	bne.n	8002e84 <_fwalk_sglue+0xc>
 8002e94:	4630      	mov	r0, r6
 8002e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e9a:	89ab      	ldrh	r3, [r5, #12]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d907      	bls.n	8002eb0 <_fwalk_sglue+0x38>
 8002ea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	d003      	beq.n	8002eb0 <_fwalk_sglue+0x38>
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	4638      	mov	r0, r7
 8002eac:	47c0      	blx	r8
 8002eae:	4306      	orrs	r6, r0
 8002eb0:	3568      	adds	r5, #104	@ 0x68
 8002eb2:	e7e9      	b.n	8002e88 <_fwalk_sglue+0x10>

08002eb4 <__sread>:
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ebc:	f000 f8d6 	bl	800306c <_read_r>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	bfab      	itete	ge
 8002ec4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8002ec8:	181b      	addge	r3, r3, r0
 8002eca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ece:	bfac      	ite	ge
 8002ed0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ed2:	81a3      	strhlt	r3, [r4, #12]
 8002ed4:	bd10      	pop	{r4, pc}

08002ed6 <__swrite>:
 8002ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eda:	461f      	mov	r7, r3
 8002edc:	898b      	ldrh	r3, [r1, #12]
 8002ede:	4605      	mov	r5, r0
 8002ee0:	05db      	lsls	r3, r3, #23
 8002ee2:	460c      	mov	r4, r1
 8002ee4:	4616      	mov	r6, r2
 8002ee6:	d505      	bpl.n	8002ef4 <__swrite+0x1e>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	2200      	movs	r2, #0
 8002eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ef0:	f000 f8aa 	bl	8003048 <_lseek_r>
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	4632      	mov	r2, r6
 8002ef8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002efc:	81a3      	strh	r3, [r4, #12]
 8002efe:	4628      	mov	r0, r5
 8002f00:	463b      	mov	r3, r7
 8002f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0a:	f000 b8c1 	b.w	8003090 <_write_r>

08002f0e <__sseek>:
 8002f0e:	b510      	push	{r4, lr}
 8002f10:	460c      	mov	r4, r1
 8002f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f16:	f000 f897 	bl	8003048 <_lseek_r>
 8002f1a:	1c43      	adds	r3, r0, #1
 8002f1c:	89a3      	ldrh	r3, [r4, #12]
 8002f1e:	bf15      	itete	ne
 8002f20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f2a:	81a3      	strheq	r3, [r4, #12]
 8002f2c:	bf18      	it	ne
 8002f2e:	81a3      	strhne	r3, [r4, #12]
 8002f30:	bd10      	pop	{r4, pc}

08002f32 <__sclose>:
 8002f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f36:	f000 b877 	b.w	8003028 <_close_r>

08002f3a <memset>:
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4402      	add	r2, r0
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d100      	bne.n	8002f44 <memset+0xa>
 8002f42:	4770      	bx	lr
 8002f44:	f803 1b01 	strb.w	r1, [r3], #1
 8002f48:	e7f9      	b.n	8002f3e <memset+0x4>

08002f4a <strncpy>:
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	3901      	subs	r1, #1
 8002f50:	b132      	cbz	r2, 8002f60 <strncpy+0x16>
 8002f52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002f56:	3a01      	subs	r2, #1
 8002f58:	f803 4b01 	strb.w	r4, [r3], #1
 8002f5c:	2c00      	cmp	r4, #0
 8002f5e:	d1f7      	bne.n	8002f50 <strncpy+0x6>
 8002f60:	2100      	movs	r1, #0
 8002f62:	441a      	add	r2, r3
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d100      	bne.n	8002f6a <strncpy+0x20>
 8002f68:	bd10      	pop	{r4, pc}
 8002f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f6e:	e7f9      	b.n	8002f64 <strncpy+0x1a>

08002f70 <strtok>:
 8002f70:	4b16      	ldr	r3, [pc, #88]	@ (8002fcc <strtok+0x5c>)
 8002f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f76:	681f      	ldr	r7, [r3, #0]
 8002f78:	4605      	mov	r5, r0
 8002f7a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8002f7c:	460e      	mov	r6, r1
 8002f7e:	b9ec      	cbnz	r4, 8002fbc <strtok+0x4c>
 8002f80:	2050      	movs	r0, #80	@ 0x50
 8002f82:	f000 f939 	bl	80031f8 <malloc>
 8002f86:	4602      	mov	r2, r0
 8002f88:	6478      	str	r0, [r7, #68]	@ 0x44
 8002f8a:	b920      	cbnz	r0, 8002f96 <strtok+0x26>
 8002f8c:	215b      	movs	r1, #91	@ 0x5b
 8002f8e:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <strtok+0x60>)
 8002f90:	4810      	ldr	r0, [pc, #64]	@ (8002fd4 <strtok+0x64>)
 8002f92:	f000 f8cb 	bl	800312c <__assert_func>
 8002f96:	e9c0 4400 	strd	r4, r4, [r0]
 8002f9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8002f9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002fa2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8002fa6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8002faa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8002fae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8002fb2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8002fb6:	6184      	str	r4, [r0, #24]
 8002fb8:	7704      	strb	r4, [r0, #28]
 8002fba:	6244      	str	r4, [r0, #36]	@ 0x24
 8002fbc:	4631      	mov	r1, r6
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc8:	f000 b806 	b.w	8002fd8 <__strtok_r>
 8002fcc:	20000030 	.word	0x20000030
 8002fd0:	08003dfc 	.word	0x08003dfc
 8002fd4:	08003e13 	.word	0x08003e13

08002fd8 <__strtok_r>:
 8002fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fda:	4604      	mov	r4, r0
 8002fdc:	b908      	cbnz	r0, 8002fe2 <__strtok_r+0xa>
 8002fde:	6814      	ldr	r4, [r2, #0]
 8002fe0:	b144      	cbz	r4, 8002ff4 <__strtok_r+0x1c>
 8002fe2:	460f      	mov	r7, r1
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002fea:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002fee:	b91e      	cbnz	r6, 8002ff8 <__strtok_r+0x20>
 8002ff0:	b965      	cbnz	r5, 800300c <__strtok_r+0x34>
 8002ff2:	6015      	str	r5, [r2, #0]
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	e005      	b.n	8003004 <__strtok_r+0x2c>
 8002ff8:	42b5      	cmp	r5, r6
 8002ffa:	d1f6      	bne.n	8002fea <__strtok_r+0x12>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <__strtok_r+0xa>
 8003000:	6014      	str	r4, [r2, #0]
 8003002:	7003      	strb	r3, [r0, #0]
 8003004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003006:	461c      	mov	r4, r3
 8003008:	e00c      	b.n	8003024 <__strtok_r+0x4c>
 800300a:	b915      	cbnz	r5, 8003012 <__strtok_r+0x3a>
 800300c:	460e      	mov	r6, r1
 800300e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003012:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003016:	42ab      	cmp	r3, r5
 8003018:	d1f7      	bne.n	800300a <__strtok_r+0x32>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f3      	beq.n	8003006 <__strtok_r+0x2e>
 800301e:	2300      	movs	r3, #0
 8003020:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003024:	6014      	str	r4, [r2, #0]
 8003026:	e7ed      	b.n	8003004 <__strtok_r+0x2c>

08003028 <_close_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	2300      	movs	r3, #0
 800302c:	4d05      	ldr	r5, [pc, #20]	@ (8003044 <_close_r+0x1c>)
 800302e:	4604      	mov	r4, r0
 8003030:	4608      	mov	r0, r1
 8003032:	602b      	str	r3, [r5, #0]
 8003034:	f7fd fd83 	bl	8000b3e <_close>
 8003038:	1c43      	adds	r3, r0, #1
 800303a:	d102      	bne.n	8003042 <_close_r+0x1a>
 800303c:	682b      	ldr	r3, [r5, #0]
 800303e:	b103      	cbz	r3, 8003042 <_close_r+0x1a>
 8003040:	6023      	str	r3, [r4, #0]
 8003042:	bd38      	pop	{r3, r4, r5, pc}
 8003044:	200002f4 	.word	0x200002f4

08003048 <_lseek_r>:
 8003048:	b538      	push	{r3, r4, r5, lr}
 800304a:	4604      	mov	r4, r0
 800304c:	4608      	mov	r0, r1
 800304e:	4611      	mov	r1, r2
 8003050:	2200      	movs	r2, #0
 8003052:	4d05      	ldr	r5, [pc, #20]	@ (8003068 <_lseek_r+0x20>)
 8003054:	602a      	str	r2, [r5, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	f7fd fd95 	bl	8000b86 <_lseek>
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	d102      	bne.n	8003066 <_lseek_r+0x1e>
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	b103      	cbz	r3, 8003066 <_lseek_r+0x1e>
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	200002f4 	.word	0x200002f4

0800306c <_read_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4604      	mov	r4, r0
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	2200      	movs	r2, #0
 8003076:	4d05      	ldr	r5, [pc, #20]	@ (800308c <_read_r+0x20>)
 8003078:	602a      	str	r2, [r5, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	f7fd fd26 	bl	8000acc <_read>
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d102      	bne.n	800308a <_read_r+0x1e>
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	b103      	cbz	r3, 800308a <_read_r+0x1e>
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	bd38      	pop	{r3, r4, r5, pc}
 800308c:	200002f4 	.word	0x200002f4

08003090 <_write_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4604      	mov	r4, r0
 8003094:	4608      	mov	r0, r1
 8003096:	4611      	mov	r1, r2
 8003098:	2200      	movs	r2, #0
 800309a:	4d05      	ldr	r5, [pc, #20]	@ (80030b0 <_write_r+0x20>)
 800309c:	602a      	str	r2, [r5, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	f7fd fd31 	bl	8000b06 <_write>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d102      	bne.n	80030ae <_write_r+0x1e>
 80030a8:	682b      	ldr	r3, [r5, #0]
 80030aa:	b103      	cbz	r3, 80030ae <_write_r+0x1e>
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	bd38      	pop	{r3, r4, r5, pc}
 80030b0:	200002f4 	.word	0x200002f4

080030b4 <__errno>:
 80030b4:	4b01      	ldr	r3, [pc, #4]	@ (80030bc <__errno+0x8>)
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000030 	.word	0x20000030

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	2600      	movs	r6, #0
 80030c4:	4d0c      	ldr	r5, [pc, #48]	@ (80030f8 <__libc_init_array+0x38>)
 80030c6:	4c0d      	ldr	r4, [pc, #52]	@ (80030fc <__libc_init_array+0x3c>)
 80030c8:	1b64      	subs	r4, r4, r5
 80030ca:	10a4      	asrs	r4, r4, #2
 80030cc:	42a6      	cmp	r6, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	f000 fe54 	bl	8003d7c <_init>
 80030d4:	2600      	movs	r6, #0
 80030d6:	4d0a      	ldr	r5, [pc, #40]	@ (8003100 <__libc_init_array+0x40>)
 80030d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003104 <__libc_init_array+0x44>)
 80030da:	1b64      	subs	r4, r4, r5
 80030dc:	10a4      	asrs	r4, r4, #2
 80030de:	42a6      	cmp	r6, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e8:	4798      	blx	r3
 80030ea:	3601      	adds	r6, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f2:	4798      	blx	r3
 80030f4:	3601      	adds	r6, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	08003ee4 	.word	0x08003ee4
 80030fc:	08003ee4 	.word	0x08003ee4
 8003100:	08003ee4 	.word	0x08003ee4
 8003104:	08003ee8 	.word	0x08003ee8

08003108 <__retarget_lock_init_recursive>:
 8003108:	4770      	bx	lr

0800310a <__retarget_lock_acquire_recursive>:
 800310a:	4770      	bx	lr

0800310c <__retarget_lock_release_recursive>:
 800310c:	4770      	bx	lr

0800310e <memcpy>:
 800310e:	440a      	add	r2, r1
 8003110:	4291      	cmp	r1, r2
 8003112:	f100 33ff 	add.w	r3, r0, #4294967295
 8003116:	d100      	bne.n	800311a <memcpy+0xc>
 8003118:	4770      	bx	lr
 800311a:	b510      	push	{r4, lr}
 800311c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003120:	4291      	cmp	r1, r2
 8003122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003126:	d1f9      	bne.n	800311c <memcpy+0xe>
 8003128:	bd10      	pop	{r4, pc}
	...

0800312c <__assert_func>:
 800312c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800312e:	4614      	mov	r4, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <__assert_func+0x2c>)
 8003134:	4605      	mov	r5, r0
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68d8      	ldr	r0, [r3, #12]
 800313a:	b954      	cbnz	r4, 8003152 <__assert_func+0x26>
 800313c:	4b07      	ldr	r3, [pc, #28]	@ (800315c <__assert_func+0x30>)
 800313e:	461c      	mov	r4, r3
 8003140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003144:	9100      	str	r1, [sp, #0]
 8003146:	462b      	mov	r3, r5
 8003148:	4905      	ldr	r1, [pc, #20]	@ (8003160 <__assert_func+0x34>)
 800314a:	f000 f9b3 	bl	80034b4 <fiprintf>
 800314e:	f000 f9d3 	bl	80034f8 <abort>
 8003152:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <__assert_func+0x38>)
 8003154:	e7f4      	b.n	8003140 <__assert_func+0x14>
 8003156:	bf00      	nop
 8003158:	20000030 	.word	0x20000030
 800315c:	08003ea8 	.word	0x08003ea8
 8003160:	08003e7a 	.word	0x08003e7a
 8003164:	08003e6d 	.word	0x08003e6d

08003168 <_free_r>:
 8003168:	b538      	push	{r3, r4, r5, lr}
 800316a:	4605      	mov	r5, r0
 800316c:	2900      	cmp	r1, #0
 800316e:	d040      	beq.n	80031f2 <_free_r+0x8a>
 8003170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003174:	1f0c      	subs	r4, r1, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	bfb8      	it	lt
 800317a:	18e4      	addlt	r4, r4, r3
 800317c:	f000 f8e6 	bl	800334c <__malloc_lock>
 8003180:	4a1c      	ldr	r2, [pc, #112]	@ (80031f4 <_free_r+0x8c>)
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	b933      	cbnz	r3, 8003194 <_free_r+0x2c>
 8003186:	6063      	str	r3, [r4, #4]
 8003188:	6014      	str	r4, [r2, #0]
 800318a:	4628      	mov	r0, r5
 800318c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003190:	f000 b8e2 	b.w	8003358 <__malloc_unlock>
 8003194:	42a3      	cmp	r3, r4
 8003196:	d908      	bls.n	80031aa <_free_r+0x42>
 8003198:	6820      	ldr	r0, [r4, #0]
 800319a:	1821      	adds	r1, r4, r0
 800319c:	428b      	cmp	r3, r1
 800319e:	bf01      	itttt	eq
 80031a0:	6819      	ldreq	r1, [r3, #0]
 80031a2:	685b      	ldreq	r3, [r3, #4]
 80031a4:	1809      	addeq	r1, r1, r0
 80031a6:	6021      	streq	r1, [r4, #0]
 80031a8:	e7ed      	b.n	8003186 <_free_r+0x1e>
 80031aa:	461a      	mov	r2, r3
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	b10b      	cbz	r3, 80031b4 <_free_r+0x4c>
 80031b0:	42a3      	cmp	r3, r4
 80031b2:	d9fa      	bls.n	80031aa <_free_r+0x42>
 80031b4:	6811      	ldr	r1, [r2, #0]
 80031b6:	1850      	adds	r0, r2, r1
 80031b8:	42a0      	cmp	r0, r4
 80031ba:	d10b      	bne.n	80031d4 <_free_r+0x6c>
 80031bc:	6820      	ldr	r0, [r4, #0]
 80031be:	4401      	add	r1, r0
 80031c0:	1850      	adds	r0, r2, r1
 80031c2:	4283      	cmp	r3, r0
 80031c4:	6011      	str	r1, [r2, #0]
 80031c6:	d1e0      	bne.n	800318a <_free_r+0x22>
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4408      	add	r0, r1
 80031ce:	6010      	str	r0, [r2, #0]
 80031d0:	6053      	str	r3, [r2, #4]
 80031d2:	e7da      	b.n	800318a <_free_r+0x22>
 80031d4:	d902      	bls.n	80031dc <_free_r+0x74>
 80031d6:	230c      	movs	r3, #12
 80031d8:	602b      	str	r3, [r5, #0]
 80031da:	e7d6      	b.n	800318a <_free_r+0x22>
 80031dc:	6820      	ldr	r0, [r4, #0]
 80031de:	1821      	adds	r1, r4, r0
 80031e0:	428b      	cmp	r3, r1
 80031e2:	bf01      	itttt	eq
 80031e4:	6819      	ldreq	r1, [r3, #0]
 80031e6:	685b      	ldreq	r3, [r3, #4]
 80031e8:	1809      	addeq	r1, r1, r0
 80031ea:	6021      	streq	r1, [r4, #0]
 80031ec:	6063      	str	r3, [r4, #4]
 80031ee:	6054      	str	r4, [r2, #4]
 80031f0:	e7cb      	b.n	800318a <_free_r+0x22>
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	20000300 	.word	0x20000300

080031f8 <malloc>:
 80031f8:	4b02      	ldr	r3, [pc, #8]	@ (8003204 <malloc+0xc>)
 80031fa:	4601      	mov	r1, r0
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	f000 b825 	b.w	800324c <_malloc_r>
 8003202:	bf00      	nop
 8003204:	20000030 	.word	0x20000030

08003208 <sbrk_aligned>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	4e0f      	ldr	r6, [pc, #60]	@ (8003248 <sbrk_aligned+0x40>)
 800320c:	460c      	mov	r4, r1
 800320e:	6831      	ldr	r1, [r6, #0]
 8003210:	4605      	mov	r5, r0
 8003212:	b911      	cbnz	r1, 800321a <sbrk_aligned+0x12>
 8003214:	f000 f960 	bl	80034d8 <_sbrk_r>
 8003218:	6030      	str	r0, [r6, #0]
 800321a:	4621      	mov	r1, r4
 800321c:	4628      	mov	r0, r5
 800321e:	f000 f95b 	bl	80034d8 <_sbrk_r>
 8003222:	1c43      	adds	r3, r0, #1
 8003224:	d103      	bne.n	800322e <sbrk_aligned+0x26>
 8003226:	f04f 34ff 	mov.w	r4, #4294967295
 800322a:	4620      	mov	r0, r4
 800322c:	bd70      	pop	{r4, r5, r6, pc}
 800322e:	1cc4      	adds	r4, r0, #3
 8003230:	f024 0403 	bic.w	r4, r4, #3
 8003234:	42a0      	cmp	r0, r4
 8003236:	d0f8      	beq.n	800322a <sbrk_aligned+0x22>
 8003238:	1a21      	subs	r1, r4, r0
 800323a:	4628      	mov	r0, r5
 800323c:	f000 f94c 	bl	80034d8 <_sbrk_r>
 8003240:	3001      	adds	r0, #1
 8003242:	d1f2      	bne.n	800322a <sbrk_aligned+0x22>
 8003244:	e7ef      	b.n	8003226 <sbrk_aligned+0x1e>
 8003246:	bf00      	nop
 8003248:	200002fc 	.word	0x200002fc

0800324c <_malloc_r>:
 800324c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003250:	1ccd      	adds	r5, r1, #3
 8003252:	f025 0503 	bic.w	r5, r5, #3
 8003256:	3508      	adds	r5, #8
 8003258:	2d0c      	cmp	r5, #12
 800325a:	bf38      	it	cc
 800325c:	250c      	movcc	r5, #12
 800325e:	2d00      	cmp	r5, #0
 8003260:	4606      	mov	r6, r0
 8003262:	db01      	blt.n	8003268 <_malloc_r+0x1c>
 8003264:	42a9      	cmp	r1, r5
 8003266:	d904      	bls.n	8003272 <_malloc_r+0x26>
 8003268:	230c      	movs	r3, #12
 800326a:	6033      	str	r3, [r6, #0]
 800326c:	2000      	movs	r0, #0
 800326e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003272:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003348 <_malloc_r+0xfc>
 8003276:	f000 f869 	bl	800334c <__malloc_lock>
 800327a:	f8d8 3000 	ldr.w	r3, [r8]
 800327e:	461c      	mov	r4, r3
 8003280:	bb44      	cbnz	r4, 80032d4 <_malloc_r+0x88>
 8003282:	4629      	mov	r1, r5
 8003284:	4630      	mov	r0, r6
 8003286:	f7ff ffbf 	bl	8003208 <sbrk_aligned>
 800328a:	1c43      	adds	r3, r0, #1
 800328c:	4604      	mov	r4, r0
 800328e:	d158      	bne.n	8003342 <_malloc_r+0xf6>
 8003290:	f8d8 4000 	ldr.w	r4, [r8]
 8003294:	4627      	mov	r7, r4
 8003296:	2f00      	cmp	r7, #0
 8003298:	d143      	bne.n	8003322 <_malloc_r+0xd6>
 800329a:	2c00      	cmp	r4, #0
 800329c:	d04b      	beq.n	8003336 <_malloc_r+0xea>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	4639      	mov	r1, r7
 80032a2:	4630      	mov	r0, r6
 80032a4:	eb04 0903 	add.w	r9, r4, r3
 80032a8:	f000 f916 	bl	80034d8 <_sbrk_r>
 80032ac:	4581      	cmp	r9, r0
 80032ae:	d142      	bne.n	8003336 <_malloc_r+0xea>
 80032b0:	6821      	ldr	r1, [r4, #0]
 80032b2:	4630      	mov	r0, r6
 80032b4:	1a6d      	subs	r5, r5, r1
 80032b6:	4629      	mov	r1, r5
 80032b8:	f7ff ffa6 	bl	8003208 <sbrk_aligned>
 80032bc:	3001      	adds	r0, #1
 80032be:	d03a      	beq.n	8003336 <_malloc_r+0xea>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	442b      	add	r3, r5
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	f8d8 3000 	ldr.w	r3, [r8]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	bb62      	cbnz	r2, 8003328 <_malloc_r+0xdc>
 80032ce:	f8c8 7000 	str.w	r7, [r8]
 80032d2:	e00f      	b.n	80032f4 <_malloc_r+0xa8>
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	1b52      	subs	r2, r2, r5
 80032d8:	d420      	bmi.n	800331c <_malloc_r+0xd0>
 80032da:	2a0b      	cmp	r2, #11
 80032dc:	d917      	bls.n	800330e <_malloc_r+0xc2>
 80032de:	1961      	adds	r1, r4, r5
 80032e0:	42a3      	cmp	r3, r4
 80032e2:	6025      	str	r5, [r4, #0]
 80032e4:	bf18      	it	ne
 80032e6:	6059      	strne	r1, [r3, #4]
 80032e8:	6863      	ldr	r3, [r4, #4]
 80032ea:	bf08      	it	eq
 80032ec:	f8c8 1000 	streq.w	r1, [r8]
 80032f0:	5162      	str	r2, [r4, r5]
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	4630      	mov	r0, r6
 80032f6:	f000 f82f 	bl	8003358 <__malloc_unlock>
 80032fa:	f104 000b 	add.w	r0, r4, #11
 80032fe:	1d23      	adds	r3, r4, #4
 8003300:	f020 0007 	bic.w	r0, r0, #7
 8003304:	1ac2      	subs	r2, r0, r3
 8003306:	bf1c      	itt	ne
 8003308:	1a1b      	subne	r3, r3, r0
 800330a:	50a3      	strne	r3, [r4, r2]
 800330c:	e7af      	b.n	800326e <_malloc_r+0x22>
 800330e:	6862      	ldr	r2, [r4, #4]
 8003310:	42a3      	cmp	r3, r4
 8003312:	bf0c      	ite	eq
 8003314:	f8c8 2000 	streq.w	r2, [r8]
 8003318:	605a      	strne	r2, [r3, #4]
 800331a:	e7eb      	b.n	80032f4 <_malloc_r+0xa8>
 800331c:	4623      	mov	r3, r4
 800331e:	6864      	ldr	r4, [r4, #4]
 8003320:	e7ae      	b.n	8003280 <_malloc_r+0x34>
 8003322:	463c      	mov	r4, r7
 8003324:	687f      	ldr	r7, [r7, #4]
 8003326:	e7b6      	b.n	8003296 <_malloc_r+0x4a>
 8003328:	461a      	mov	r2, r3
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	42a3      	cmp	r3, r4
 800332e:	d1fb      	bne.n	8003328 <_malloc_r+0xdc>
 8003330:	2300      	movs	r3, #0
 8003332:	6053      	str	r3, [r2, #4]
 8003334:	e7de      	b.n	80032f4 <_malloc_r+0xa8>
 8003336:	230c      	movs	r3, #12
 8003338:	4630      	mov	r0, r6
 800333a:	6033      	str	r3, [r6, #0]
 800333c:	f000 f80c 	bl	8003358 <__malloc_unlock>
 8003340:	e794      	b.n	800326c <_malloc_r+0x20>
 8003342:	6005      	str	r5, [r0, #0]
 8003344:	e7d6      	b.n	80032f4 <_malloc_r+0xa8>
 8003346:	bf00      	nop
 8003348:	20000300 	.word	0x20000300

0800334c <__malloc_lock>:
 800334c:	4801      	ldr	r0, [pc, #4]	@ (8003354 <__malloc_lock+0x8>)
 800334e:	f7ff bedc 	b.w	800310a <__retarget_lock_acquire_recursive>
 8003352:	bf00      	nop
 8003354:	200002f8 	.word	0x200002f8

08003358 <__malloc_unlock>:
 8003358:	4801      	ldr	r0, [pc, #4]	@ (8003360 <__malloc_unlock+0x8>)
 800335a:	f7ff bed7 	b.w	800310c <__retarget_lock_release_recursive>
 800335e:	bf00      	nop
 8003360:	200002f8 	.word	0x200002f8

08003364 <__sflush_r>:
 8003364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	0716      	lsls	r6, r2, #28
 800336c:	4605      	mov	r5, r0
 800336e:	460c      	mov	r4, r1
 8003370:	d454      	bmi.n	800341c <__sflush_r+0xb8>
 8003372:	684b      	ldr	r3, [r1, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	dc02      	bgt.n	800337e <__sflush_r+0x1a>
 8003378:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	dd48      	ble.n	8003410 <__sflush_r+0xac>
 800337e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003380:	2e00      	cmp	r6, #0
 8003382:	d045      	beq.n	8003410 <__sflush_r+0xac>
 8003384:	2300      	movs	r3, #0
 8003386:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800338a:	682f      	ldr	r7, [r5, #0]
 800338c:	6a21      	ldr	r1, [r4, #32]
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	d030      	beq.n	80033f4 <__sflush_r+0x90>
 8003392:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003394:	89a3      	ldrh	r3, [r4, #12]
 8003396:	0759      	lsls	r1, r3, #29
 8003398:	d505      	bpl.n	80033a6 <__sflush_r+0x42>
 800339a:	6863      	ldr	r3, [r4, #4]
 800339c:	1ad2      	subs	r2, r2, r3
 800339e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80033a0:	b10b      	cbz	r3, 80033a6 <__sflush_r+0x42>
 80033a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033a4:	1ad2      	subs	r2, r2, r3
 80033a6:	2300      	movs	r3, #0
 80033a8:	4628      	mov	r0, r5
 80033aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80033ac:	6a21      	ldr	r1, [r4, #32]
 80033ae:	47b0      	blx	r6
 80033b0:	1c43      	adds	r3, r0, #1
 80033b2:	89a3      	ldrh	r3, [r4, #12]
 80033b4:	d106      	bne.n	80033c4 <__sflush_r+0x60>
 80033b6:	6829      	ldr	r1, [r5, #0]
 80033b8:	291d      	cmp	r1, #29
 80033ba:	d82b      	bhi.n	8003414 <__sflush_r+0xb0>
 80033bc:	4a28      	ldr	r2, [pc, #160]	@ (8003460 <__sflush_r+0xfc>)
 80033be:	410a      	asrs	r2, r1
 80033c0:	07d6      	lsls	r6, r2, #31
 80033c2:	d427      	bmi.n	8003414 <__sflush_r+0xb0>
 80033c4:	2200      	movs	r2, #0
 80033c6:	6062      	str	r2, [r4, #4]
 80033c8:	6922      	ldr	r2, [r4, #16]
 80033ca:	04d9      	lsls	r1, r3, #19
 80033cc:	6022      	str	r2, [r4, #0]
 80033ce:	d504      	bpl.n	80033da <__sflush_r+0x76>
 80033d0:	1c42      	adds	r2, r0, #1
 80033d2:	d101      	bne.n	80033d8 <__sflush_r+0x74>
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	b903      	cbnz	r3, 80033da <__sflush_r+0x76>
 80033d8:	6560      	str	r0, [r4, #84]	@ 0x54
 80033da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033dc:	602f      	str	r7, [r5, #0]
 80033de:	b1b9      	cbz	r1, 8003410 <__sflush_r+0xac>
 80033e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033e4:	4299      	cmp	r1, r3
 80033e6:	d002      	beq.n	80033ee <__sflush_r+0x8a>
 80033e8:	4628      	mov	r0, r5
 80033ea:	f7ff febd 	bl	8003168 <_free_r>
 80033ee:	2300      	movs	r3, #0
 80033f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80033f2:	e00d      	b.n	8003410 <__sflush_r+0xac>
 80033f4:	2301      	movs	r3, #1
 80033f6:	4628      	mov	r0, r5
 80033f8:	47b0      	blx	r6
 80033fa:	4602      	mov	r2, r0
 80033fc:	1c50      	adds	r0, r2, #1
 80033fe:	d1c9      	bne.n	8003394 <__sflush_r+0x30>
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0c6      	beq.n	8003394 <__sflush_r+0x30>
 8003406:	2b1d      	cmp	r3, #29
 8003408:	d001      	beq.n	800340e <__sflush_r+0xaa>
 800340a:	2b16      	cmp	r3, #22
 800340c:	d11d      	bne.n	800344a <__sflush_r+0xe6>
 800340e:	602f      	str	r7, [r5, #0]
 8003410:	2000      	movs	r0, #0
 8003412:	e021      	b.n	8003458 <__sflush_r+0xf4>
 8003414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003418:	b21b      	sxth	r3, r3
 800341a:	e01a      	b.n	8003452 <__sflush_r+0xee>
 800341c:	690f      	ldr	r7, [r1, #16]
 800341e:	2f00      	cmp	r7, #0
 8003420:	d0f6      	beq.n	8003410 <__sflush_r+0xac>
 8003422:	0793      	lsls	r3, r2, #30
 8003424:	bf18      	it	ne
 8003426:	2300      	movne	r3, #0
 8003428:	680e      	ldr	r6, [r1, #0]
 800342a:	bf08      	it	eq
 800342c:	694b      	ldreq	r3, [r1, #20]
 800342e:	1bf6      	subs	r6, r6, r7
 8003430:	600f      	str	r7, [r1, #0]
 8003432:	608b      	str	r3, [r1, #8]
 8003434:	2e00      	cmp	r6, #0
 8003436:	ddeb      	ble.n	8003410 <__sflush_r+0xac>
 8003438:	4633      	mov	r3, r6
 800343a:	463a      	mov	r2, r7
 800343c:	4628      	mov	r0, r5
 800343e:	6a21      	ldr	r1, [r4, #32]
 8003440:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003444:	47e0      	blx	ip
 8003446:	2800      	cmp	r0, #0
 8003448:	dc07      	bgt.n	800345a <__sflush_r+0xf6>
 800344a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800344e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003452:	f04f 30ff 	mov.w	r0, #4294967295
 8003456:	81a3      	strh	r3, [r4, #12]
 8003458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800345a:	4407      	add	r7, r0
 800345c:	1a36      	subs	r6, r6, r0
 800345e:	e7e9      	b.n	8003434 <__sflush_r+0xd0>
 8003460:	dfbffffe 	.word	0xdfbffffe

08003464 <_fflush_r>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	690b      	ldr	r3, [r1, #16]
 8003468:	4605      	mov	r5, r0
 800346a:	460c      	mov	r4, r1
 800346c:	b913      	cbnz	r3, 8003474 <_fflush_r+0x10>
 800346e:	2500      	movs	r5, #0
 8003470:	4628      	mov	r0, r5
 8003472:	bd38      	pop	{r3, r4, r5, pc}
 8003474:	b118      	cbz	r0, 800347e <_fflush_r+0x1a>
 8003476:	6a03      	ldr	r3, [r0, #32]
 8003478:	b90b      	cbnz	r3, 800347e <_fflush_r+0x1a>
 800347a:	f7ff fce5 	bl	8002e48 <__sinit>
 800347e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f3      	beq.n	800346e <_fflush_r+0xa>
 8003486:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003488:	07d0      	lsls	r0, r2, #31
 800348a:	d404      	bmi.n	8003496 <_fflush_r+0x32>
 800348c:	0599      	lsls	r1, r3, #22
 800348e:	d402      	bmi.n	8003496 <_fflush_r+0x32>
 8003490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003492:	f7ff fe3a 	bl	800310a <__retarget_lock_acquire_recursive>
 8003496:	4628      	mov	r0, r5
 8003498:	4621      	mov	r1, r4
 800349a:	f7ff ff63 	bl	8003364 <__sflush_r>
 800349e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034a0:	4605      	mov	r5, r0
 80034a2:	07da      	lsls	r2, r3, #31
 80034a4:	d4e4      	bmi.n	8003470 <_fflush_r+0xc>
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	059b      	lsls	r3, r3, #22
 80034aa:	d4e1      	bmi.n	8003470 <_fflush_r+0xc>
 80034ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034ae:	f7ff fe2d 	bl	800310c <__retarget_lock_release_recursive>
 80034b2:	e7dd      	b.n	8003470 <_fflush_r+0xc>

080034b4 <fiprintf>:
 80034b4:	b40e      	push	{r1, r2, r3}
 80034b6:	b503      	push	{r0, r1, lr}
 80034b8:	4601      	mov	r1, r0
 80034ba:	ab03      	add	r3, sp, #12
 80034bc:	4805      	ldr	r0, [pc, #20]	@ (80034d4 <fiprintf+0x20>)
 80034be:	f853 2b04 	ldr.w	r2, [r3], #4
 80034c2:	6800      	ldr	r0, [r0, #0]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	f000 f845 	bl	8003554 <_vfiprintf_r>
 80034ca:	b002      	add	sp, #8
 80034cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80034d0:	b003      	add	sp, #12
 80034d2:	4770      	bx	lr
 80034d4:	20000030 	.word	0x20000030

080034d8 <_sbrk_r>:
 80034d8:	b538      	push	{r3, r4, r5, lr}
 80034da:	2300      	movs	r3, #0
 80034dc:	4d05      	ldr	r5, [pc, #20]	@ (80034f4 <_sbrk_r+0x1c>)
 80034de:	4604      	mov	r4, r0
 80034e0:	4608      	mov	r0, r1
 80034e2:	602b      	str	r3, [r5, #0]
 80034e4:	f7fd fb5c 	bl	8000ba0 <_sbrk>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d102      	bne.n	80034f2 <_sbrk_r+0x1a>
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	b103      	cbz	r3, 80034f2 <_sbrk_r+0x1a>
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
 80034f4:	200002f4 	.word	0x200002f4

080034f8 <abort>:
 80034f8:	2006      	movs	r0, #6
 80034fa:	b508      	push	{r3, lr}
 80034fc:	f000 fb90 	bl	8003c20 <raise>
 8003500:	2001      	movs	r0, #1
 8003502:	f7fd fad8 	bl	8000ab6 <_exit>

08003506 <__sfputc_r>:
 8003506:	6893      	ldr	r3, [r2, #8]
 8003508:	b410      	push	{r4}
 800350a:	3b01      	subs	r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	6093      	str	r3, [r2, #8]
 8003510:	da07      	bge.n	8003522 <__sfputc_r+0x1c>
 8003512:	6994      	ldr	r4, [r2, #24]
 8003514:	42a3      	cmp	r3, r4
 8003516:	db01      	blt.n	800351c <__sfputc_r+0x16>
 8003518:	290a      	cmp	r1, #10
 800351a:	d102      	bne.n	8003522 <__sfputc_r+0x1c>
 800351c:	bc10      	pop	{r4}
 800351e:	f000 bac3 	b.w	8003aa8 <__swbuf_r>
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	1c58      	adds	r0, r3, #1
 8003526:	6010      	str	r0, [r2, #0]
 8003528:	7019      	strb	r1, [r3, #0]
 800352a:	4608      	mov	r0, r1
 800352c:	bc10      	pop	{r4}
 800352e:	4770      	bx	lr

08003530 <__sfputs_r>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	4606      	mov	r6, r0
 8003534:	460f      	mov	r7, r1
 8003536:	4614      	mov	r4, r2
 8003538:	18d5      	adds	r5, r2, r3
 800353a:	42ac      	cmp	r4, r5
 800353c:	d101      	bne.n	8003542 <__sfputs_r+0x12>
 800353e:	2000      	movs	r0, #0
 8003540:	e007      	b.n	8003552 <__sfputs_r+0x22>
 8003542:	463a      	mov	r2, r7
 8003544:	4630      	mov	r0, r6
 8003546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800354a:	f7ff ffdc 	bl	8003506 <__sfputc_r>
 800354e:	1c43      	adds	r3, r0, #1
 8003550:	d1f3      	bne.n	800353a <__sfputs_r+0xa>
 8003552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003554 <_vfiprintf_r>:
 8003554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003558:	460d      	mov	r5, r1
 800355a:	4614      	mov	r4, r2
 800355c:	4698      	mov	r8, r3
 800355e:	4606      	mov	r6, r0
 8003560:	b09d      	sub	sp, #116	@ 0x74
 8003562:	b118      	cbz	r0, 800356c <_vfiprintf_r+0x18>
 8003564:	6a03      	ldr	r3, [r0, #32]
 8003566:	b90b      	cbnz	r3, 800356c <_vfiprintf_r+0x18>
 8003568:	f7ff fc6e 	bl	8002e48 <__sinit>
 800356c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800356e:	07d9      	lsls	r1, r3, #31
 8003570:	d405      	bmi.n	800357e <_vfiprintf_r+0x2a>
 8003572:	89ab      	ldrh	r3, [r5, #12]
 8003574:	059a      	lsls	r2, r3, #22
 8003576:	d402      	bmi.n	800357e <_vfiprintf_r+0x2a>
 8003578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800357a:	f7ff fdc6 	bl	800310a <__retarget_lock_acquire_recursive>
 800357e:	89ab      	ldrh	r3, [r5, #12]
 8003580:	071b      	lsls	r3, r3, #28
 8003582:	d501      	bpl.n	8003588 <_vfiprintf_r+0x34>
 8003584:	692b      	ldr	r3, [r5, #16]
 8003586:	b99b      	cbnz	r3, 80035b0 <_vfiprintf_r+0x5c>
 8003588:	4629      	mov	r1, r5
 800358a:	4630      	mov	r0, r6
 800358c:	f000 faca 	bl	8003b24 <__swsetup_r>
 8003590:	b170      	cbz	r0, 80035b0 <_vfiprintf_r+0x5c>
 8003592:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003594:	07dc      	lsls	r4, r3, #31
 8003596:	d504      	bpl.n	80035a2 <_vfiprintf_r+0x4e>
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	b01d      	add	sp, #116	@ 0x74
 800359e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035a2:	89ab      	ldrh	r3, [r5, #12]
 80035a4:	0598      	lsls	r0, r3, #22
 80035a6:	d4f7      	bmi.n	8003598 <_vfiprintf_r+0x44>
 80035a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035aa:	f7ff fdaf 	bl	800310c <__retarget_lock_release_recursive>
 80035ae:	e7f3      	b.n	8003598 <_vfiprintf_r+0x44>
 80035b0:	2300      	movs	r3, #0
 80035b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80035b4:	2320      	movs	r3, #32
 80035b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035ba:	2330      	movs	r3, #48	@ 0x30
 80035bc:	f04f 0901 	mov.w	r9, #1
 80035c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80035c4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003770 <_vfiprintf_r+0x21c>
 80035c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035cc:	4623      	mov	r3, r4
 80035ce:	469a      	mov	sl, r3
 80035d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035d4:	b10a      	cbz	r2, 80035da <_vfiprintf_r+0x86>
 80035d6:	2a25      	cmp	r2, #37	@ 0x25
 80035d8:	d1f9      	bne.n	80035ce <_vfiprintf_r+0x7a>
 80035da:	ebba 0b04 	subs.w	fp, sl, r4
 80035de:	d00b      	beq.n	80035f8 <_vfiprintf_r+0xa4>
 80035e0:	465b      	mov	r3, fp
 80035e2:	4622      	mov	r2, r4
 80035e4:	4629      	mov	r1, r5
 80035e6:	4630      	mov	r0, r6
 80035e8:	f7ff ffa2 	bl	8003530 <__sfputs_r>
 80035ec:	3001      	adds	r0, #1
 80035ee:	f000 80a7 	beq.w	8003740 <_vfiprintf_r+0x1ec>
 80035f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035f4:	445a      	add	r2, fp
 80035f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80035f8:	f89a 3000 	ldrb.w	r3, [sl]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 809f 	beq.w	8003740 <_vfiprintf_r+0x1ec>
 8003602:	2300      	movs	r3, #0
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800360c:	f10a 0a01 	add.w	sl, sl, #1
 8003610:	9304      	str	r3, [sp, #16]
 8003612:	9307      	str	r3, [sp, #28]
 8003614:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003618:	931a      	str	r3, [sp, #104]	@ 0x68
 800361a:	4654      	mov	r4, sl
 800361c:	2205      	movs	r2, #5
 800361e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003622:	4853      	ldr	r0, [pc, #332]	@ (8003770 <_vfiprintf_r+0x21c>)
 8003624:	f000 fb18 	bl	8003c58 <memchr>
 8003628:	9a04      	ldr	r2, [sp, #16]
 800362a:	b9d8      	cbnz	r0, 8003664 <_vfiprintf_r+0x110>
 800362c:	06d1      	lsls	r1, r2, #27
 800362e:	bf44      	itt	mi
 8003630:	2320      	movmi	r3, #32
 8003632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003636:	0713      	lsls	r3, r2, #28
 8003638:	bf44      	itt	mi
 800363a:	232b      	movmi	r3, #43	@ 0x2b
 800363c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003640:	f89a 3000 	ldrb.w	r3, [sl]
 8003644:	2b2a      	cmp	r3, #42	@ 0x2a
 8003646:	d015      	beq.n	8003674 <_vfiprintf_r+0x120>
 8003648:	4654      	mov	r4, sl
 800364a:	2000      	movs	r0, #0
 800364c:	f04f 0c0a 	mov.w	ip, #10
 8003650:	9a07      	ldr	r2, [sp, #28]
 8003652:	4621      	mov	r1, r4
 8003654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003658:	3b30      	subs	r3, #48	@ 0x30
 800365a:	2b09      	cmp	r3, #9
 800365c:	d94b      	bls.n	80036f6 <_vfiprintf_r+0x1a2>
 800365e:	b1b0      	cbz	r0, 800368e <_vfiprintf_r+0x13a>
 8003660:	9207      	str	r2, [sp, #28]
 8003662:	e014      	b.n	800368e <_vfiprintf_r+0x13a>
 8003664:	eba0 0308 	sub.w	r3, r0, r8
 8003668:	fa09 f303 	lsl.w	r3, r9, r3
 800366c:	4313      	orrs	r3, r2
 800366e:	46a2      	mov	sl, r4
 8003670:	9304      	str	r3, [sp, #16]
 8003672:	e7d2      	b.n	800361a <_vfiprintf_r+0xc6>
 8003674:	9b03      	ldr	r3, [sp, #12]
 8003676:	1d19      	adds	r1, r3, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	9103      	str	r1, [sp, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	bfbb      	ittet	lt
 8003680:	425b      	neglt	r3, r3
 8003682:	f042 0202 	orrlt.w	r2, r2, #2
 8003686:	9307      	strge	r3, [sp, #28]
 8003688:	9307      	strlt	r3, [sp, #28]
 800368a:	bfb8      	it	lt
 800368c:	9204      	strlt	r2, [sp, #16]
 800368e:	7823      	ldrb	r3, [r4, #0]
 8003690:	2b2e      	cmp	r3, #46	@ 0x2e
 8003692:	d10a      	bne.n	80036aa <_vfiprintf_r+0x156>
 8003694:	7863      	ldrb	r3, [r4, #1]
 8003696:	2b2a      	cmp	r3, #42	@ 0x2a
 8003698:	d132      	bne.n	8003700 <_vfiprintf_r+0x1ac>
 800369a:	9b03      	ldr	r3, [sp, #12]
 800369c:	3402      	adds	r4, #2
 800369e:	1d1a      	adds	r2, r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	9203      	str	r2, [sp, #12]
 80036a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036a8:	9305      	str	r3, [sp, #20]
 80036aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003774 <_vfiprintf_r+0x220>
 80036ae:	2203      	movs	r2, #3
 80036b0:	4650      	mov	r0, sl
 80036b2:	7821      	ldrb	r1, [r4, #0]
 80036b4:	f000 fad0 	bl	8003c58 <memchr>
 80036b8:	b138      	cbz	r0, 80036ca <_vfiprintf_r+0x176>
 80036ba:	2240      	movs	r2, #64	@ 0x40
 80036bc:	9b04      	ldr	r3, [sp, #16]
 80036be:	eba0 000a 	sub.w	r0, r0, sl
 80036c2:	4082      	lsls	r2, r0
 80036c4:	4313      	orrs	r3, r2
 80036c6:	3401      	adds	r4, #1
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ce:	2206      	movs	r2, #6
 80036d0:	4829      	ldr	r0, [pc, #164]	@ (8003778 <_vfiprintf_r+0x224>)
 80036d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036d6:	f000 fabf 	bl	8003c58 <memchr>
 80036da:	2800      	cmp	r0, #0
 80036dc:	d03f      	beq.n	800375e <_vfiprintf_r+0x20a>
 80036de:	4b27      	ldr	r3, [pc, #156]	@ (800377c <_vfiprintf_r+0x228>)
 80036e0:	bb1b      	cbnz	r3, 800372a <_vfiprintf_r+0x1d6>
 80036e2:	9b03      	ldr	r3, [sp, #12]
 80036e4:	3307      	adds	r3, #7
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	3308      	adds	r3, #8
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036f0:	443b      	add	r3, r7
 80036f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80036f4:	e76a      	b.n	80035cc <_vfiprintf_r+0x78>
 80036f6:	460c      	mov	r4, r1
 80036f8:	2001      	movs	r0, #1
 80036fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80036fe:	e7a8      	b.n	8003652 <_vfiprintf_r+0xfe>
 8003700:	2300      	movs	r3, #0
 8003702:	f04f 0c0a 	mov.w	ip, #10
 8003706:	4619      	mov	r1, r3
 8003708:	3401      	adds	r4, #1
 800370a:	9305      	str	r3, [sp, #20]
 800370c:	4620      	mov	r0, r4
 800370e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003712:	3a30      	subs	r2, #48	@ 0x30
 8003714:	2a09      	cmp	r2, #9
 8003716:	d903      	bls.n	8003720 <_vfiprintf_r+0x1cc>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0c6      	beq.n	80036aa <_vfiprintf_r+0x156>
 800371c:	9105      	str	r1, [sp, #20]
 800371e:	e7c4      	b.n	80036aa <_vfiprintf_r+0x156>
 8003720:	4604      	mov	r4, r0
 8003722:	2301      	movs	r3, #1
 8003724:	fb0c 2101 	mla	r1, ip, r1, r2
 8003728:	e7f0      	b.n	800370c <_vfiprintf_r+0x1b8>
 800372a:	ab03      	add	r3, sp, #12
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	462a      	mov	r2, r5
 8003730:	4630      	mov	r0, r6
 8003732:	4b13      	ldr	r3, [pc, #76]	@ (8003780 <_vfiprintf_r+0x22c>)
 8003734:	a904      	add	r1, sp, #16
 8003736:	f3af 8000 	nop.w
 800373a:	4607      	mov	r7, r0
 800373c:	1c78      	adds	r0, r7, #1
 800373e:	d1d6      	bne.n	80036ee <_vfiprintf_r+0x19a>
 8003740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003742:	07d9      	lsls	r1, r3, #31
 8003744:	d405      	bmi.n	8003752 <_vfiprintf_r+0x1fe>
 8003746:	89ab      	ldrh	r3, [r5, #12]
 8003748:	059a      	lsls	r2, r3, #22
 800374a:	d402      	bmi.n	8003752 <_vfiprintf_r+0x1fe>
 800374c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800374e:	f7ff fcdd 	bl	800310c <__retarget_lock_release_recursive>
 8003752:	89ab      	ldrh	r3, [r5, #12]
 8003754:	065b      	lsls	r3, r3, #25
 8003756:	f53f af1f 	bmi.w	8003598 <_vfiprintf_r+0x44>
 800375a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800375c:	e71e      	b.n	800359c <_vfiprintf_r+0x48>
 800375e:	ab03      	add	r3, sp, #12
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	462a      	mov	r2, r5
 8003764:	4630      	mov	r0, r6
 8003766:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <_vfiprintf_r+0x22c>)
 8003768:	a904      	add	r1, sp, #16
 800376a:	f000 f87d 	bl	8003868 <_printf_i>
 800376e:	e7e4      	b.n	800373a <_vfiprintf_r+0x1e6>
 8003770:	08003ea9 	.word	0x08003ea9
 8003774:	08003eaf 	.word	0x08003eaf
 8003778:	08003eb3 	.word	0x08003eb3
 800377c:	00000000 	.word	0x00000000
 8003780:	08003531 	.word	0x08003531

08003784 <_printf_common>:
 8003784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003788:	4616      	mov	r6, r2
 800378a:	4698      	mov	r8, r3
 800378c:	688a      	ldr	r2, [r1, #8]
 800378e:	690b      	ldr	r3, [r1, #16]
 8003790:	4607      	mov	r7, r0
 8003792:	4293      	cmp	r3, r2
 8003794:	bfb8      	it	lt
 8003796:	4613      	movlt	r3, r2
 8003798:	6033      	str	r3, [r6, #0]
 800379a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800379e:	460c      	mov	r4, r1
 80037a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037a4:	b10a      	cbz	r2, 80037aa <_printf_common+0x26>
 80037a6:	3301      	adds	r3, #1
 80037a8:	6033      	str	r3, [r6, #0]
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	0699      	lsls	r1, r3, #26
 80037ae:	bf42      	ittt	mi
 80037b0:	6833      	ldrmi	r3, [r6, #0]
 80037b2:	3302      	addmi	r3, #2
 80037b4:	6033      	strmi	r3, [r6, #0]
 80037b6:	6825      	ldr	r5, [r4, #0]
 80037b8:	f015 0506 	ands.w	r5, r5, #6
 80037bc:	d106      	bne.n	80037cc <_printf_common+0x48>
 80037be:	f104 0a19 	add.w	sl, r4, #25
 80037c2:	68e3      	ldr	r3, [r4, #12]
 80037c4:	6832      	ldr	r2, [r6, #0]
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	42ab      	cmp	r3, r5
 80037ca:	dc2b      	bgt.n	8003824 <_printf_common+0xa0>
 80037cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037d0:	6822      	ldr	r2, [r4, #0]
 80037d2:	3b00      	subs	r3, #0
 80037d4:	bf18      	it	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	0692      	lsls	r2, r2, #26
 80037da:	d430      	bmi.n	800383e <_printf_common+0xba>
 80037dc:	4641      	mov	r1, r8
 80037de:	4638      	mov	r0, r7
 80037e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037e4:	47c8      	blx	r9
 80037e6:	3001      	adds	r0, #1
 80037e8:	d023      	beq.n	8003832 <_printf_common+0xae>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	6922      	ldr	r2, [r4, #16]
 80037ee:	f003 0306 	and.w	r3, r3, #6
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	bf14      	ite	ne
 80037f6:	2500      	movne	r5, #0
 80037f8:	6833      	ldreq	r3, [r6, #0]
 80037fa:	f04f 0600 	mov.w	r6, #0
 80037fe:	bf08      	it	eq
 8003800:	68e5      	ldreq	r5, [r4, #12]
 8003802:	f104 041a 	add.w	r4, r4, #26
 8003806:	bf08      	it	eq
 8003808:	1aed      	subeq	r5, r5, r3
 800380a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800380e:	bf08      	it	eq
 8003810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003814:	4293      	cmp	r3, r2
 8003816:	bfc4      	itt	gt
 8003818:	1a9b      	subgt	r3, r3, r2
 800381a:	18ed      	addgt	r5, r5, r3
 800381c:	42b5      	cmp	r5, r6
 800381e:	d11a      	bne.n	8003856 <_printf_common+0xd2>
 8003820:	2000      	movs	r0, #0
 8003822:	e008      	b.n	8003836 <_printf_common+0xb2>
 8003824:	2301      	movs	r3, #1
 8003826:	4652      	mov	r2, sl
 8003828:	4641      	mov	r1, r8
 800382a:	4638      	mov	r0, r7
 800382c:	47c8      	blx	r9
 800382e:	3001      	adds	r0, #1
 8003830:	d103      	bne.n	800383a <_printf_common+0xb6>
 8003832:	f04f 30ff 	mov.w	r0, #4294967295
 8003836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800383a:	3501      	adds	r5, #1
 800383c:	e7c1      	b.n	80037c2 <_printf_common+0x3e>
 800383e:	2030      	movs	r0, #48	@ 0x30
 8003840:	18e1      	adds	r1, r4, r3
 8003842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800384c:	4422      	add	r2, r4
 800384e:	3302      	adds	r3, #2
 8003850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003854:	e7c2      	b.n	80037dc <_printf_common+0x58>
 8003856:	2301      	movs	r3, #1
 8003858:	4622      	mov	r2, r4
 800385a:	4641      	mov	r1, r8
 800385c:	4638      	mov	r0, r7
 800385e:	47c8      	blx	r9
 8003860:	3001      	adds	r0, #1
 8003862:	d0e6      	beq.n	8003832 <_printf_common+0xae>
 8003864:	3601      	adds	r6, #1
 8003866:	e7d9      	b.n	800381c <_printf_common+0x98>

08003868 <_printf_i>:
 8003868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800386c:	7e0f      	ldrb	r7, [r1, #24]
 800386e:	4691      	mov	r9, r2
 8003870:	2f78      	cmp	r7, #120	@ 0x78
 8003872:	4680      	mov	r8, r0
 8003874:	460c      	mov	r4, r1
 8003876:	469a      	mov	sl, r3
 8003878:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800387a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800387e:	d807      	bhi.n	8003890 <_printf_i+0x28>
 8003880:	2f62      	cmp	r7, #98	@ 0x62
 8003882:	d80a      	bhi.n	800389a <_printf_i+0x32>
 8003884:	2f00      	cmp	r7, #0
 8003886:	f000 80d3 	beq.w	8003a30 <_printf_i+0x1c8>
 800388a:	2f58      	cmp	r7, #88	@ 0x58
 800388c:	f000 80ba 	beq.w	8003a04 <_printf_i+0x19c>
 8003890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003898:	e03a      	b.n	8003910 <_printf_i+0xa8>
 800389a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800389e:	2b15      	cmp	r3, #21
 80038a0:	d8f6      	bhi.n	8003890 <_printf_i+0x28>
 80038a2:	a101      	add	r1, pc, #4	@ (adr r1, 80038a8 <_printf_i+0x40>)
 80038a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038a8:	08003901 	.word	0x08003901
 80038ac:	08003915 	.word	0x08003915
 80038b0:	08003891 	.word	0x08003891
 80038b4:	08003891 	.word	0x08003891
 80038b8:	08003891 	.word	0x08003891
 80038bc:	08003891 	.word	0x08003891
 80038c0:	08003915 	.word	0x08003915
 80038c4:	08003891 	.word	0x08003891
 80038c8:	08003891 	.word	0x08003891
 80038cc:	08003891 	.word	0x08003891
 80038d0:	08003891 	.word	0x08003891
 80038d4:	08003a17 	.word	0x08003a17
 80038d8:	0800393f 	.word	0x0800393f
 80038dc:	080039d1 	.word	0x080039d1
 80038e0:	08003891 	.word	0x08003891
 80038e4:	08003891 	.word	0x08003891
 80038e8:	08003a39 	.word	0x08003a39
 80038ec:	08003891 	.word	0x08003891
 80038f0:	0800393f 	.word	0x0800393f
 80038f4:	08003891 	.word	0x08003891
 80038f8:	08003891 	.word	0x08003891
 80038fc:	080039d9 	.word	0x080039d9
 8003900:	6833      	ldr	r3, [r6, #0]
 8003902:	1d1a      	adds	r2, r3, #4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6032      	str	r2, [r6, #0]
 8003908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800390c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003910:	2301      	movs	r3, #1
 8003912:	e09e      	b.n	8003a52 <_printf_i+0x1ea>
 8003914:	6833      	ldr	r3, [r6, #0]
 8003916:	6820      	ldr	r0, [r4, #0]
 8003918:	1d19      	adds	r1, r3, #4
 800391a:	6031      	str	r1, [r6, #0]
 800391c:	0606      	lsls	r6, r0, #24
 800391e:	d501      	bpl.n	8003924 <_printf_i+0xbc>
 8003920:	681d      	ldr	r5, [r3, #0]
 8003922:	e003      	b.n	800392c <_printf_i+0xc4>
 8003924:	0645      	lsls	r5, r0, #25
 8003926:	d5fb      	bpl.n	8003920 <_printf_i+0xb8>
 8003928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800392c:	2d00      	cmp	r5, #0
 800392e:	da03      	bge.n	8003938 <_printf_i+0xd0>
 8003930:	232d      	movs	r3, #45	@ 0x2d
 8003932:	426d      	negs	r5, r5
 8003934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003938:	230a      	movs	r3, #10
 800393a:	4859      	ldr	r0, [pc, #356]	@ (8003aa0 <_printf_i+0x238>)
 800393c:	e011      	b.n	8003962 <_printf_i+0xfa>
 800393e:	6821      	ldr	r1, [r4, #0]
 8003940:	6833      	ldr	r3, [r6, #0]
 8003942:	0608      	lsls	r0, r1, #24
 8003944:	f853 5b04 	ldr.w	r5, [r3], #4
 8003948:	d402      	bmi.n	8003950 <_printf_i+0xe8>
 800394a:	0649      	lsls	r1, r1, #25
 800394c:	bf48      	it	mi
 800394e:	b2ad      	uxthmi	r5, r5
 8003950:	2f6f      	cmp	r7, #111	@ 0x6f
 8003952:	6033      	str	r3, [r6, #0]
 8003954:	bf14      	ite	ne
 8003956:	230a      	movne	r3, #10
 8003958:	2308      	moveq	r3, #8
 800395a:	4851      	ldr	r0, [pc, #324]	@ (8003aa0 <_printf_i+0x238>)
 800395c:	2100      	movs	r1, #0
 800395e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003962:	6866      	ldr	r6, [r4, #4]
 8003964:	2e00      	cmp	r6, #0
 8003966:	bfa8      	it	ge
 8003968:	6821      	ldrge	r1, [r4, #0]
 800396a:	60a6      	str	r6, [r4, #8]
 800396c:	bfa4      	itt	ge
 800396e:	f021 0104 	bicge.w	r1, r1, #4
 8003972:	6021      	strge	r1, [r4, #0]
 8003974:	b90d      	cbnz	r5, 800397a <_printf_i+0x112>
 8003976:	2e00      	cmp	r6, #0
 8003978:	d04b      	beq.n	8003a12 <_printf_i+0x1aa>
 800397a:	4616      	mov	r6, r2
 800397c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003980:	fb03 5711 	mls	r7, r3, r1, r5
 8003984:	5dc7      	ldrb	r7, [r0, r7]
 8003986:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800398a:	462f      	mov	r7, r5
 800398c:	42bb      	cmp	r3, r7
 800398e:	460d      	mov	r5, r1
 8003990:	d9f4      	bls.n	800397c <_printf_i+0x114>
 8003992:	2b08      	cmp	r3, #8
 8003994:	d10b      	bne.n	80039ae <_printf_i+0x146>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	07df      	lsls	r7, r3, #31
 800399a:	d508      	bpl.n	80039ae <_printf_i+0x146>
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	6861      	ldr	r1, [r4, #4]
 80039a0:	4299      	cmp	r1, r3
 80039a2:	bfde      	ittt	le
 80039a4:	2330      	movle	r3, #48	@ 0x30
 80039a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039ae:	1b92      	subs	r2, r2, r6
 80039b0:	6122      	str	r2, [r4, #16]
 80039b2:	464b      	mov	r3, r9
 80039b4:	4621      	mov	r1, r4
 80039b6:	4640      	mov	r0, r8
 80039b8:	f8cd a000 	str.w	sl, [sp]
 80039bc:	aa03      	add	r2, sp, #12
 80039be:	f7ff fee1 	bl	8003784 <_printf_common>
 80039c2:	3001      	adds	r0, #1
 80039c4:	d14a      	bne.n	8003a5c <_printf_i+0x1f4>
 80039c6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ca:	b004      	add	sp, #16
 80039cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	f043 0320 	orr.w	r3, r3, #32
 80039d6:	6023      	str	r3, [r4, #0]
 80039d8:	2778      	movs	r7, #120	@ 0x78
 80039da:	4832      	ldr	r0, [pc, #200]	@ (8003aa4 <_printf_i+0x23c>)
 80039dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	6831      	ldr	r1, [r6, #0]
 80039e4:	061f      	lsls	r7, r3, #24
 80039e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80039ea:	d402      	bmi.n	80039f2 <_printf_i+0x18a>
 80039ec:	065f      	lsls	r7, r3, #25
 80039ee:	bf48      	it	mi
 80039f0:	b2ad      	uxthmi	r5, r5
 80039f2:	6031      	str	r1, [r6, #0]
 80039f4:	07d9      	lsls	r1, r3, #31
 80039f6:	bf44      	itt	mi
 80039f8:	f043 0320 	orrmi.w	r3, r3, #32
 80039fc:	6023      	strmi	r3, [r4, #0]
 80039fe:	b11d      	cbz	r5, 8003a08 <_printf_i+0x1a0>
 8003a00:	2310      	movs	r3, #16
 8003a02:	e7ab      	b.n	800395c <_printf_i+0xf4>
 8003a04:	4826      	ldr	r0, [pc, #152]	@ (8003aa0 <_printf_i+0x238>)
 8003a06:	e7e9      	b.n	80039dc <_printf_i+0x174>
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	f023 0320 	bic.w	r3, r3, #32
 8003a0e:	6023      	str	r3, [r4, #0]
 8003a10:	e7f6      	b.n	8003a00 <_printf_i+0x198>
 8003a12:	4616      	mov	r6, r2
 8003a14:	e7bd      	b.n	8003992 <_printf_i+0x12a>
 8003a16:	6833      	ldr	r3, [r6, #0]
 8003a18:	6825      	ldr	r5, [r4, #0]
 8003a1a:	1d18      	adds	r0, r3, #4
 8003a1c:	6961      	ldr	r1, [r4, #20]
 8003a1e:	6030      	str	r0, [r6, #0]
 8003a20:	062e      	lsls	r6, r5, #24
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	d501      	bpl.n	8003a2a <_printf_i+0x1c2>
 8003a26:	6019      	str	r1, [r3, #0]
 8003a28:	e002      	b.n	8003a30 <_printf_i+0x1c8>
 8003a2a:	0668      	lsls	r0, r5, #25
 8003a2c:	d5fb      	bpl.n	8003a26 <_printf_i+0x1be>
 8003a2e:	8019      	strh	r1, [r3, #0]
 8003a30:	2300      	movs	r3, #0
 8003a32:	4616      	mov	r6, r2
 8003a34:	6123      	str	r3, [r4, #16]
 8003a36:	e7bc      	b.n	80039b2 <_printf_i+0x14a>
 8003a38:	6833      	ldr	r3, [r6, #0]
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	1d1a      	adds	r2, r3, #4
 8003a3e:	6032      	str	r2, [r6, #0]
 8003a40:	681e      	ldr	r6, [r3, #0]
 8003a42:	6862      	ldr	r2, [r4, #4]
 8003a44:	4630      	mov	r0, r6
 8003a46:	f000 f907 	bl	8003c58 <memchr>
 8003a4a:	b108      	cbz	r0, 8003a50 <_printf_i+0x1e8>
 8003a4c:	1b80      	subs	r0, r0, r6
 8003a4e:	6060      	str	r0, [r4, #4]
 8003a50:	6863      	ldr	r3, [r4, #4]
 8003a52:	6123      	str	r3, [r4, #16]
 8003a54:	2300      	movs	r3, #0
 8003a56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a5a:	e7aa      	b.n	80039b2 <_printf_i+0x14a>
 8003a5c:	4632      	mov	r2, r6
 8003a5e:	4649      	mov	r1, r9
 8003a60:	4640      	mov	r0, r8
 8003a62:	6923      	ldr	r3, [r4, #16]
 8003a64:	47d0      	blx	sl
 8003a66:	3001      	adds	r0, #1
 8003a68:	d0ad      	beq.n	80039c6 <_printf_i+0x15e>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	079b      	lsls	r3, r3, #30
 8003a6e:	d413      	bmi.n	8003a98 <_printf_i+0x230>
 8003a70:	68e0      	ldr	r0, [r4, #12]
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	4298      	cmp	r0, r3
 8003a76:	bfb8      	it	lt
 8003a78:	4618      	movlt	r0, r3
 8003a7a:	e7a6      	b.n	80039ca <_printf_i+0x162>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	4632      	mov	r2, r6
 8003a80:	4649      	mov	r1, r9
 8003a82:	4640      	mov	r0, r8
 8003a84:	47d0      	blx	sl
 8003a86:	3001      	adds	r0, #1
 8003a88:	d09d      	beq.n	80039c6 <_printf_i+0x15e>
 8003a8a:	3501      	adds	r5, #1
 8003a8c:	68e3      	ldr	r3, [r4, #12]
 8003a8e:	9903      	ldr	r1, [sp, #12]
 8003a90:	1a5b      	subs	r3, r3, r1
 8003a92:	42ab      	cmp	r3, r5
 8003a94:	dcf2      	bgt.n	8003a7c <_printf_i+0x214>
 8003a96:	e7eb      	b.n	8003a70 <_printf_i+0x208>
 8003a98:	2500      	movs	r5, #0
 8003a9a:	f104 0619 	add.w	r6, r4, #25
 8003a9e:	e7f5      	b.n	8003a8c <_printf_i+0x224>
 8003aa0:	08003eba 	.word	0x08003eba
 8003aa4:	08003ecb 	.word	0x08003ecb

08003aa8 <__swbuf_r>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	460e      	mov	r6, r1
 8003aac:	4614      	mov	r4, r2
 8003aae:	4605      	mov	r5, r0
 8003ab0:	b118      	cbz	r0, 8003aba <__swbuf_r+0x12>
 8003ab2:	6a03      	ldr	r3, [r0, #32]
 8003ab4:	b90b      	cbnz	r3, 8003aba <__swbuf_r+0x12>
 8003ab6:	f7ff f9c7 	bl	8002e48 <__sinit>
 8003aba:	69a3      	ldr	r3, [r4, #24]
 8003abc:	60a3      	str	r3, [r4, #8]
 8003abe:	89a3      	ldrh	r3, [r4, #12]
 8003ac0:	071a      	lsls	r2, r3, #28
 8003ac2:	d501      	bpl.n	8003ac8 <__swbuf_r+0x20>
 8003ac4:	6923      	ldr	r3, [r4, #16]
 8003ac6:	b943      	cbnz	r3, 8003ada <__swbuf_r+0x32>
 8003ac8:	4621      	mov	r1, r4
 8003aca:	4628      	mov	r0, r5
 8003acc:	f000 f82a 	bl	8003b24 <__swsetup_r>
 8003ad0:	b118      	cbz	r0, 8003ada <__swbuf_r+0x32>
 8003ad2:	f04f 37ff 	mov.w	r7, #4294967295
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	6922      	ldr	r2, [r4, #16]
 8003ade:	b2f6      	uxtb	r6, r6
 8003ae0:	1a98      	subs	r0, r3, r2
 8003ae2:	6963      	ldr	r3, [r4, #20]
 8003ae4:	4637      	mov	r7, r6
 8003ae6:	4283      	cmp	r3, r0
 8003ae8:	dc05      	bgt.n	8003af6 <__swbuf_r+0x4e>
 8003aea:	4621      	mov	r1, r4
 8003aec:	4628      	mov	r0, r5
 8003aee:	f7ff fcb9 	bl	8003464 <_fflush_r>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d1ed      	bne.n	8003ad2 <__swbuf_r+0x2a>
 8003af6:	68a3      	ldr	r3, [r4, #8]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	60a3      	str	r3, [r4, #8]
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	6022      	str	r2, [r4, #0]
 8003b02:	701e      	strb	r6, [r3, #0]
 8003b04:	6962      	ldr	r2, [r4, #20]
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d004      	beq.n	8003b16 <__swbuf_r+0x6e>
 8003b0c:	89a3      	ldrh	r3, [r4, #12]
 8003b0e:	07db      	lsls	r3, r3, #31
 8003b10:	d5e1      	bpl.n	8003ad6 <__swbuf_r+0x2e>
 8003b12:	2e0a      	cmp	r6, #10
 8003b14:	d1df      	bne.n	8003ad6 <__swbuf_r+0x2e>
 8003b16:	4621      	mov	r1, r4
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f7ff fca3 	bl	8003464 <_fflush_r>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d0d9      	beq.n	8003ad6 <__swbuf_r+0x2e>
 8003b22:	e7d6      	b.n	8003ad2 <__swbuf_r+0x2a>

08003b24 <__swsetup_r>:
 8003b24:	b538      	push	{r3, r4, r5, lr}
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <__swsetup_r+0xa8>)
 8003b28:	4605      	mov	r5, r0
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	b118      	cbz	r0, 8003b38 <__swsetup_r+0x14>
 8003b30:	6a03      	ldr	r3, [r0, #32]
 8003b32:	b90b      	cbnz	r3, 8003b38 <__swsetup_r+0x14>
 8003b34:	f7ff f988 	bl	8002e48 <__sinit>
 8003b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b3c:	0719      	lsls	r1, r3, #28
 8003b3e:	d422      	bmi.n	8003b86 <__swsetup_r+0x62>
 8003b40:	06da      	lsls	r2, r3, #27
 8003b42:	d407      	bmi.n	8003b54 <__swsetup_r+0x30>
 8003b44:	2209      	movs	r2, #9
 8003b46:	602a      	str	r2, [r5, #0]
 8003b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	81a3      	strh	r3, [r4, #12]
 8003b52:	e033      	b.n	8003bbc <__swsetup_r+0x98>
 8003b54:	0758      	lsls	r0, r3, #29
 8003b56:	d512      	bpl.n	8003b7e <__swsetup_r+0x5a>
 8003b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b5a:	b141      	cbz	r1, 8003b6e <__swsetup_r+0x4a>
 8003b5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b60:	4299      	cmp	r1, r3
 8003b62:	d002      	beq.n	8003b6a <__swsetup_r+0x46>
 8003b64:	4628      	mov	r0, r5
 8003b66:	f7ff faff 	bl	8003168 <_free_r>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b6e:	89a3      	ldrh	r3, [r4, #12]
 8003b70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b74:	81a3      	strh	r3, [r4, #12]
 8003b76:	2300      	movs	r3, #0
 8003b78:	6063      	str	r3, [r4, #4]
 8003b7a:	6923      	ldr	r3, [r4, #16]
 8003b7c:	6023      	str	r3, [r4, #0]
 8003b7e:	89a3      	ldrh	r3, [r4, #12]
 8003b80:	f043 0308 	orr.w	r3, r3, #8
 8003b84:	81a3      	strh	r3, [r4, #12]
 8003b86:	6923      	ldr	r3, [r4, #16]
 8003b88:	b94b      	cbnz	r3, 8003b9e <__swsetup_r+0x7a>
 8003b8a:	89a3      	ldrh	r3, [r4, #12]
 8003b8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b94:	d003      	beq.n	8003b9e <__swsetup_r+0x7a>
 8003b96:	4621      	mov	r1, r4
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f000 f890 	bl	8003cbe <__smakebuf_r>
 8003b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba2:	f013 0201 	ands.w	r2, r3, #1
 8003ba6:	d00a      	beq.n	8003bbe <__swsetup_r+0x9a>
 8003ba8:	2200      	movs	r2, #0
 8003baa:	60a2      	str	r2, [r4, #8]
 8003bac:	6962      	ldr	r2, [r4, #20]
 8003bae:	4252      	negs	r2, r2
 8003bb0:	61a2      	str	r2, [r4, #24]
 8003bb2:	6922      	ldr	r2, [r4, #16]
 8003bb4:	b942      	cbnz	r2, 8003bc8 <__swsetup_r+0xa4>
 8003bb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003bba:	d1c5      	bne.n	8003b48 <__swsetup_r+0x24>
 8003bbc:	bd38      	pop	{r3, r4, r5, pc}
 8003bbe:	0799      	lsls	r1, r3, #30
 8003bc0:	bf58      	it	pl
 8003bc2:	6962      	ldrpl	r2, [r4, #20]
 8003bc4:	60a2      	str	r2, [r4, #8]
 8003bc6:	e7f4      	b.n	8003bb2 <__swsetup_r+0x8e>
 8003bc8:	2000      	movs	r0, #0
 8003bca:	e7f7      	b.n	8003bbc <__swsetup_r+0x98>
 8003bcc:	20000030 	.word	0x20000030

08003bd0 <_raise_r>:
 8003bd0:	291f      	cmp	r1, #31
 8003bd2:	b538      	push	{r3, r4, r5, lr}
 8003bd4:	4605      	mov	r5, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	d904      	bls.n	8003be4 <_raise_r+0x14>
 8003bda:	2316      	movs	r3, #22
 8003bdc:	6003      	str	r3, [r0, #0]
 8003bde:	f04f 30ff 	mov.w	r0, #4294967295
 8003be2:	bd38      	pop	{r3, r4, r5, pc}
 8003be4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003be6:	b112      	cbz	r2, 8003bee <_raise_r+0x1e>
 8003be8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003bec:	b94b      	cbnz	r3, 8003c02 <_raise_r+0x32>
 8003bee:	4628      	mov	r0, r5
 8003bf0:	f000 f830 	bl	8003c54 <_getpid_r>
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bfe:	f000 b817 	b.w	8003c30 <_kill_r>
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d00a      	beq.n	8003c1c <_raise_r+0x4c>
 8003c06:	1c59      	adds	r1, r3, #1
 8003c08:	d103      	bne.n	8003c12 <_raise_r+0x42>
 8003c0a:	2316      	movs	r3, #22
 8003c0c:	6003      	str	r3, [r0, #0]
 8003c0e:	2001      	movs	r0, #1
 8003c10:	e7e7      	b.n	8003be2 <_raise_r+0x12>
 8003c12:	2100      	movs	r1, #0
 8003c14:	4620      	mov	r0, r4
 8003c16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003c1a:	4798      	blx	r3
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	e7e0      	b.n	8003be2 <_raise_r+0x12>

08003c20 <raise>:
 8003c20:	4b02      	ldr	r3, [pc, #8]	@ (8003c2c <raise+0xc>)
 8003c22:	4601      	mov	r1, r0
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	f7ff bfd3 	b.w	8003bd0 <_raise_r>
 8003c2a:	bf00      	nop
 8003c2c:	20000030 	.word	0x20000030

08003c30 <_kill_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	2300      	movs	r3, #0
 8003c34:	4d06      	ldr	r5, [pc, #24]	@ (8003c50 <_kill_r+0x20>)
 8003c36:	4604      	mov	r4, r0
 8003c38:	4608      	mov	r0, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	602b      	str	r3, [r5, #0]
 8003c3e:	f7fc ff2a 	bl	8000a96 <_kill>
 8003c42:	1c43      	adds	r3, r0, #1
 8003c44:	d102      	bne.n	8003c4c <_kill_r+0x1c>
 8003c46:	682b      	ldr	r3, [r5, #0]
 8003c48:	b103      	cbz	r3, 8003c4c <_kill_r+0x1c>
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	bd38      	pop	{r3, r4, r5, pc}
 8003c4e:	bf00      	nop
 8003c50:	200002f4 	.word	0x200002f4

08003c54 <_getpid_r>:
 8003c54:	f7fc bf18 	b.w	8000a88 <_getpid>

08003c58 <memchr>:
 8003c58:	4603      	mov	r3, r0
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	b2c9      	uxtb	r1, r1
 8003c5e:	4402      	add	r2, r0
 8003c60:	4293      	cmp	r3, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	d101      	bne.n	8003c6a <memchr+0x12>
 8003c66:	2000      	movs	r0, #0
 8003c68:	e003      	b.n	8003c72 <memchr+0x1a>
 8003c6a:	7804      	ldrb	r4, [r0, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	428c      	cmp	r4, r1
 8003c70:	d1f6      	bne.n	8003c60 <memchr+0x8>
 8003c72:	bd10      	pop	{r4, pc}

08003c74 <__swhatbuf_r>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	460c      	mov	r4, r1
 8003c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c7c:	4615      	mov	r5, r2
 8003c7e:	2900      	cmp	r1, #0
 8003c80:	461e      	mov	r6, r3
 8003c82:	b096      	sub	sp, #88	@ 0x58
 8003c84:	da0c      	bge.n	8003ca0 <__swhatbuf_r+0x2c>
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	2100      	movs	r1, #0
 8003c8a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c8e:	bf14      	ite	ne
 8003c90:	2340      	movne	r3, #64	@ 0x40
 8003c92:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003c96:	2000      	movs	r0, #0
 8003c98:	6031      	str	r1, [r6, #0]
 8003c9a:	602b      	str	r3, [r5, #0]
 8003c9c:	b016      	add	sp, #88	@ 0x58
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ca0:	466a      	mov	r2, sp
 8003ca2:	f000 f849 	bl	8003d38 <_fstat_r>
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	dbed      	blt.n	8003c86 <__swhatbuf_r+0x12>
 8003caa:	9901      	ldr	r1, [sp, #4]
 8003cac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003cb0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003cb4:	4259      	negs	r1, r3
 8003cb6:	4159      	adcs	r1, r3
 8003cb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cbc:	e7eb      	b.n	8003c96 <__swhatbuf_r+0x22>

08003cbe <__smakebuf_r>:
 8003cbe:	898b      	ldrh	r3, [r1, #12]
 8003cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cc2:	079d      	lsls	r5, r3, #30
 8003cc4:	4606      	mov	r6, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	d507      	bpl.n	8003cda <__smakebuf_r+0x1c>
 8003cca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003cce:	6023      	str	r3, [r4, #0]
 8003cd0:	6123      	str	r3, [r4, #16]
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	6163      	str	r3, [r4, #20]
 8003cd6:	b003      	add	sp, #12
 8003cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cda:	466a      	mov	r2, sp
 8003cdc:	ab01      	add	r3, sp, #4
 8003cde:	f7ff ffc9 	bl	8003c74 <__swhatbuf_r>
 8003ce2:	9f00      	ldr	r7, [sp, #0]
 8003ce4:	4605      	mov	r5, r0
 8003ce6:	4639      	mov	r1, r7
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f7ff faaf 	bl	800324c <_malloc_r>
 8003cee:	b948      	cbnz	r0, 8003d04 <__smakebuf_r+0x46>
 8003cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cf4:	059a      	lsls	r2, r3, #22
 8003cf6:	d4ee      	bmi.n	8003cd6 <__smakebuf_r+0x18>
 8003cf8:	f023 0303 	bic.w	r3, r3, #3
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	e7e2      	b.n	8003cca <__smakebuf_r+0xc>
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d0e:	81a3      	strh	r3, [r4, #12]
 8003d10:	9b01      	ldr	r3, [sp, #4]
 8003d12:	6020      	str	r0, [r4, #0]
 8003d14:	b15b      	cbz	r3, 8003d2e <__smakebuf_r+0x70>
 8003d16:	4630      	mov	r0, r6
 8003d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d1c:	f000 f81e 	bl	8003d5c <_isatty_r>
 8003d20:	b128      	cbz	r0, 8003d2e <__smakebuf_r+0x70>
 8003d22:	89a3      	ldrh	r3, [r4, #12]
 8003d24:	f023 0303 	bic.w	r3, r3, #3
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	81a3      	strh	r3, [r4, #12]
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	431d      	orrs	r5, r3
 8003d32:	81a5      	strh	r5, [r4, #12]
 8003d34:	e7cf      	b.n	8003cd6 <__smakebuf_r+0x18>
	...

08003d38 <_fstat_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	4d06      	ldr	r5, [pc, #24]	@ (8003d58 <_fstat_r+0x20>)
 8003d3e:	4604      	mov	r4, r0
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	602b      	str	r3, [r5, #0]
 8003d46:	f7fc ff05 	bl	8000b54 <_fstat>
 8003d4a:	1c43      	adds	r3, r0, #1
 8003d4c:	d102      	bne.n	8003d54 <_fstat_r+0x1c>
 8003d4e:	682b      	ldr	r3, [r5, #0]
 8003d50:	b103      	cbz	r3, 8003d54 <_fstat_r+0x1c>
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	bd38      	pop	{r3, r4, r5, pc}
 8003d56:	bf00      	nop
 8003d58:	200002f4 	.word	0x200002f4

08003d5c <_isatty_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	2300      	movs	r3, #0
 8003d60:	4d05      	ldr	r5, [pc, #20]	@ (8003d78 <_isatty_r+0x1c>)
 8003d62:	4604      	mov	r4, r0
 8003d64:	4608      	mov	r0, r1
 8003d66:	602b      	str	r3, [r5, #0]
 8003d68:	f7fc ff03 	bl	8000b72 <_isatty>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	d102      	bne.n	8003d76 <_isatty_r+0x1a>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	b103      	cbz	r3, 8003d76 <_isatty_r+0x1a>
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
 8003d78:	200002f4 	.word	0x200002f4

08003d7c <_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr

08003d88 <_fini>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr
